
stm32_SVM_VFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f68  08004f68  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004f68  08004f68  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f68  08004f68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000014  08004f84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004f84  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac20  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7d  00000000  00000000  0002ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b36  00000000  00000000  0002dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c110  00000000  00000000  000458be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9bc  00000000  00000000  000519ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000de3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080048d0 	.word	0x080048d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080048d0 	.word	0x080048d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2uiz>:
 80005d8:	004a      	lsls	r2, r1, #1
 80005da:	d211      	bcs.n	8000600 <__aeabi_d2uiz+0x28>
 80005dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005e0:	d211      	bcs.n	8000606 <__aeabi_d2uiz+0x2e>
 80005e2:	d50d      	bpl.n	8000600 <__aeabi_d2uiz+0x28>
 80005e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005ec:	d40e      	bmi.n	800060c <__aeabi_d2uiz+0x34>
 80005ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005fa:	fa23 f002 	lsr.w	r0, r3, r2
 80005fe:	4770      	bx	lr
 8000600:	f04f 0000 	mov.w	r0, #0
 8000604:	4770      	bx	lr
 8000606:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800060a:	d102      	bne.n	8000612 <__aeabi_d2uiz+0x3a>
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr

08000618 <__aeabi_frsub>:
 8000618:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800061c:	e002      	b.n	8000624 <__addsf3>
 800061e:	bf00      	nop

08000620 <__aeabi_fsub>:
 8000620:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000624 <__addsf3>:
 8000624:	0042      	lsls	r2, r0, #1
 8000626:	bf1f      	itttt	ne
 8000628:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800062c:	ea92 0f03 	teqne	r2, r3
 8000630:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000634:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000638:	d06a      	beq.n	8000710 <__addsf3+0xec>
 800063a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800063e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000642:	bfc1      	itttt	gt
 8000644:	18d2      	addgt	r2, r2, r3
 8000646:	4041      	eorgt	r1, r0
 8000648:	4048      	eorgt	r0, r1
 800064a:	4041      	eorgt	r1, r0
 800064c:	bfb8      	it	lt
 800064e:	425b      	neglt	r3, r3
 8000650:	2b19      	cmp	r3, #25
 8000652:	bf88      	it	hi
 8000654:	4770      	bxhi	lr
 8000656:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800065a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000662:	bf18      	it	ne
 8000664:	4240      	negne	r0, r0
 8000666:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800066a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800066e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4249      	negne	r1, r1
 8000676:	ea92 0f03 	teq	r2, r3
 800067a:	d03f      	beq.n	80006fc <__addsf3+0xd8>
 800067c:	f1a2 0201 	sub.w	r2, r2, #1
 8000680:	fa41 fc03 	asr.w	ip, r1, r3
 8000684:	eb10 000c 	adds.w	r0, r0, ip
 8000688:	f1c3 0320 	rsb	r3, r3, #32
 800068c:	fa01 f103 	lsl.w	r1, r1, r3
 8000690:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000694:	d502      	bpl.n	800069c <__addsf3+0x78>
 8000696:	4249      	negs	r1, r1
 8000698:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800069c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006a0:	d313      	bcc.n	80006ca <__addsf3+0xa6>
 80006a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006a6:	d306      	bcc.n	80006b6 <__addsf3+0x92>
 80006a8:	0840      	lsrs	r0, r0, #1
 80006aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ae:	f102 0201 	add.w	r2, r2, #1
 80006b2:	2afe      	cmp	r2, #254	; 0xfe
 80006b4:	d251      	bcs.n	800075a <__addsf3+0x136>
 80006b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006be:	bf08      	it	eq
 80006c0:	f020 0001 	biceq.w	r0, r0, #1
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	4770      	bx	lr
 80006ca:	0049      	lsls	r1, r1, #1
 80006cc:	eb40 0000 	adc.w	r0, r0, r0
 80006d0:	3a01      	subs	r2, #1
 80006d2:	bf28      	it	cs
 80006d4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006d8:	d2ed      	bcs.n	80006b6 <__addsf3+0x92>
 80006da:	fab0 fc80 	clz	ip, r0
 80006de:	f1ac 0c08 	sub.w	ip, ip, #8
 80006e2:	ebb2 020c 	subs.w	r2, r2, ip
 80006e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ea:	bfaa      	itet	ge
 80006ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006f0:	4252      	neglt	r2, r2
 80006f2:	4318      	orrge	r0, r3
 80006f4:	bfbc      	itt	lt
 80006f6:	40d0      	lsrlt	r0, r2
 80006f8:	4318      	orrlt	r0, r3
 80006fa:	4770      	bx	lr
 80006fc:	f092 0f00 	teq	r2, #0
 8000700:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000704:	bf06      	itte	eq
 8000706:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800070a:	3201      	addeq	r2, #1
 800070c:	3b01      	subne	r3, #1
 800070e:	e7b5      	b.n	800067c <__addsf3+0x58>
 8000710:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000718:	bf18      	it	ne
 800071a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800071e:	d021      	beq.n	8000764 <__addsf3+0x140>
 8000720:	ea92 0f03 	teq	r2, r3
 8000724:	d004      	beq.n	8000730 <__addsf3+0x10c>
 8000726:	f092 0f00 	teq	r2, #0
 800072a:	bf08      	it	eq
 800072c:	4608      	moveq	r0, r1
 800072e:	4770      	bx	lr
 8000730:	ea90 0f01 	teq	r0, r1
 8000734:	bf1c      	itt	ne
 8000736:	2000      	movne	r0, #0
 8000738:	4770      	bxne	lr
 800073a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800073e:	d104      	bne.n	800074a <__addsf3+0x126>
 8000740:	0040      	lsls	r0, r0, #1
 8000742:	bf28      	it	cs
 8000744:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800074e:	bf3c      	itt	cc
 8000750:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000754:	4770      	bxcc	lr
 8000756:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800075a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800075e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000762:	4770      	bx	lr
 8000764:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000768:	bf16      	itet	ne
 800076a:	4608      	movne	r0, r1
 800076c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000770:	4601      	movne	r1, r0
 8000772:	0242      	lsls	r2, r0, #9
 8000774:	bf06      	itte	eq
 8000776:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800077a:	ea90 0f01 	teqeq	r0, r1
 800077e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000782:	4770      	bx	lr

08000784 <__aeabi_ui2f>:
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	e004      	b.n	8000794 <__aeabi_i2f+0x8>
 800078a:	bf00      	nop

0800078c <__aeabi_i2f>:
 800078c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	ea5f 0c00 	movs.w	ip, r0
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007a0:	4601      	mov	r1, r0
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	e01c      	b.n	80007e2 <__aeabi_l2f+0x2a>

080007a8 <__aeabi_ul2f>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	f04f 0300 	mov.w	r3, #0
 80007b4:	e00a      	b.n	80007cc <__aeabi_l2f+0x14>
 80007b6:	bf00      	nop

080007b8 <__aeabi_l2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007c4:	d502      	bpl.n	80007cc <__aeabi_l2f+0x14>
 80007c6:	4240      	negs	r0, r0
 80007c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007cc:	ea5f 0c01 	movs.w	ip, r1
 80007d0:	bf02      	ittt	eq
 80007d2:	4684      	moveq	ip, r0
 80007d4:	4601      	moveq	r1, r0
 80007d6:	2000      	moveq	r0, #0
 80007d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007dc:	bf08      	it	eq
 80007de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007e6:	fabc f28c 	clz	r2, ip
 80007ea:	3a08      	subs	r2, #8
 80007ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007f0:	db10      	blt.n	8000814 <__aeabi_l2f+0x5c>
 80007f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007f6:	4463      	add	r3, ip
 80007f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000804:	fa20 f202 	lsr.w	r2, r0, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f102 0220 	add.w	r2, r2, #32
 8000818:	fa01 fc02 	lsl.w	ip, r1, r2
 800081c:	f1c2 0220 	rsb	r2, r2, #32
 8000820:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000824:	fa21 f202 	lsr.w	r2, r1, r2
 8000828:	eb43 0002 	adc.w	r0, r3, r2
 800082c:	bf08      	it	eq
 800082e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000832:	4770      	bx	lr

08000834 <__aeabi_fmul>:
 8000834:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000838:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800083c:	bf1e      	ittt	ne
 800083e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000842:	ea92 0f0c 	teqne	r2, ip
 8000846:	ea93 0f0c 	teqne	r3, ip
 800084a:	d06f      	beq.n	800092c <__aeabi_fmul+0xf8>
 800084c:	441a      	add	r2, r3
 800084e:	ea80 0c01 	eor.w	ip, r0, r1
 8000852:	0240      	lsls	r0, r0, #9
 8000854:	bf18      	it	ne
 8000856:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800085a:	d01e      	beq.n	800089a <__aeabi_fmul+0x66>
 800085c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000860:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000864:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000868:	fba0 3101 	umull	r3, r1, r0, r1
 800086c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000870:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000874:	bf3e      	ittt	cc
 8000876:	0049      	lslcc	r1, r1, #1
 8000878:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800087c:	005b      	lslcc	r3, r3, #1
 800087e:	ea40 0001 	orr.w	r0, r0, r1
 8000882:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000886:	2afd      	cmp	r2, #253	; 0xfd
 8000888:	d81d      	bhi.n	80008c6 <__aeabi_fmul+0x92>
 800088a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800088e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000892:	bf08      	it	eq
 8000894:	f020 0001 	biceq.w	r0, r0, #1
 8000898:	4770      	bx	lr
 800089a:	f090 0f00 	teq	r0, #0
 800089e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008a2:	bf08      	it	eq
 80008a4:	0249      	lsleq	r1, r1, #9
 80008a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008ae:	3a7f      	subs	r2, #127	; 0x7f
 80008b0:	bfc2      	ittt	gt
 80008b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ba:	4770      	bxgt	lr
 80008bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	3a01      	subs	r2, #1
 80008c6:	dc5d      	bgt.n	8000984 <__aeabi_fmul+0x150>
 80008c8:	f112 0f19 	cmn.w	r2, #25
 80008cc:	bfdc      	itt	le
 80008ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008d2:	4770      	bxle	lr
 80008d4:	f1c2 0200 	rsb	r2, r2, #0
 80008d8:	0041      	lsls	r1, r0, #1
 80008da:	fa21 f102 	lsr.w	r1, r1, r2
 80008de:	f1c2 0220 	rsb	r2, r2, #32
 80008e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ea:	f140 0000 	adc.w	r0, r0, #0
 80008ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008f2:	bf08      	it	eq
 80008f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008f8:	4770      	bx	lr
 80008fa:	f092 0f00 	teq	r2, #0
 80008fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000902:	bf02      	ittt	eq
 8000904:	0040      	lsleq	r0, r0, #1
 8000906:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800090a:	3a01      	subeq	r2, #1
 800090c:	d0f9      	beq.n	8000902 <__aeabi_fmul+0xce>
 800090e:	ea40 000c 	orr.w	r0, r0, ip
 8000912:	f093 0f00 	teq	r3, #0
 8000916:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0049      	lsleq	r1, r1, #1
 800091e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000922:	3b01      	subeq	r3, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fmul+0xe6>
 8000926:	ea41 010c 	orr.w	r1, r1, ip
 800092a:	e78f      	b.n	800084c <__aeabi_fmul+0x18>
 800092c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000930:	ea92 0f0c 	teq	r2, ip
 8000934:	bf18      	it	ne
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d00a      	beq.n	8000952 <__aeabi_fmul+0x11e>
 800093c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000940:	bf18      	it	ne
 8000942:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000946:	d1d8      	bne.n	80008fa <__aeabi_fmul+0xc6>
 8000948:	ea80 0001 	eor.w	r0, r0, r1
 800094c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000950:	4770      	bx	lr
 8000952:	f090 0f00 	teq	r0, #0
 8000956:	bf17      	itett	ne
 8000958:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800095c:	4608      	moveq	r0, r1
 800095e:	f091 0f00 	teqne	r1, #0
 8000962:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000966:	d014      	beq.n	8000992 <__aeabi_fmul+0x15e>
 8000968:	ea92 0f0c 	teq	r2, ip
 800096c:	d101      	bne.n	8000972 <__aeabi_fmul+0x13e>
 800096e:	0242      	lsls	r2, r0, #9
 8000970:	d10f      	bne.n	8000992 <__aeabi_fmul+0x15e>
 8000972:	ea93 0f0c 	teq	r3, ip
 8000976:	d103      	bne.n	8000980 <__aeabi_fmul+0x14c>
 8000978:	024b      	lsls	r3, r1, #9
 800097a:	bf18      	it	ne
 800097c:	4608      	movne	r0, r1
 800097e:	d108      	bne.n	8000992 <__aeabi_fmul+0x15e>
 8000980:	ea80 0001 	eor.w	r0, r0, r1
 8000984:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bx	lr

0800099c <__aeabi_fdiv>:
 800099c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a4:	bf1e      	ittt	ne
 80009a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009aa:	ea92 0f0c 	teqne	r2, ip
 80009ae:	ea93 0f0c 	teqne	r3, ip
 80009b2:	d069      	beq.n	8000a88 <__aeabi_fdiv+0xec>
 80009b4:	eba2 0203 	sub.w	r2, r2, r3
 80009b8:	ea80 0c01 	eor.w	ip, r0, r1
 80009bc:	0249      	lsls	r1, r1, #9
 80009be:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009c2:	d037      	beq.n	8000a34 <__aeabi_fdiv+0x98>
 80009c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009d4:	428b      	cmp	r3, r1
 80009d6:	bf38      	it	cc
 80009d8:	005b      	lslcc	r3, r3, #1
 80009da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009e2:	428b      	cmp	r3, r1
 80009e4:	bf24      	itt	cs
 80009e6:	1a5b      	subcs	r3, r3, r1
 80009e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009f0:	bf24      	itt	cs
 80009f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009fe:	bf24      	itt	cs
 8000a00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a0c:	bf24      	itt	cs
 8000a0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	bf18      	it	ne
 8000a1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a1e:	d1e0      	bne.n	80009e2 <__aeabi_fdiv+0x46>
 8000a20:	2afd      	cmp	r2, #253	; 0xfd
 8000a22:	f63f af50 	bhi.w	80008c6 <__aeabi_fmul+0x92>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a3c:	327f      	adds	r2, #127	; 0x7f
 8000a3e:	bfc2      	ittt	gt
 8000a40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a48:	4770      	bxgt	lr
 8000a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	3a01      	subs	r2, #1
 8000a54:	e737      	b.n	80008c6 <__aeabi_fmul+0x92>
 8000a56:	f092 0f00 	teq	r2, #0
 8000a5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0040      	lsleq	r0, r0, #1
 8000a62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a66:	3a01      	subeq	r2, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fdiv+0xc2>
 8000a6a:	ea40 000c 	orr.w	r0, r0, ip
 8000a6e:	f093 0f00 	teq	r3, #0
 8000a72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a76:	bf02      	ittt	eq
 8000a78:	0049      	lsleq	r1, r1, #1
 8000a7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a7e:	3b01      	subeq	r3, #1
 8000a80:	d0f9      	beq.n	8000a76 <__aeabi_fdiv+0xda>
 8000a82:	ea41 010c 	orr.w	r1, r1, ip
 8000a86:	e795      	b.n	80009b4 <__aeabi_fdiv+0x18>
 8000a88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a8c:	ea92 0f0c 	teq	r2, ip
 8000a90:	d108      	bne.n	8000aa4 <__aeabi_fdiv+0x108>
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	f47f af7d 	bne.w	8000992 <__aeabi_fmul+0x15e>
 8000a98:	ea93 0f0c 	teq	r3, ip
 8000a9c:	f47f af70 	bne.w	8000980 <__aeabi_fmul+0x14c>
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	e776      	b.n	8000992 <__aeabi_fmul+0x15e>
 8000aa4:	ea93 0f0c 	teq	r3, ip
 8000aa8:	d104      	bne.n	8000ab4 <__aeabi_fdiv+0x118>
 8000aaa:	024b      	lsls	r3, r1, #9
 8000aac:	f43f af4c 	beq.w	8000948 <__aeabi_fmul+0x114>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e76e      	b.n	8000992 <__aeabi_fmul+0x15e>
 8000ab4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ab8:	bf18      	it	ne
 8000aba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	d1ca      	bne.n	8000a56 <__aeabi_fdiv+0xba>
 8000ac0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ac4:	f47f af5c 	bne.w	8000980 <__aeabi_fmul+0x14c>
 8000ac8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000acc:	f47f af3c 	bne.w	8000948 <__aeabi_fmul+0x114>
 8000ad0:	e75f      	b.n	8000992 <__aeabi_fmul+0x15e>
 8000ad2:	bf00      	nop

08000ad4 <__gesf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpsf2+0x4>
 8000ada:	bf00      	nop

08000adc <__lesf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpsf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpsf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000af0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afe:	d011      	beq.n	8000b24 <__cmpsf2+0x40>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b06:	bf18      	it	ne
 8000b08:	ea90 0f01 	teqne	r0, r1
 8000b0c:	bf58      	it	pl
 8000b0e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b12:	bf88      	it	hi
 8000b14:	17c8      	asrhi	r0, r1, #31
 8000b16:	bf38      	it	cc
 8000b18:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b1c:	bf18      	it	ne
 8000b1e:	f040 0001 	orrne.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	d102      	bne.n	8000b30 <__cmpsf2+0x4c>
 8000b2a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b2e:	d105      	bne.n	8000b3c <__cmpsf2+0x58>
 8000b30:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b34:	d1e4      	bne.n	8000b00 <__cmpsf2+0x1c>
 8000b36:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b3a:	d0e1      	beq.n	8000b00 <__cmpsf2+0x1c>
 8000b3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_cfrcmple>:
 8000b44:	4684      	mov	ip, r0
 8000b46:	4608      	mov	r0, r1
 8000b48:	4661      	mov	r1, ip
 8000b4a:	e7ff      	b.n	8000b4c <__aeabi_cfcmpeq>

08000b4c <__aeabi_cfcmpeq>:
 8000b4c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b4e:	f7ff ffc9 	bl	8000ae4 <__cmpsf2>
 8000b52:	2800      	cmp	r0, #0
 8000b54:	bf48      	it	mi
 8000b56:	f110 0f00 	cmnmi.w	r0, #0
 8000b5a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b5c <__aeabi_fcmpeq>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff fff4 	bl	8000b4c <__aeabi_cfcmpeq>
 8000b64:	bf0c      	ite	eq
 8000b66:	2001      	moveq	r0, #1
 8000b68:	2000      	movne	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fcmplt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffea 	bl	8000b4c <__aeabi_cfcmpeq>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_fcmple>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffe0 	bl	8000b4c <__aeabi_cfcmpeq>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_fcmpge>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffd2 	bl	8000b44 <__aeabi_cfrcmple>
 8000ba0:	bf94      	ite	ls
 8000ba2:	2001      	movls	r0, #1
 8000ba4:	2000      	movhi	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_fcmpgt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffc8 	bl	8000b44 <__aeabi_cfrcmple>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_f2uiz>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	d20e      	bcs.n	8000be2 <__aeabi_f2uiz+0x22>
 8000bc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bc8:	d30b      	bcc.n	8000be2 <__aeabi_f2uiz+0x22>
 8000bca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bd2:	d409      	bmi.n	8000be8 <__aeabi_f2uiz+0x28>
 8000bd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bdc:	fa23 f002 	lsr.w	r0, r3, r2
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr
 8000be8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bec:	d101      	bne.n	8000bf2 <__aeabi_f2uiz+0x32>
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	d102      	bne.n	8000bf8 <__aeabi_f2uiz+0x38>
 8000bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fefe 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f858 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 fa70 	bl	80010f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c10:	f000 f8ee 	bl	8000df0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c14:	f000 f9a4 	bl	8000f60 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000c18:	f000 f8ac 	bl	8000d74 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c1c:	f000 fa04 	bl	8001028 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC for better accuracy and start it w/ interrupt
  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) Error_Handler();
 8000c20:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <main+0xa8>)
 8000c22:	f001 fb47 	bl	80022b4 <HAL_ADCEx_Calibration_Start>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <main+0x30>
 8000c2c:	f000 fd20 	bl	8001670 <Error_Handler>
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK) Error_Handler();
 8000c30:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <main+0xa8>)
 8000c32:	f001 f821 	bl	8001c78 <HAL_ADC_Start_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <main+0x40>
 8000c3c:	f000 fd18 	bl	8001670 <Error_Handler>

  //Start PWM generation
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) Error_Handler();
 8000c40:	481a      	ldr	r0, [pc, #104]	; (8000cac <main+0xac>)
 8000c42:	f002 fc51 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <main+0x50>
 8000c4c:	f000 fd10 	bl	8001670 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) Error_Handler();
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <main+0xb0>)
 8000c52:	f002 fc49 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <main+0x60>
 8000c5c:	f000 fd08 	bl	8001670 <Error_Handler>

  sineValuesGeneration();
 8000c60:	f000 fb20 	bl	80012a4 <sineValuesGeneration>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c64:	2100      	movs	r1, #0
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <main+0xb4>)
 8000c68:	f002 fce8 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <main+0xb4>)
 8000c70:	f003 fbb4 	bl	80043dc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c74:	2104      	movs	r1, #4
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <main+0xb4>)
 8000c78:	f002 fce0 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <main+0xb4>)
 8000c80:	f003 fbac 	bl	80043dc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c84:	2108      	movs	r1, #8
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <main+0xb4>)
 8000c88:	f002 fcd8 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <main+0xb4>)
 8000c90:	f003 fba4 	bl	80043dc <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(readyToUpdate){
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <main+0xb8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0fb      	beq.n	8000c94 <main+0x94>
		  updateValues();
 8000c9c:	f000 fa80 	bl	80011a0 <updateValues>
		  readyToUpdate = 0;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <main+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
	  if(readyToUpdate){
 8000ca6:	e7f5      	b.n	8000c94 <main+0x94>
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	200000f0 	.word	0x200000f0
 8000cb0:	200000a8 	.word	0x200000a8
 8000cb4:	20000060 	.word	0x20000060
 8000cb8:	20000156 	.word	0x20000156

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fd2e 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fe30 	bl	8002978 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d1e:	f000 fca7 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f89c 	bl	8002e7c <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d4a:	f000 fc91 	bl	8001670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fa08 	bl	8003170 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d66:	f000 fc83 	bl	8001670 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	; 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000d86:	4a19      	ldr	r2, [pc, #100]	; (8000dec <MX_ADC1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000d9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000db2:	f000 fe89 	bl	8001ac8 <HAL_ADC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f000 fc58 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_ADC1_Init+0x74>)
 8000dd2:	f001 f8db 	bl	8001f8c <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ddc:	f000 fc48 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000030 	.word	0x20000030
 8000dec:	40012400 	.word	0x40012400

08000df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b096      	sub	sp, #88	; 0x58
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fc7f 	bl	800472c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e30:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <MX_TIM1_Init+0x16c>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e34:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e3c:	2260      	movs	r2, #96	; 0x60
 8000e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8000e40:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e42:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4e:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5a:	483f      	ldr	r0, [pc, #252]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e5c:	f002 faf4 	bl	8003448 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e66:	f000 fc03 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e74:	4619      	mov	r1, r3
 8000e76:	4838      	ldr	r0, [pc, #224]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e78:	f002 fe4c 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e82:	f000 fbf5 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e86:	4834      	ldr	r0, [pc, #208]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000e88:	f002 fb80 	bl	800358c <HAL_TIM_PWM_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e92:	f000 fbed 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e96:	2310      	movs	r3, #16
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482c      	ldr	r0, [pc, #176]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000ea6:	f003 fb37 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000eb0:	f000 fbde 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb4:	2360      	movs	r3, #96	; 0x60
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481f      	ldr	r0, [pc, #124]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000eda:	f002 fd59 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ee4:	f000 fbc4 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	2204      	movs	r2, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4819      	ldr	r0, [pc, #100]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000ef2:	f002 fd4d 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000efc:	f000 fbb8 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	2208      	movs	r2, #8
 8000f06:	4619      	mov	r1, r3
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000f0a:	f002 fd41 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f14:	f000 fbac 	bl	8001670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 172;
 8000f24:	23ac      	movs	r3, #172	; 0xac
 8000f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000f3c:	f003 fb4a 	bl	80045d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000f46:	f000 fb93 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM1_Init+0x168>)
 8000f4c:	f000 fc68 	bl	8001820 <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3758      	adds	r7, #88	; 0x58
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000060 	.word	0x20000060
 8000f5c:	40012c00 	.word	0x40012c00

08000f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000f9c:	2260      	movs	r2, #96	; 0x60
 8000f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000fa2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000fb6:	f002 fa47 	bl	8003448 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000fc0:	f000 fb56 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000fd2:	f002 fd9f 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fdc:	f000 fb48 	bl	8001670 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_TIM2_Init+0xc4>)
 8000ff0:	f002 fe57 	bl	8003ca2 <HAL_TIM_SlaveConfigSynchro>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ffa:	f000 fb39 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ffe:	2320      	movs	r3, #32
 8001000:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_TIM2_Init+0xc4>)
 800100c:	f003 fa84 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001016:	f000 fb2b 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	; 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000a8 	.word	0x200000a8

08001028 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <MX_TIM3_Init+0xc4>)
 8001058:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_TIM3_Init+0xc0>)
 800105c:	2201      	movs	r2, #1
 800105e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001062:	2260      	movs	r2, #96	; 0x60
 8001064:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 23999;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001068:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800106c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <MX_TIM3_Init+0xc0>)
 800107c:	f002 f9e4 	bl	8003448 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001086:	f000 faf3 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_TIM3_Init+0xc0>)
 8001098:	f002 fd3c 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010a2:	f000 fae5 	bl	8001670 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80010a6:	2306      	movs	r3, #6
 80010a8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_TIM3_Init+0xc0>)
 80010b6:	f002 fdf4 	bl	8003ca2 <HAL_TIM_SlaveConfigSynchro>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010c0:	f000 fad6 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010c4:	2320      	movs	r3, #32
 80010c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_TIM3_Init+0xc0>)
 80010d2:	f003 fa21 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80010dc:	f000 fac8 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000f0 	.word	0x200000f0
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_GPIO_Init+0xa8>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_GPIO_Init+0xa8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_GPIO_Init+0xa8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_GPIO_Init+0xa8>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_GPIO_Init+0xa8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <MX_GPIO_Init+0xa8>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_GPIO_Init+0xa8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_GPIO_Init+0xac>)
 800116c:	f001 fbec 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0xac>)
 800118a:	f001 fa59 	bl	8002640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40011000 	.word	0x40011000

080011a0 <updateValues>:

/* USER CODE BEGIN 4 */

void updateValues(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	m = (float)adc_val_follower/4096.0f;           // Modulation index (0 to 1)
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <updateValues+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff faeb 	bl	8000784 <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fbf1 	bl	800099c <__aeabi_fdiv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <updateValues+0xc0>)
 80011c0:	601a      	str	r2, [r3, #0]
	if(m < MMIN) m = MMIN;               // Limit minimum MI to 15%
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <updateValues+0xc0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <updateValues+0xc4>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fcd1 	bl	8000b70 <__aeabi_fcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <updateValues+0x3a>
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <updateValues+0xc0>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <updateValues+0xc4>)
 80011d8:	601a      	str	r2, [r3, #0]

	if (adc_val_follower < 1) adc_val_follower = 1;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <updateValues+0xbc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <updateValues+0x48>
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <updateValues+0xbc>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

	freq = (float)adc_val_follower*(FMAX/4096.0f);
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <updateValues+0xbc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fac9 	bl	8000784 <__aeabi_ui2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	491c      	ldr	r1, [pc, #112]	; (8001268 <updateValues+0xc8>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb1c 	bl	8000834 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <updateValues+0xcc>)
 8001202:	601a      	str	r2, [r3, #0]
	N  = floor((2.0f*FSW)/freq);
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <updateValues+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <updateValues+0xd0>)
 800120c:	f7ff fbc6 	bl	800099c <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f900 	bl	8000418 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f003 fa8e 	bl	8004740 <floor>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff f9d4 	bl	80005d8 <__aeabi_d2uiz>
 8001230:	4603      	mov	r3, r0
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <updateValues+0xd4>)
 8001234:	6013      	str	r3, [r2, #0]

	counter_sec = (N*counter_sec)/N_old;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <updateValues+0xd4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <updateValues+0xd8>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <updateValues+0xdc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <updateValues+0xd8>)
 800124c:	6013      	str	r3, [r2, #0]
	N_old = N;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <updateValues+0xd4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <updateValues+0xdc>)
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000138 	.word	0x20000138
 8001260:	20000004 	.word	0x20000004
 8001264:	3da13cfa 	.word	0x3da13cfa
 8001268:	3bf00000 	.word	0x3bf00000
 800126c:	20000000 	.word	0x20000000
 8001270:	46bb8000 	.word	0x46bb8000
 8001274:	20000158 	.word	0x20000158
 8001278:	20000148 	.word	0x20000148
 800127c:	2000015c 	.word	0x2000015c

08001280 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// IMPORTANT: Check time between executions

	adc_val = HAL_ADC_GetValue(&hadc1); // Read ADC value
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <HAL_ADC_ConvCpltCallback+0x1c>)
 800128a:	f000 fdab 	bl	8001de4 <HAL_ADC_GetValue>
 800128e:	4603      	mov	r3, r0
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
//		counter = round((double)N*(double)counter/(double)N_old);
//		N_old = N;
//
//		adc_val_old = adc_val; //freq = adc_val/MAXADC*MAXFREQ
//	}
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000030 	.word	0x20000030
 80012a0:	2000013c 	.word	0x2000013c

080012a4 <sineValuesGeneration>:

/**
  * @brief  This function pre-generates the sine values for modulator signal.
  * @retval None
  */
void sineValuesGeneration(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	// Executed only one time at the start of the program

	// Number of samples for one period
	N  = floor(2*FSW/freq);  // For generated frequency (f).
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <sineValuesGeneration+0x3c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <sineValuesGeneration+0x40>)
 80012b0:	f7ff fb74 	bl	800099c <__aeabi_fdiv>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8ae 	bl	8000418 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f003 fa3c 	bl	8004740 <floor>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff f982 	bl	80005d8 <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <sineValuesGeneration+0x44>)
 80012d8:	6013      	str	r3, [r2, #0]
	// Generation of sinusoidal reference wave
//	for(uint16_t i = 0; i < N0/2; i++){
//		//sinValues[i] = round(959.00*(0.5*m*sin(i*(double)2*PI/(double)N0)+0.5));
//		sinValues[i] = round(5999.00*(0.5*sin(i*2.00*PI/N0)+0.5));
//	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	46bb8000 	.word	0x46bb8000
 80012e8:	20000158 	.word	0x20000158

080012ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim2.Instance) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b95      	ldr	r3, [pc, #596]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 81a2 	bne.w	8001646 <HAL_TIM_PeriodElapsedCallback+0x35a>
		//Time between executions: 1/(2*FSW) = 13 us
		if(counterRateLimiter <= COUNTSPERADCINC){counterRateLimiter++;}
 8001302:	4b94      	ldr	r3, [pc, #592]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa40 	bl	800078c <__aeabi_i2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4992      	ldr	r1, [pc, #584]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fc37 	bl	8000b84 <__aeabi_fcmple>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_TIM_PeriodElapsedCallback+0x3e>
 800131c:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	e022      	b.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x84>
		else{
			if(adc_val_follower != adc_val) {
 800132a:	4b8c      	ldr	r3, [pc, #560]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d01c      	beq.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x84>
				if(adc_val > adc_val_follower) adc_val_follower++;
 8001336:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d905      	bls.n	800134e <HAL_TIM_PeriodElapsedCallback+0x62>
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a84      	ldr	r2, [pc, #528]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e00a      	b.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x78>
				else if(adc_val < adc_val_follower) adc_val_follower--;
 800134e:	4b84      	ldr	r3, [pc, #528]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d204      	bcs.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x78>
 800135a:	4b80      	ldr	r3, [pc, #512]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a7e      	ldr	r2, [pc, #504]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001362:	6013      	str	r3, [r2, #0]
				readyToUpdate = 1;
 8001364:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
				counterRateLimiter = 0;
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
			}
		}

		// Conditioning of counter
		counter0 = round((float)(N0*counter_sec)/(float)N);
 8001370:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fa01 	bl	8000784 <__aeabi_ui2f>
 8001382:	4604      	mov	r4, r0
 8001384:	4b79      	ldr	r3, [pc, #484]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f9fb 	bl	8000784 <__aeabi_ui2f>
 800138e:	4603      	mov	r3, r0
 8001390:	4619      	mov	r1, r3
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff fb02 	bl	800099c <__aeabi_fdiv>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f83c 	bl	8000418 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f003 fa4a 	bl	8004840 <round>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff f910 	bl	80005d8 <__aeabi_d2uiz>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013bc:	6013      	str	r3, [r2, #0]

		// Periods
		da = (uint16_t)(m*sinValues[N0/6 - counter0 - 1]);
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80013c6:	3303      	adds	r3, #3
 80013c8:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f9dc 	bl	800078c <__aeabi_i2f>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f7ff fa29 	bl	8000834 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fbeb 	bl	8000bc0 <__aeabi_f2uiz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b63      	ldr	r3, [pc, #396]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013f0:	801a      	strh	r2, [r3, #0]
		db = (uint16_t)(m*sinValues[counter0]);
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5f      	ldr	r2, [pc, #380]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f9c5 	bl	800078c <__aeabi_i2f>
 8001402:	4602      	mov	r2, r0
 8001404:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f7ff fa12 	bl	8000834 <__aeabi_fmul>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fbd4 	bl	8000bc0 <__aeabi_f2uiz>
 8001418:	4603      	mov	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800141e:	801a      	strh	r2, [r3, #0]
		d0 = PERIOD - da - db;
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001430:	3307      	adds	r3, #7
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001436:	801a      	strh	r2, [r3, #0]

		// Periods
		switch(sector){
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b05      	cmp	r3, #5
 800143e:	f200 80e3 	bhi.w	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001461 	.word	0x08001461
 800144c:	0800149d 	.word	0x0800149d
 8001450:	080014d9 	.word	0x080014d9
 8001454:	08001515 	.word	0x08001515
 8001458:	08001591 	.word	0x08001591
 800145c:	080015cd 	.word	0x080015cd
			case 0:
				TIM1->CCR1 = da + db + d0/2;
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800146e:	8812      	ldrh	r2, [r2, #0]
 8001470:	0852      	lsrs	r2, r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	441a      	add	r2, r3
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = db + d0/2;
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	441a      	add	r2, r3
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = d0/2;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800149a:	e0b5      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 1:
				TIM1->CCR1 = da + d0/2;
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	441a      	add	r2, r3
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = db + da + d0/2;
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	0852      	lsrs	r2, r2, #1
 80014c2:	b292      	uxth	r2, r2
 80014c4:	441a      	add	r2, r3
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = d0/2;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80014d6:	e097      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 2:
				TIM1->CCR1 = d0/2;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = da + db + d0/2;
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	0852      	lsrs	r2, r2, #1
 80014f6:	b292      	uxth	r2, r2
 80014f8:	441a      	add	r2, r3
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = db + d0/2;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	441a      	add	r2, r3
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001512:	e079      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 3:
				TIM1->CCR1 = d0/2;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800151e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = da + d0/2;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	441a      	add	r2, r3
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = db + da + d0/2;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x290>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	0852      	lsrs	r2, r2, #1
 8001546:	b292      	uxth	r2, r2
 8001548:	441a      	add	r2, r3
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800154c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800154e:	e05b      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8001550:	200000a8 	.word	0x200000a8
 8001554:	20000154 	.word	0x20000154
 8001558:	422fc800 	.word	0x422fc800
 800155c:	20000138 	.word	0x20000138
 8001560:	2000013c 	.word	0x2000013c
 8001564:	20000156 	.word	0x20000156
 8001568:	20000148 	.word	0x20000148
 800156c:	20000158 	.word	0x20000158
 8001570:	20000150 	.word	0x20000150
 8001574:	080048e8 	.word	0x080048e8
 8001578:	20000004 	.word	0x20000004
 800157c:	20000140 	.word	0x20000140
 8001580:	20000142 	.word	0x20000142
 8001584:	20000144 	.word	0x20000144
 8001588:	2000014c 	.word	0x2000014c
 800158c:	40012c00 	.word	0x40012c00
			case 4:
				TIM1->CCR1 = db + d0/2;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	441a      	add	r2, r3
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = d0/2;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = da + db + d0/2;
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	0852      	lsrs	r2, r2, #1
 80015c2:	b292      	uxth	r2, r2
 80015c4:	441a      	add	r2, r3
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80015ca:	e01d      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 5:
				TIM1->CCR1 = db + da + d0/2;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	0852      	lsrs	r2, r2, #1
 80015de:	b292      	uxth	r2, r2
 80015e0:	441a      	add	r2, r3
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = d0/2;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = da + d0/2;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	441a      	add	r2, r3
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001606:	bf00      	nop
		}

		counter_sec++;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001610:	6013      	str	r3, [r2, #0]
		if(counter_sec >= N/6){
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	089a      	lsrs	r2, r3, #2
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d808      	bhi.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x34c>
			sector++;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001630:	801a      	strh	r2, [r3, #0]
			counter_sec = 0;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
		}
		if(sector > 5){
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d902      	bls.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x35a>
			sector = 0;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop
 8001650:	20000142 	.word	0x20000142
 8001654:	20000144 	.word	0x20000144
 8001658:	40012c00 	.word	0x40012c00
 800165c:	20000140 	.word	0x20000140
 8001660:	20000148 	.word	0x20000148
 8001664:	20000158 	.word	0x20000158
 8001668:	aaaaaaab 	.word	0xaaaaaaab
 800166c:	2000014c 	.word	0x2000014c

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_MspInit+0x40>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_MspInit+0x40>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_MspInit+0x40>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_MspInit+0x40>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_MspInit+0x40>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_MspInit+0x40>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_ADC_MspInit+0x7c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d129      	bne.n	8001734 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_ADC_MspInit+0x80>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <HAL_ADC_MspInit+0x80>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_ADC_MspInit+0x80>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_ADC_MspInit+0x80>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_ADC_MspInit+0x80>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_ADC_MspInit+0x80>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_ADC_MspInit+0x84>)
 8001720:	f000 ff8e 	bl	8002640 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2012      	movs	r0, #18
 800172a:	f000 ff52 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800172e:	2012      	movs	r0, #18
 8001730:	f000 ff6b 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40012400 	.word	0x40012400
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_TIM_Base_MspInit+0xcc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d124      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 8001760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2019      	movs	r0, #25
 8001778:	f000 ff2b 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800177c:	2019      	movs	r0, #25
 800177e:	f000 ff44 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201a      	movs	r0, #26
 8001788:	f000 ff23 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800178c:	201a      	movs	r0, #26
 800178e:	f000 ff3c 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201b      	movs	r0, #27
 8001798:	f000 ff1b 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800179c:	201b      	movs	r0, #27
 800179e:	f000 ff34 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017a2:	e032      	b.n	800180a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d114      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201c      	movs	r0, #28
 80017cc:	f000 ff01 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d0:	201c      	movs	r0, #28
 80017d2:	f000 ff1a 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 80017d6:	e018      	b.n	800180a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_TIM_Base_MspInit+0xd4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d113      	bne.n	800180a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_TIM_Base_MspInit+0xd0>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	201d      	movs	r0, #29
 8001800:	f000 fee7 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001804:	201d      	movs	r0, #29
 8001806:	f000 ff00 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012c00 	.word	0x40012c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d142      	bne.n	80018c6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001870:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <HAL_TIM_MspPostInit+0xb8>)
 8001886:	f000 fedb 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188a:	2303      	movs	r3, #3
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	480f      	ldr	r0, [pc, #60]	; (80018dc <HAL_TIM_MspPostInit+0xbc>)
 800189e:	f000 fecf 	bl	8002640 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_TIM_MspPostInit+0xc0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_TIM_MspPostInit+0xc0>)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	40010000 	.word	0x40010000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f000 f8b1 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <ADC1_2_IRQHandler+0x10>)
 800193a:	f000 fa5f 	bl	8001dfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000030 	.word	0x20000030

08001948 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM1_UP_IRQHandler+0x10>)
 800194e:	f001 ff17 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000060 	.word	0x20000060

0800195c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001962:	f001 ff0d 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000060 	.word	0x20000060

08001970 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_CC_IRQHandler+0x10>)
 8001976:	f001 ff03 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000060 	.word	0x20000060

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f001 fef9 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000a8 	.word	0x200000a8

08001998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM3_IRQHandler+0x10>)
 800199e:	f001 feef 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000f0 	.word	0x200000f0

080019ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff fff8 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019be:	490c      	ldr	r1, [pc, #48]	; (80019f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d4:	4c09      	ldr	r4, [pc, #36]	; (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f002 fe7f 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff f90b 	bl	8000c00 <main>
  bx lr
 80019ea:	4770      	bx	lr
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80019f4:	08004f70 	.word	0x08004f70
  ldr r2, =_sbss
 80019f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80019fc:	20000164 	.word	0x20000164

08001a00 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <CAN1_RX1_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x28>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 fdd1 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fe2c 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fde9 	bl	8002626 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 fdb1 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	20000160 	.word	0x20000160

08001ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000160 	.word	0x20000160

08001ac8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0be      	b.n	8001c68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fdda 	bl	80016c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fb8f 	bl	8002230 <ADC_ConversionStop_Disable>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8099 	bne.w	8001c56 <HAL_ADC_Init+0x18e>
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8095 	bne.w	8001c56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b34:	f023 0302 	bic.w	r3, r3, #2
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7b1b      	ldrb	r3, [r3, #12]
 8001b4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b60:	d003      	beq.n	8001b6a <HAL_ADC_Init+0xa2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_ADC_Init+0xa8>
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_Init+0xaa>
 8001b70:	2300      	movs	r3, #0
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7d1b      	ldrb	r3, [r3, #20]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d119      	bne.n	8001bb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	035a      	lsls	r2, r3, #13
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_ADC_Init+0x1a8>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d003      	beq.n	8001bee <HAL_ADC_Init+0x126>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d104      	bne.n	8001bf8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	051b      	lsls	r3, r3, #20
 8001bf6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_ADC_Init+0x1ac>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10b      	bne.n	8001c34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c32:	e018      	b.n	8001c66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f023 0312 	bic.w	r3, r3, #18
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c54:	e007      	b.n	8001c66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	ffe1f7fd 	.word	0xffe1f7fd
 8001c74:	ff1f0efe 	.word	0xff1f0efe

08001c78 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Start_IT+0x1a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0a0      	b.n	8001dd4 <HAL_ADC_Start_IT+0x15c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fa6e 	bl	800217c <ADC_Enable>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 808f 	bne.w	8001dca <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a45      	ldr	r2, [pc, #276]	; (8001ddc <HAL_ADC_Start_IT+0x164>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_Start_IT+0x5e>
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_ADC_Start_IT+0x168>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d026      	beq.n	8001d3e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d00:	e01d      	b.n	8001d3e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <HAL_ADC_Start_IT+0x168>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Start_IT+0xaa>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_ADC_Start_IT+0x164>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10d      	bne.n	8001d3e <HAL_ADC_Start_IT+0xc6>
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_ADC_Start_IT+0x168>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f023 0206 	bic.w	r2, r3, #6
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d56:	e002      	b.n	8001d5e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0202 	mvn.w	r2, #2
 8001d6e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0220 	orr.w	r2, r2, #32
 8001d7e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d8e:	d113      	bne.n	8001db8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_ADC_Start_IT+0x164>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d105      	bne.n	8001da6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_ADC_Start_IT+0x168>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	e00c      	b.n	8001dd2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40012800 	.word	0x40012800
 8001de0:	40012400 	.word	0x40012400

08001de4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03e      	beq.n	8001e9c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d039      	beq.n	8001e9c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e4e:	d11d      	bne.n	8001e8c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d119      	bne.n	8001e8c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0220 	bic.w	r2, r2, #32
 8001e66:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff f9f7 	bl	8001280 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0212 	mvn.w	r2, #18
 8001e9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d04d      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d048      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ed2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ed6:	d012      	beq.n	8001efe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d125      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ef0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ef4:	d11d      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d119      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa6c 	bl	8002410 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 020c 	mvn.w	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f809 	bl	8001f7a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0201 	mvn.w	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x20>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0dc      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1da>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	d81c      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b05      	subs	r3, #5
 8001fce:	221f      	movs	r2, #31
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4019      	ands	r1, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b05      	subs	r3, #5
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff4:	e03c      	b.n	8002070 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d81c      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b23      	subs	r3, #35	; 0x23
 8002010:	221f      	movs	r2, #31
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	4019      	ands	r1, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b23      	subs	r3, #35	; 0x23
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	e01b      	b.n	8002070 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	3b41      	subs	r3, #65	; 0x41
 800204a:	221f      	movs	r2, #31
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	4019      	ands	r1, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b41      	subs	r3, #65	; 0x41
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b09      	cmp	r3, #9
 8002076:	d91c      	bls.n	80020b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	3b1e      	subs	r3, #30
 800208a:	2207      	movs	r2, #7
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	4019      	ands	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6898      	ldr	r0, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	3b1e      	subs	r3, #30
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	e019      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6919      	ldr	r1, [r3, #16]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4019      	ands	r1, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6898      	ldr	r0, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d003      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020f2:	2b11      	cmp	r3, #17
 80020f4:	d132      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_ADC_ConfigChannel+0x1e4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d125      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d126      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800211c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d11a      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_ADC_ConfigChannel+0x1e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_ADC_ConfigChannel+0x1ec>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0c9a      	lsrs	r2, r3, #18
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213c:	e002      	b.n	8002144 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_ConfigChannel+0x1b2>
 800214a:	e007      	b.n	800215c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40012400 	.word	0x40012400
 8002174:	20000008 	.word	0x20000008
 8002178:	431bde83 	.word	0x431bde83

0800217c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d040      	beq.n	800221c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <ADC_Enable+0xac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1f      	ldr	r2, [pc, #124]	; (800222c <ADC_Enable+0xb0>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b8:	e002      	b.n	80021c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021c6:	f7ff fc75 	bl	8001ab4 <HAL_GetTick>
 80021ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021cc:	e01f      	b.n	800220e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ce:	f7ff fc71 	bl	8001ab4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d918      	bls.n	800220e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d011      	beq.n	800220e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e007      	b.n	800221e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d1d8      	bne.n	80021ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	431bde83 	.word	0x431bde83

08002230 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d12e      	bne.n	80022a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800225a:	f7ff fc2b 	bl	8001ab4 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002260:	e01b      	b.n	800229a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002262:	f7ff fc27 	bl	8001ab4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d914      	bls.n	800229a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10d      	bne.n	800229a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e007      	b.n	80022aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d0dc      	beq.n	8002262 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e097      	b.n	8002402 <HAL_ADCEx_Calibration_Start+0x14e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa8 	bl	8002230 <ADC_ConversionStop_Disable>
 80022e0:	4603      	mov	r3, r0
 80022e2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff49 	bl	800217c <ADC_Enable>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 8081 	bne.w	80023f8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_ADCEx_Calibration_Start+0x158>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	2002      	movs	r0, #2
 8002310:	f000 ffe4 	bl	80032dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002314:	4603      	mov	r3, r0
 8002316:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800231a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800231c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800231e:	e002      	b.n	8002326 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800233c:	f7ff fbba 	bl	8001ab4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002342:	e01b      	b.n	800237c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002344:	f7ff fbb6 	bl	8001ab4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b0a      	cmp	r3, #10
 8002350:	d914      	bls.n	800237c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f023 0312 	bic.w	r3, r3, #18
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e042      	b.n	8002402 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1dc      	bne.n	8002344 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0204 	orr.w	r2, r2, #4
 8002398:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800239a:	f7ff fb8b 	bl	8001ab4 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023a0:	e01b      	b.n	80023da <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023a2:	f7ff fb87 	bl	8001ab4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b0a      	cmp	r3, #10
 80023ae:	d914      	bls.n	80023da <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	f023 0312 	bic.w	r3, r3, #18
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e013      	b.n	8002402 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1dc      	bne.n	80023a2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f023 0303 	bic.w	r3, r3, #3
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002400:	7dfb      	ldrb	r3, [r7, #23]
}
 8002402:	4618      	mov	r0, r3
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
 800240a:	bf00      	nop
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
	...

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4906      	ldr	r1, [pc, #24]	; (80024bc <__NVIC_EnableIRQ+0x34>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff90 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff2d 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff42 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff35 	bl	8002488 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e169      	b.n	8002928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002654:	2201      	movs	r2, #1
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8158 	bne.w	8002922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a9a      	ldr	r2, [pc, #616]	; (80028e0 <HAL_GPIO_Init+0x2a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d05e      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 800267c:	4a98      	ldr	r2, [pc, #608]	; (80028e0 <HAL_GPIO_Init+0x2a0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d875      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 8002682:	4a98      	ldr	r2, [pc, #608]	; (80028e4 <HAL_GPIO_Init+0x2a4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d058      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002688:	4a96      	ldr	r2, [pc, #600]	; (80028e4 <HAL_GPIO_Init+0x2a4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d86f      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800268e:	4a96      	ldr	r2, [pc, #600]	; (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d052      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002694:	4a94      	ldr	r2, [pc, #592]	; (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d869      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800269a:	4a94      	ldr	r2, [pc, #592]	; (80028ec <HAL_GPIO_Init+0x2ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04c      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026a0:	4a92      	ldr	r2, [pc, #584]	; (80028ec <HAL_GPIO_Init+0x2ac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d863      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026a6:	4a92      	ldr	r2, [pc, #584]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d046      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026ac:	4a90      	ldr	r2, [pc, #576]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d85d      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026b2:	2b12      	cmp	r3, #18
 80026b4:	d82a      	bhi.n	800270c <HAL_GPIO_Init+0xcc>
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d859      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_GPIO_Init+0x80>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	0800273b 	.word	0x0800273b
 80026c4:	08002715 	.word	0x08002715
 80026c8:	08002727 	.word	0x08002727
 80026cc:	08002769 	.word	0x08002769
 80026d0:	0800276f 	.word	0x0800276f
 80026d4:	0800276f 	.word	0x0800276f
 80026d8:	0800276f 	.word	0x0800276f
 80026dc:	0800276f 	.word	0x0800276f
 80026e0:	0800276f 	.word	0x0800276f
 80026e4:	0800276f 	.word	0x0800276f
 80026e8:	0800276f 	.word	0x0800276f
 80026ec:	0800276f 	.word	0x0800276f
 80026f0:	0800276f 	.word	0x0800276f
 80026f4:	0800276f 	.word	0x0800276f
 80026f8:	0800276f 	.word	0x0800276f
 80026fc:	0800276f 	.word	0x0800276f
 8002700:	0800276f 	.word	0x0800276f
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002731 	.word	0x08002731
 800270c:	4a79      	ldr	r2, [pc, #484]	; (80028f4 <HAL_GPIO_Init+0x2b4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002712:	e02c      	b.n	800276e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e029      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e024      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	3308      	adds	r3, #8
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e01f      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	330c      	adds	r3, #12
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e01a      	b.n	8002770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002742:	2304      	movs	r3, #4
 8002744:	623b      	str	r3, [r7, #32]
          break;
 8002746:	e013      	b.n	8002770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	611a      	str	r2, [r3, #16]
          break;
 800275a:	e009      	b.n	8002770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	615a      	str	r2, [r3, #20]
          break;
 8002766:	e003      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x130>
          break;
 800276e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2bff      	cmp	r3, #255	; 0xff
 8002774:	d801      	bhi.n	800277a <HAL_GPIO_Init+0x13a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	e001      	b.n	800277e <HAL_GPIO_Init+0x13e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2bff      	cmp	r3, #255	; 0xff
 8002784:	d802      	bhi.n	800278c <HAL_GPIO_Init+0x14c>
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	e002      	b.n	8002792 <HAL_GPIO_Init+0x152>
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3b08      	subs	r3, #8
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	210f      	movs	r1, #15
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80b1 	beq.w	8002922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c0:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2bc>)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_GPIO_Init+0x2c0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_GPIO_Init+0x1ec>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	; (8002904 <HAL_GPIO_Init+0x2c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1e8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3e      	ldr	r2, [pc, #248]	; (8002908 <HAL_GPIO_Init+0x2c8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3d      	ldr	r2, [pc, #244]	; (800290c <HAL_GPIO_Init+0x2cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1e0>
 800281c:	2303      	movs	r3, #3
 800281e:	e006      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002820:	2304      	movs	r3, #4
 8002822:	e004      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002824:	2302      	movs	r3, #2
 8002826:	e002      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 800282c:	2300      	movs	r3, #0
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	f002 0203 	and.w	r2, r2, #3
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	4093      	lsls	r3, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800283e:	492f      	ldr	r1, [pc, #188]	; (80028fc <HAL_GPIO_Init+0x2bc>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	492c      	ldr	r1, [pc, #176]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	43db      	mvns	r3, r3
 800286e:	4928      	ldr	r1, [pc, #160]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002870:	4013      	ands	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4922      	ldr	r1, [pc, #136]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	491e      	ldr	r1, [pc, #120]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4918      	ldr	r1, [pc, #96]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4914      	ldr	r1, [pc, #80]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d021      	beq.n	8002914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e021      	b.n	8002922 <HAL_GPIO_Init+0x2e2>
 80028de:	bf00      	nop
 80028e0:	10320000 	.word	0x10320000
 80028e4:	10310000 	.word	0x10310000
 80028e8:	10220000 	.word	0x10220000
 80028ec:	10210000 	.word	0x10210000
 80028f0:	10120000 	.word	0x10120000
 80028f4:	10110000 	.word	0x10110000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010800 	.word	0x40010800
 8002904:	40010c00 	.word	0x40010c00
 8002908:	40011000 	.word	0x40011000
 800290c:	40011400 	.word	0x40011400
 8002910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_GPIO_Init+0x304>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	43db      	mvns	r3, r3
 800291c:	4909      	ldr	r1, [pc, #36]	; (8002944 <HAL_GPIO_Init+0x304>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	3301      	adds	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f ae8e 	bne.w	8002654 <HAL_GPIO_Init+0x14>
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	372c      	adds	r7, #44	; 0x2c
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e272      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8087 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002998:	4b92      	ldr	r3, [pc, #584]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d00c      	beq.n	80029be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d112      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5e>
 80029b0:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d10b      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d06c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x12c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d168      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e24c      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x76>
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7f      	ldr	r2, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e02e      	b.n	8002a4c <HAL_RCC_OscConfig+0xd4>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x98>
 80029f6:	4b7b      	ldr	r3, [pc, #492]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e01d      	b.n	8002a4c <HAL_RCC_OscConfig+0xd4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0xbc>
 8002a1a:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a71      	ldr	r2, [pc, #452]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6e      	ldr	r2, [pc, #440]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0xd4>
 8002a34:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6a      	ldr	r2, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a67      	ldr	r2, [pc, #412]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff f82e 	bl	8001ab4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff f82a 	bl	8001ab4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e200      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0xe4>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f81a 	bl	8001ab4 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff f816 	bl	8001ab4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e1ec      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x10c>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d063      	beq.n	8002b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d11c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x18c>
 8002aca:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d116      	bne.n	8002b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x176>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e1c0      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4939      	ldr	r1, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	e03a      	b.n	8002b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0c:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe ffcf 	bl	8001ab4 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe ffcb 	bl	8001ab4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1a1      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4927      	ldr	r1, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe ffae 	bl	8001ab4 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe ffaa 	bl	8001ab4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e180      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d03a      	beq.n	8002bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d019      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_RCC_OscConfig+0x274>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe ff8e 	bl	8001ab4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe ff8a 	bl	8001ab4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e160      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f000 faba 	bl	8003134 <RCC_Delay>
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_RCC_OscConfig+0x274>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7fe ff74 	bl	8001ab4 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bce:	e00f      	b.n	8002bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe ff70 	bl	8001ab4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d908      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e146      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	42420000 	.word	0x42420000
 8002bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e9      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a6 	beq.w	8002d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b8b      	ldr	r3, [pc, #556]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	4b88      	ldr	r3, [pc, #544]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4a87      	ldr	r2, [pc, #540]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c24:	61d3      	str	r3, [r2, #28]
 8002c26:	4b85      	ldr	r3, [pc, #532]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b82      	ldr	r3, [pc, #520]	; (8002e40 <HAL_RCC_OscConfig+0x4c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c42:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x4c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7e      	ldr	r2, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x4c8>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff31 	bl	8001ab4 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c56:	f7fe ff2d 	bl	8001ab4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e103      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x4c8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x312>
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a6e      	ldr	r2, [pc, #440]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	e02d      	b.n	8002ce6 <HAL_RCC_OscConfig+0x36e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x334>
 8002c92:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a69      	ldr	r2, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a66      	ldr	r2, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	e01c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x36e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d10c      	bne.n	8002cce <HAL_RCC_OscConfig+0x356>
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a60      	ldr	r2, [pc, #384]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x36e>
 8002cce:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	4b58      	ldr	r3, [pc, #352]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7fe fee1 	bl	8001ab4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe fedd 	bl	8001ab4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e0b1      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ee      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x37e>
 8002d18:	e014      	b.n	8002d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fecb 	bl	8001ab4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fec7 	bl	8001ab4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e09b      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ee      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8087 	beq.w	8002e6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d061      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d146      	bne.n	8002e02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fe9b 	bl	8001ab4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe fe97 	bl	8001ab4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e06d      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4921      	ldr	r1, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dbc:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a19      	ldr	r1, [r3, #32]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	491b      	ldr	r1, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fe6b 	bl	8001ab4 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fe67 	bl	8001ab4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e03d      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x46a>
 8002e00:	e035      	b.n	8002e6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fe54 	bl	8001ab4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fe50 	bl	8001ab4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e026      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x498>
 8002e2e:	e01e      	b.n	8002e6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e019      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_OscConfig+0x500>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d0      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 0207 	bic.w	r2, r3, #7
 8002ea6:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e073      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fda2 	bl	8001ab4 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe fd9e 	bl	8001ab4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e053      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d210      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1cc>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fd00 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000
 8003040:	40021000 	.word	0x40021000
 8003044:	08004f28 	.word	0x08004f28
 8003048:	20000008 	.word	0x20000008
 800304c:	2000000c 	.word	0x2000000c

08003050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x30>
 800307a:	2b08      	cmp	r3, #8
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x36>
 800307e:	e027      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	e027      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	0c9b      	lsrs	r3, r3, #18
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d010      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0c5b      	lsrs	r3, r3, #17
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030b2:	fb03 f202 	mul.w	r2, r3, r2
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e004      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	613b      	str	r3, [r7, #16]
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	613b      	str	r3, [r7, #16]
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	693b      	ldr	r3, [r7, #16]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	007a1200 	.word	0x007a1200
 80030ec:	08004f40 	.word	0x08004f40
 80030f0:	08004f50 	.word	0x08004f50
 80030f4:	003d0900 	.word	0x003d0900

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b02      	ldr	r3, [pc, #8]	; (8003108 <HAL_RCC_GetHCLKFreq+0x10>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	20000008 	.word	0x20000008

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff fff2 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0adb      	lsrs	r3, r3, #11
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	08004f38 	.word	0x08004f38

08003134 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <RCC_Delay+0x34>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <RCC_Delay+0x38>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0a5b      	lsrs	r3, r3, #9
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003150:	bf00      	nop
  }
  while (Delay --);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f9      	bne.n	8003150 <RCC_Delay+0x1c>
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	20000008 	.word	0x20000008
 800316c:	10624dd3 	.word	0x10624dd3

08003170 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d07d      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	61d3      	str	r3, [r2, #28]
 80031a8:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b46      	ldr	r3, [pc, #280]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d118      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c4:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a42      	ldr	r2, [pc, #264]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d0:	f7fe fc70 	bl	8001ab4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fc6c 	bl	8001ab4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e06d      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02e      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d027      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800321e:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003224:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d014      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fe fc3b 	bl	8001ab4 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fc37 	bl	8001ab4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e036      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4917      	ldr	r1, [pc, #92]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	4313      	orrs	r3, r2
 8003274:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003286:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	490b      	ldr	r1, [pc, #44]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4904      	ldr	r1, [pc, #16]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42420440 	.word	0x42420440

080032dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b10      	cmp	r3, #16
 8003302:	f200 808a 	bhi.w	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d045      	beq.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d075      	beq.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003312:	e082      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003314:	4b46      	ldr	r3, [pc, #280]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800331a:	4b45      	ldr	r3, [pc, #276]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d07b      	beq.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	4a41      	ldr	r2, [pc, #260]	; (8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800333e:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0c5b      	lsrs	r3, r3, #17
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003358:	4a38      	ldr	r2, [pc, #224]	; (800343c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4a34      	ldr	r2, [pc, #208]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003380:	d102      	bne.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	61bb      	str	r3, [r7, #24]
      break;
 8003386:	e04a      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
      break;
 8003396:	e042      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d108      	bne.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80033b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e01f      	b.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c6:	d109      	bne.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80033d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e00f      	b.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d11c      	bne.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d016      	beq.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80033f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033f8:	61bb      	str	r3, [r7, #24]
      break;
 80033fa:	e012      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033fc:	e011      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033fe:	f7ff fe85 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0b9b      	lsrs	r3, r3, #14
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	61bb      	str	r3, [r7, #24]
      break;
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003422:	bf00      	nop
    }
  }
  return (frequency);
 8003424:	69bb      	ldr	r3, [r7, #24]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	08004f54 	.word	0x08004f54
 8003438:	08004f64 	.word	0x08004f64
 800343c:	007a1200 	.word	0x007a1200
 8003440:	003d0900 	.word	0x003d0900
 8003444:	aaaaaaab 	.word	0xaaaaaaab

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe f96a 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fc72 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03a      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0x98>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d009      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_Base_Start_IT+0x9c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_TIM_Base_Start_IT+0xa0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d010      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	e007      	b.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fbd0 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x24>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x3e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x58>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e05e      	b.n	800376c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x82>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fe4f 	bl	8004392 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d107      	bne.n	800370e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_TIM_PWM_Start+0x13c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_PWM_Start+0x140>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fab8 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 faab 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 faba 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0204 	mvn.w	r2, #4
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa8e 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa81 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa90 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa64 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa57 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa66 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa3a 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa2d 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa3c 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fcf4 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 feac 	bl	8004688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa00 	bl	8003d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0220 	mvn.w	r2, #32
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fe77 	bl	8004676 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0ae      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	f200 809f 	bhi.w	8003afc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003afd 	.word	0x08003afd
 80039cc:	08003afd 	.word	0x08003afd
 80039d0:	08003afd 	.word	0x08003afd
 80039d4:	08003a39 	.word	0x08003a39
 80039d8:	08003afd 	.word	0x08003afd
 80039dc:	08003afd 	.word	0x08003afd
 80039e0:	08003afd 	.word	0x08003afd
 80039e4:	08003a7b 	.word	0x08003a7b
 80039e8:	08003afd 	.word	0x08003afd
 80039ec:	08003afd 	.word	0x08003afd
 80039f0:	08003afd 	.word	0x08003afd
 80039f4:	08003abb 	.word	0x08003abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa18 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0208 	orr.w	r2, r2, #8
 8003a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0204 	bic.w	r2, r2, #4
 8003a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	619a      	str	r2, [r3, #24]
      break;
 8003a36:	e064      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa5e 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]
      break;
 8003a78:	e043      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 faa7 	bl	8003fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0208 	orr.w	r2, r2, #8
 8003a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0204 	bic.w	r2, r2, #4
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	61da      	str	r2, [r3, #28]
      break;
 8003ab8:	e023      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 faf1 	bl	80040a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69d9      	ldr	r1, [r3, #28]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	021a      	lsls	r2, r3, #8
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	61da      	str	r2, [r3, #28]
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_ConfigClockSource+0x1c>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0b4      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x186>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b68:	d03e      	beq.n	8003be8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	f200 8087 	bhi.w	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	f000 8086 	beq.w	8003c86 <HAL_TIM_ConfigClockSource+0x172>
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7e:	d87f      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b70      	cmp	r3, #112	; 0x70
 8003b82:	d01a      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0xa6>
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d87b      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b60      	cmp	r3, #96	; 0x60
 8003b8a:	d050      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x11a>
 8003b8c:	2b60      	cmp	r3, #96	; 0x60
 8003b8e:	d877      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b50      	cmp	r3, #80	; 0x50
 8003b92:	d03c      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xfa>
 8003b94:	2b50      	cmp	r3, #80	; 0x50
 8003b96:	d873      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d058      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x13a>
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d86f      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d064      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d86b      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d060      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d867      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d05c      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d05a      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	e062      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f000 fbc3 	bl	8004354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	609a      	str	r2, [r3, #8]
      break;
 8003be6:	e04f      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f000 fbac 	bl	8004354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c0a:	609a      	str	r2, [r3, #8]
      break;
 8003c0c:	e03c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 fb23 	bl	8004266 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2150      	movs	r1, #80	; 0x50
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb7a 	bl	8004320 <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e02c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 fb41 	bl	80042c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2160      	movs	r1, #96	; 0x60
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fb6a 	bl	8004320 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e01c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 fb03 	bl	8004266 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2140      	movs	r1, #64	; 0x40
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb5a 	bl	8004320 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e00c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f000 fb51 	bl	8004320 <TIM_ITRx_SetConfig>
      break;
 8003c7e:	e003      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e031      	b.n	8003d1e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fa39 	bl	8004144 <TIM_SlaveTimer_SetConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e018      	b.n	8003d1e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d0a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 0201 	bic.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 0210 	bic.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d113      	bne.n	8003fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00

08003fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10d      	bne.n	800404e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <TIM_OC4_SetConfig+0x98>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d109      	bne.n	800411c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00

08004144 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0307 	bic.w	r3, r3, #7
 8004172:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b70      	cmp	r3, #112	; 0x70
 800418c:	d01a      	beq.n	80041c4 <TIM_SlaveTimer_SetConfig+0x80>
 800418e:	2b70      	cmp	r3, #112	; 0x70
 8004190:	d860      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 8004192:	2b60      	cmp	r3, #96	; 0x60
 8004194:	d054      	beq.n	8004240 <TIM_SlaveTimer_SetConfig+0xfc>
 8004196:	2b60      	cmp	r3, #96	; 0x60
 8004198:	d85c      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 800419a:	2b50      	cmp	r3, #80	; 0x50
 800419c:	d046      	beq.n	800422c <TIM_SlaveTimer_SetConfig+0xe8>
 800419e:	2b50      	cmp	r3, #80	; 0x50
 80041a0:	d858      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d019      	beq.n	80041da <TIM_SlaveTimer_SetConfig+0x96>
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d854      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 80041aa:	2b30      	cmp	r3, #48	; 0x30
 80041ac:	d055      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x116>
 80041ae:	2b30      	cmp	r3, #48	; 0x30
 80041b0:	d850      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d051      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x116>
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d84c      	bhi.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d04d      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x116>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d04b      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x116>
 80041c2:	e047      	b.n	8004254 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68d9      	ldr	r1, [r3, #12]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f000 f8be 	bl	8004354 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80041d8:	e040      	b.n	800425c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d101      	bne.n	80041e6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e03b      	b.n	800425e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800420c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
      break;
 800422a:	e017      	b.n	800425c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	461a      	mov	r2, r3
 800423a:	f000 f814 	bl	8004266 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800423e:	e00d      	b.n	800425c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	461a      	mov	r2, r3
 800424e:	f000 f838 	bl	80042c2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004252:	e003      	b.n	800425c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
      break;
 8004258:	e000      	b.n	800425c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800425a:	bf00      	nop
  }

  return status;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f023 0201 	bic.w	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 030a 	bic.w	r3, r3, #10
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 0210 	bic.w	r2, r3, #16
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	f043 0307 	orr.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	021a      	lsls	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2201      	movs	r2, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	401a      	ands	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_TIMEx_PWMN_Start+0x24>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e022      	b.n	8004446 <HAL_TIMEx_PWMN_Start+0x6a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d109      	bne.n	800441a <HAL_TIMEx_PWMN_Start+0x3e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e015      	b.n	8004446 <HAL_TIMEx_PWMN_Start+0x6a>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d109      	bne.n	8004434 <HAL_TIMEx_PWMN_Start+0x58>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_TIMEx_PWMN_Start+0x6a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e059      	b.n	8004502 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIMEx_PWMN_Start+0x82>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800445c:	e013      	b.n	8004486 <HAL_TIMEx_PWMN_Start+0xaa>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIMEx_PWMN_Start+0x92>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800446c:	e00b      	b.n	8004486 <HAL_TIMEx_PWMN_Start+0xaa>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIMEx_PWMN_Start+0xa2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	e003      	b.n	8004486 <HAL_TIMEx_PWMN_Start+0xaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2204      	movs	r2, #4
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f903 	bl	800469a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_TIMEx_PWMN_Start+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_TIMEx_PWMN_Start+0xf0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d009      	beq.n	80044cc <HAL_TIMEx_PWMN_Start+0xf0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <HAL_TIMEx_PWMN_Start+0x134>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIMEx_PWMN_Start+0xf0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <HAL_TIMEx_PWMN_Start+0x138>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d010      	beq.n	8004500 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	e007      	b.n	8004500 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e046      	b.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00e      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d009      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10c      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800

080045d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e03d      	b.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800469a:	b480      	push	{r7}
 800469c:	b087      	sub	sp, #28
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2204      	movs	r2, #4
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	401a      	ands	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	431a      	orrs	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
	...

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2600      	movs	r6, #0
 80046e8:	4d0c      	ldr	r5, [pc, #48]	; (800471c <__libc_init_array+0x38>)
 80046ea:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	f000 f8ec 	bl	80048d0 <_init>
 80046f8:	2600      	movs	r6, #0
 80046fa:	4d0a      	ldr	r5, [pc, #40]	; (8004724 <__libc_init_array+0x40>)
 80046fc:	4c0a      	ldr	r4, [pc, #40]	; (8004728 <__libc_init_array+0x44>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f855 3b04 	ldr.w	r3, [r5], #4
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f855 3b04 	ldr.w	r3, [r5], #4
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	08004f68 	.word	0x08004f68
 8004720:	08004f68 	.word	0x08004f68
 8004724:	08004f68 	.word	0x08004f68
 8004728:	08004f6c 	.word	0x08004f6c

0800472c <memset>:
 800472c:	4603      	mov	r3, r0
 800472e:	4402      	add	r2, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>
 800473c:	0000      	movs	r0, r0
	...

08004740 <floor>:
 8004740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004744:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004748:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800474c:	2e13      	cmp	r6, #19
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4607      	mov	r7, r0
 8004754:	460c      	mov	r4, r1
 8004756:	4605      	mov	r5, r0
 8004758:	dc33      	bgt.n	80047c2 <floor+0x82>
 800475a:	2e00      	cmp	r6, #0
 800475c:	da14      	bge.n	8004788 <floor+0x48>
 800475e:	a334      	add	r3, pc, #208	; (adr r3, 8004830 <floor+0xf0>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f7fb fcfa 	bl	800015c <__adddf3>
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	f7fb ff2a 	bl	80005c4 <__aeabi_dcmpgt>
 8004770:	b138      	cbz	r0, 8004782 <floor+0x42>
 8004772:	2c00      	cmp	r4, #0
 8004774:	da58      	bge.n	8004828 <floor+0xe8>
 8004776:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800477a:	431d      	orrs	r5, r3
 800477c:	d001      	beq.n	8004782 <floor+0x42>
 800477e:	2500      	movs	r5, #0
 8004780:	4c2d      	ldr	r4, [pc, #180]	; (8004838 <floor+0xf8>)
 8004782:	4623      	mov	r3, r4
 8004784:	462f      	mov	r7, r5
 8004786:	e025      	b.n	80047d4 <floor+0x94>
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <floor+0xfc>)
 800478a:	fa42 f806 	asr.w	r8, r2, r6
 800478e:	ea01 0208 	and.w	r2, r1, r8
 8004792:	4302      	orrs	r2, r0
 8004794:	d01e      	beq.n	80047d4 <floor+0x94>
 8004796:	a326      	add	r3, pc, #152	; (adr r3, 8004830 <floor+0xf0>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f7fb fcde 	bl	800015c <__adddf3>
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f7fb ff0e 	bl	80005c4 <__aeabi_dcmpgt>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0ea      	beq.n	8004782 <floor+0x42>
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	bfbe      	ittt	lt
 80047b0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80047b4:	fa43 f606 	asrlt.w	r6, r3, r6
 80047b8:	19a4      	addlt	r4, r4, r6
 80047ba:	2500      	movs	r5, #0
 80047bc:	ea24 0408 	bic.w	r4, r4, r8
 80047c0:	e7df      	b.n	8004782 <floor+0x42>
 80047c2:	2e33      	cmp	r6, #51	; 0x33
 80047c4:	dd0a      	ble.n	80047dc <floor+0x9c>
 80047c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80047ca:	d103      	bne.n	80047d4 <floor+0x94>
 80047cc:	f7fb fcc6 	bl	800015c <__adddf3>
 80047d0:	4607      	mov	r7, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4638      	mov	r0, r7
 80047d6:	4619      	mov	r1, r3
 80047d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80047e4:	fa22 f808 	lsr.w	r8, r2, r8
 80047e8:	ea18 0f00 	tst.w	r8, r0
 80047ec:	d0f2      	beq.n	80047d4 <floor+0x94>
 80047ee:	a310      	add	r3, pc, #64	; (adr r3, 8004830 <floor+0xf0>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fb fcb2 	bl	800015c <__adddf3>
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f7fb fee2 	bl	80005c4 <__aeabi_dcmpgt>
 8004800:	2800      	cmp	r0, #0
 8004802:	d0be      	beq.n	8004782 <floor+0x42>
 8004804:	2c00      	cmp	r4, #0
 8004806:	da02      	bge.n	800480e <floor+0xce>
 8004808:	2e14      	cmp	r6, #20
 800480a:	d103      	bne.n	8004814 <floor+0xd4>
 800480c:	3401      	adds	r4, #1
 800480e:	ea25 0508 	bic.w	r5, r5, r8
 8004812:	e7b6      	b.n	8004782 <floor+0x42>
 8004814:	2301      	movs	r3, #1
 8004816:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800481a:	fa03 f606 	lsl.w	r6, r3, r6
 800481e:	4435      	add	r5, r6
 8004820:	42bd      	cmp	r5, r7
 8004822:	bf38      	it	cc
 8004824:	18e4      	addcc	r4, r4, r3
 8004826:	e7f2      	b.n	800480e <floor+0xce>
 8004828:	2500      	movs	r5, #0
 800482a:	462c      	mov	r4, r5
 800482c:	e7a9      	b.n	8004782 <floor+0x42>
 800482e:	bf00      	nop
 8004830:	8800759c 	.word	0x8800759c
 8004834:	7e37e43c 	.word	0x7e37e43c
 8004838:	bff00000 	.word	0xbff00000
 800483c:	000fffff 	.word	0x000fffff

08004840 <round>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004846:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800484a:	2c13      	cmp	r4, #19
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4606      	mov	r6, r0
 8004852:	460d      	mov	r5, r1
 8004854:	dc19      	bgt.n	800488a <round+0x4a>
 8004856:	2c00      	cmp	r4, #0
 8004858:	da09      	bge.n	800486e <round+0x2e>
 800485a:	3401      	adds	r4, #1
 800485c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004860:	d103      	bne.n	800486a <round+0x2a>
 8004862:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004866:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800486a:	2200      	movs	r2, #0
 800486c:	e02a      	b.n	80048c4 <round+0x84>
 800486e:	4917      	ldr	r1, [pc, #92]	; (80048cc <round+0x8c>)
 8004870:	4121      	asrs	r1, r4
 8004872:	ea03 0001 	and.w	r0, r3, r1
 8004876:	4302      	orrs	r2, r0
 8004878:	d010      	beq.n	800489c <round+0x5c>
 800487a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800487e:	fa42 f404 	asr.w	r4, r2, r4
 8004882:	4423      	add	r3, r4
 8004884:	ea23 0301 	bic.w	r3, r3, r1
 8004888:	e7ef      	b.n	800486a <round+0x2a>
 800488a:	2c33      	cmp	r4, #51	; 0x33
 800488c:	dd09      	ble.n	80048a2 <round+0x62>
 800488e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004892:	d103      	bne.n	800489c <round+0x5c>
 8004894:	f7fb fc62 	bl	800015c <__adddf3>
 8004898:	4606      	mov	r6, r0
 800489a:	460d      	mov	r5, r1
 800489c:	4630      	mov	r0, r6
 800489e:	4629      	mov	r1, r5
 80048a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a2:	f04f 31ff 	mov.w	r1, #4294967295
 80048a6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80048aa:	40f9      	lsrs	r1, r7
 80048ac:	4208      	tst	r0, r1
 80048ae:	d0f5      	beq.n	800489c <round+0x5c>
 80048b0:	2001      	movs	r0, #1
 80048b2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80048b6:	fa00 f404 	lsl.w	r4, r0, r4
 80048ba:	1912      	adds	r2, r2, r4
 80048bc:	bf28      	it	cs
 80048be:	181b      	addcs	r3, r3, r0
 80048c0:	ea22 0201 	bic.w	r2, r2, r1
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	e7e6      	b.n	8004898 <round+0x58>
 80048ca:	bf00      	nop
 80048cc:	000fffff 	.word	0x000fffff

080048d0 <_init>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr

080048dc <_fini>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr
