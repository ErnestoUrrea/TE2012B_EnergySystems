
stm32_SPWM_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080045b0  080045b0  000145b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080047b0  080047b0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b0  080047b0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080047b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027cc  20000018  080047d0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027e4  080047d0  000227e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085a9  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f6  00000000  00000000  000285ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea2  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009739  00000000  00000000  00041caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875a4  00000000  00000000  0004b3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  000d29d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004594 	.word	0x08004594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004594 	.word	0x08004594

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fcce 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f82c 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f98c 	bl	8000db4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a9c:	f000 f86e 	bl	8000b7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000aa0:	f000 f924 	bl	8000cec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  sineValuesGeneration();
 8000aa4:	f000 f9b4 	bl	8000e10 <sineValuesGeneration>

  HAL_TIM_Base_Start_IT(&htim2);
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <main+0x5c>)
 8000aaa:	f001 fc07 	bl	80022bc <HAL_TIM_Base_Start_IT>
  HAL_Delay(250);
 8000aae:	20fa      	movs	r0, #250	; 0xfa
 8000ab0:	f000 fd20 	bl	80014f4 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <main+0x60>)
 8000ab8:	f001 fcaa 	bl	8002410 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000abc:	2100      	movs	r1, #0
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <main+0x60>)
 8000ac0:	f002 fb76 	bl	80031b0 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <main+0x60>)
 8000ac8:	f001 fca2 	bl	8002410 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000acc:	2104      	movs	r1, #4
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <main+0x60>)
 8000ad0:	f002 fb6e 	bl	80031b0 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <main+0x60>)
 8000ad8:	f001 fc9a 	bl	8002410 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000adc:	2108      	movs	r1, #8
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <main+0x60>)
 8000ae0:	f002 fb66 	bl	80031b0 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <main+0x58>
 8000ae6:	bf00      	nop
 8000ae8:	2000007c 	.word	0x2000007c
 8000aec:	20000034 	.word	0x20000034

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b090      	sub	sp, #64	; 0x40
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	2228      	movs	r2, #40	; 0x28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fcfe 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 ff91 	bl	8001a60 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b44:	f000 fb1e 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f9fe 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b6e:	f000 fb09 	bl	8001184 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3740      	adds	r7, #64	; 0x40
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b096      	sub	sp, #88	; 0x58
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	615a      	str	r2, [r3, #20]
 8000bac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fca3 	bl	8003500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bba:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ce8 <MX_TIM1_Init+0x16c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc0:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bc6:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bc8:	2260      	movs	r2, #96	; 0x60
 8000bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 959;
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bce:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bda:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be6:	483f      	ldr	r0, [pc, #252]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000be8:	f001 fb18 	bl	800221c <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bf2:	f000 fac7 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c00:	4619      	mov	r1, r3
 8000c02:	4838      	ldr	r0, [pc, #224]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c04:	f001 fe70 	bl	80028e8 <HAL_TIM_ConfigClockSource>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c0e:	f000 fab9 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c12:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c14:	f001 fba4 	bl	8002360 <HAL_TIM_PWM_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c1e:	f000 fab1 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000c22:	2310      	movs	r3, #16
 8000c24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c32:	f002 fb5b 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c3c:	f000 faa2 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c40:	2360      	movs	r3, #96	; 0x60
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c66:	f001 fd7d 	bl	8002764 <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c70:	f000 fa88 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	2204      	movs	r2, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c7e:	f001 fd71 	bl	8002764 <HAL_TIM_PWM_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c88:	f000 fa7c 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000c96:	f001 fd65 	bl	8002764 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ca0:	f000 fa70 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 172;
 8000cb0:	23ac      	movs	r3, #172	; 0xac
 8000cb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000cc8:	f002 fb6e 	bl	80033a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000cd2:	f000 fa57 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000cd8:	f000 facc 	bl	8001274 <HAL_TIM_MspPostInit>

}
 8000cdc:	bf00      	nop
 8000cde:	3758      	adds	r7, #88	; 0x58
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000034 	.word	0x20000034
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d28:	2260      	movs	r2, #96	; 0x60
 8000d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 959;
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d2e:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d42:	f001 fa6b 	bl	800221c <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d4c:	f000 fa1a 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4814      	ldr	r0, [pc, #80]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d5e:	f001 fdc3 	bl	80028e8 <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d68:	f000 fa0c 	bl	8001184 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d7c:	f001 fe7b 	bl	8002a76 <HAL_TIM_SlaveConfigSynchro>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d86:	f000 f9fd 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM2_Init+0xc4>)
 8000d98:	f002 faa8 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000da2:	f000 f9ef 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000007c 	.word	0x2000007c

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0320 	and.w	r3, r3, #32
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <MX_GPIO_Init+0x58>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000

08000e10 <sineValuesGeneration>:
/* USER CODE BEGIN 4 */
/**
  * @brief  This function pre-generates the sine values for modulator signal.
  * @retval None
  */
void sineValuesGeneration(void){
 8000e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
	nValues = 2*floor(37500/freq);
 8000e18:	4b6d      	ldr	r3, [pc, #436]	; (8000fd0 <sineValuesGeneration+0x1c0>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f249 237c 	movw	r3, #37500	; 0x927c
 8000e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fae4 	bl	80003f4 <__aeabi_i2d>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	f7ff f994 	bl	800015c <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe06 	bl	8000a4c <__aeabi_d2uiz>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <sineValuesGeneration+0x1c4>)
 8000e46:	801a      	strh	r2, [r3, #0]
	phaseB = 1*floor(nValues/3.00) + phaseA;
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <sineValuesGeneration+0x1c4>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fad1 	bl	80003f4 <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <sineValuesGeneration+0x1c8>)
 8000e58:	f7ff fc60 	bl	800071c <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f002 fb54 	bl	8003510 <floor>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <sineValuesGeneration+0x1cc>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fabf 	bl	80003f4 <__aeabi_i2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff f96d 	bl	800015c <__adddf3>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fddf 	bl	8000a4c <__aeabi_d2uiz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <sineValuesGeneration+0x1d0>)
 8000e94:	801a      	strh	r2, [r3, #0]
	phaseC = 2*floor(nValues/3.00) + phaseA;
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <sineValuesGeneration+0x1c4>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff faaa 	bl	80003f4 <__aeabi_i2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <sineValuesGeneration+0x1c8>)
 8000ea6:	f7ff fc39 	bl	800071c <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f002 fb2d 	bl	8003510 <floor>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	f7ff f94f 	bl	800015c <__adddf3>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4614      	mov	r4, r2
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <sineValuesGeneration+0x1cc>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa92 	bl	80003f4 <__aeabi_i2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	f7ff f940 	bl	800015c <__adddf3>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fdb2 	bl	8000a4c <__aeabi_d2uiz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <sineValuesGeneration+0x1d4>)
 8000eee:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < (nValues/2); i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	e057      	b.n	8000fa6 <sineValuesGeneration+0x196>
		sinValues[i] = round(959.00*(0.5*m*sin(i*2*3.14159265358979323846/nValues)+0.5));
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <sineValuesGeneration+0x1d8>)
 8000ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <sineValuesGeneration+0x1dc>)
 8000f02:	f7ff fae1 	bl	80004c8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fa6e 	bl	80003f4 <__aeabi_i2d>
 8000f18:	a329      	add	r3, pc, #164	; (adr r3, 8000fc0 <sineValuesGeneration+0x1b0>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fad3 	bl	80004c8 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4690      	mov	r8, r2
 8000f28:	4699      	mov	r9, r3
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <sineValuesGeneration+0x1c4>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa60 	bl	80003f4 <__aeabi_i2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4640      	mov	r0, r8
 8000f3a:	4649      	mov	r1, r9
 8000f3c:	f7ff fbee 	bl	800071c <__aeabi_ddiv>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f002 fbaa 	bl	80036a0 <sin>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	f7ff fab8 	bl	80004c8 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <sineValuesGeneration+0x1dc>)
 8000f66:	f7ff f8f9 	bl	800015c <__adddf3>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	a315      	add	r3, pc, #84	; (adr r3, 8000fc8 <sineValuesGeneration+0x1b8>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff faa6 	bl	80004c8 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f002 fb44 	bl	8003610 <round>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	88fc      	ldrh	r4, [r7, #6]
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fd5b 	bl	8000a4c <__aeabi_d2uiz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <sineValuesGeneration+0x1e0>)
 8000f9c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint16_t i = 0; i < (nValues/2); i++){
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <sineValuesGeneration+0x1c4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3a0      	bcc.n	8000ef6 <sineValuesGeneration+0xe6>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fc0:	54442d18 	.word	0x54442d18
 8000fc4:	400921fb 	.word	0x400921fb
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	408df800 	.word	0x408df800
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	40080000 	.word	0x40080000
 8000fdc:	200027d8 	.word	0x200027d8
 8000fe0:	200027da 	.word	0x200027da
 8000fe4:	200027dc 	.word	0x200027dc
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	3fe00000 	.word	0x3fe00000
 8000ff0:	200000c8 	.word	0x200000c8

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

void changeFrequency(void){
	__nop();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if((counter + phaseA)%nValues < (nValues/2)){
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b5a      	ldr	r3, [pc, #360]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a59      	ldr	r2, [pc, #356]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001010:	fb01 f202 	mul.w	r2, r1, r2
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	4a56      	ldr	r2, [pc, #344]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	0852      	lsrs	r2, r2, #1
 800101c:	b292      	uxth	r2, r2
 800101e:	4293      	cmp	r3, r2
 8001020:	da0b      	bge.n	800103a <HAL_TIM_PeriodElapsedCallback+0x46>
		TIM1->CCR1 = sinValues[counter + phaseA];
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4413      	add	r3, r2
 800102e:	4a51      	ldr	r2, [pc, #324]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001030:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
 8001038:	e016      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x74>
	}
	else{
		TIM1->CCR1 = 959-sinValues[(counter + phaseA)%(nValues/2)];
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	4413      	add	r3, r2
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001048:	8812      	ldrh	r2, [r2, #0]
 800104a:	0852      	lsrs	r2, r2, #1
 800104c:	b292      	uxth	r2, r2
 800104e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001052:	fb01 f202 	mul.w	r2, r1, r2
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4a46      	ldr	r2, [pc, #280]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800105a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105e:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 8001062:	3303      	adds	r3, #3
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001066:	6353      	str	r3, [r2, #52]	; 0x34
	}
	if((counter + phaseB)%nValues < (nValues/2)){
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001076:	8812      	ldrh	r2, [r2, #0]
 8001078:	fb93 f1f2 	sdiv	r1, r3, r2
 800107c:	fb01 f202 	mul.w	r2, r1, r2
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	0852      	lsrs	r2, r2, #1
 8001088:	b292      	uxth	r2, r2
 800108a:	4293      	cmp	r3, r2
 800108c:	da0b      	bge.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0xb2>
		TIM1->CCR2 = sinValues[counter + phaseB];
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4413      	add	r3, r2
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800109c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
 80010a4:	e016      	b.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0xe0>
	}
	else{
		TIM1->CCR2 = 959-sinValues[(counter + phaseB)%(nValues/2)];
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	0852      	lsrs	r2, r2, #1
 80010b8:	b292      	uxth	r2, r2
 80010ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80010be:	fb01 f202 	mul.w	r2, r1, r2
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ca:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 80010ce:	3303      	adds	r3, #3
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if((counter + phaseC)%nValues < (nValues/2)){
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80010e8:	fb01 f202 	mul.w	r2, r1, r2
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	4a20      	ldr	r2, [pc, #128]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010f0:	8812      	ldrh	r2, [r2, #0]
 80010f2:	0852      	lsrs	r2, r2, #1
 80010f4:	b292      	uxth	r2, r2
 80010f6:	4293      	cmp	r3, r2
 80010f8:	da0b      	bge.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x11e>
		TIM1->CCR3 = sinValues[counter + phaseC];
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001108:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001110:	e016      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x14c>
	}
	else{
		TIM1->CCR3 = 959-sinValues[(counter + phaseC)%(nValues/2)];
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001120:	8812      	ldrh	r2, [r2, #0]
 8001122:	0852      	lsrs	r2, r2, #1
 8001124:	b292      	uxth	r2, r2
 8001126:	fb93 f1f2 	sdiv	r1, r3, r2
 800112a:	fb01 f202 	mul.w	r2, r1, r2
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001136:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 800113a:	3303      	adds	r3, #3
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800113e:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	counter++;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800114a:	801a      	strh	r2, [r3, #0]
	if(counter > nValues) counter = 0;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d902      	bls.n	800115e <HAL_TIM_PeriodElapsedCallback+0x16a>
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	200000c6 	.word	0x200000c6
 800116c:	200027d8 	.word	0x200027d8
 8001170:	200000c4 	.word	0x200000c4
 8001174:	200000c8 	.word	0x200000c8
 8001178:	40012c00 	.word	0x40012c00
 800117c:	200027da 	.word	0x200027da
 8001180:	200027dc 	.word	0x200027dc

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_MspInit+0x40>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_MspInit+0x40>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_MspInit+0x40>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_MspInit+0x40>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_MspInit+0x40>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_MspInit+0x40>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_TIM_Base_MspInit+0x98>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d124      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a21      	ldr	r2, [pc, #132]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 80011ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2019      	movs	r0, #25
 8001204:	f000 fa71 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001208:	2019      	movs	r0, #25
 800120a:	f000 fa8a 	bl	8001722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	201a      	movs	r0, #26
 8001214:	f000 fa69 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001218:	201a      	movs	r0, #26
 800121a:	f000 fa82 	bl	8001722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201b      	movs	r0, #27
 8001224:	f000 fa61 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001228:	201b      	movs	r0, #27
 800122a:	f000 fa7a 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122e:	e018      	b.n	8001262 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_Base_MspInit+0x9c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fa47 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fa60 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_TIM_MspPostInit+0xb0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d142      	bne.n	800131a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_TIM_MspPostInit+0xb4>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80012c4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <HAL_TIM_MspPostInit+0xb8>)
 80012da:	f000 fa3d 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012de:	2303      	movs	r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_TIM_MspPostInit+0xbc>)
 80012f2:	f000 fa31 	bl	8001758 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_TIM_MspPostInit+0xc0>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_TIM_MspPostInit+0xc0>)
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800
 8001330:	40010c00 	.word	0x40010c00
 8001334:	40010000 	.word	0x40010000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 f89d 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM1_UP_IRQHandler+0x10>)
 800138e:	f001 f8e1 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000034 	.word	0x20000034

0800139c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <TIM1_TRG_COM_IRQHandler+0x10>)
 80013a2:	f001 f8d7 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000034 	.word	0x20000034

080013b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_CC_IRQHandler+0x10>)
 80013b6:	f001 f8cd 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000034 	.word	0x20000034

080013c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM2_IRQHandler+0x10>)
 80013ca:	f001 f8c3 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000007c 	.word	0x2000007c

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff fff8 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ea:	490c      	ldr	r1, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001400:	4c09      	ldr	r4, [pc, #36]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f002 f853 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fb3b 	bl	8000a8c <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001420:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8001424:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001428:	200027e4 	.word	0x200027e4

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f947 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fea0 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f95f 	bl	800173e <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f927 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	20000014 	.word	0x20000014
 80014b8:	20000010 	.word	0x20000010

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000014 	.word	0x20000014
 80014dc:	200027e0 	.word	0x200027e0

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	200027e0 	.word	0x200027e0

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffe0 	bl	80014e0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000014 	.word	0x20000014

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b08b      	sub	sp, #44	; 0x2c
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e169      	b.n	8001a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800176c:	2201      	movs	r2, #1
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8158 	bne.w	8001a3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a9a      	ldr	r2, [pc, #616]	; (80019f8 <HAL_GPIO_Init+0x2a0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 8001794:	4a98      	ldr	r2, [pc, #608]	; (80019f8 <HAL_GPIO_Init+0x2a0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d875      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 800179a:	4a98      	ldr	r2, [pc, #608]	; (80019fc <HAL_GPIO_Init+0x2a4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d058      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017a0:	4a96      	ldr	r2, [pc, #600]	; (80019fc <HAL_GPIO_Init+0x2a4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d86f      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017a6:	4a96      	ldr	r2, [pc, #600]	; (8001a00 <HAL_GPIO_Init+0x2a8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d052      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017ac:	4a94      	ldr	r2, [pc, #592]	; (8001a00 <HAL_GPIO_Init+0x2a8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d869      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017b2:	4a94      	ldr	r2, [pc, #592]	; (8001a04 <HAL_GPIO_Init+0x2ac>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04c      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017b8:	4a92      	ldr	r2, [pc, #584]	; (8001a04 <HAL_GPIO_Init+0x2ac>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d863      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017be:	4a92      	ldr	r2, [pc, #584]	; (8001a08 <HAL_GPIO_Init+0x2b0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d046      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017c4:	4a90      	ldr	r2, [pc, #576]	; (8001a08 <HAL_GPIO_Init+0x2b0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d85d      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d82a      	bhi.n	8001824 <HAL_GPIO_Init+0xcc>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d859      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_GPIO_Init+0x80>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	08001853 	.word	0x08001853
 80017dc:	0800182d 	.word	0x0800182d
 80017e0:	0800183f 	.word	0x0800183f
 80017e4:	08001881 	.word	0x08001881
 80017e8:	08001887 	.word	0x08001887
 80017ec:	08001887 	.word	0x08001887
 80017f0:	08001887 	.word	0x08001887
 80017f4:	08001887 	.word	0x08001887
 80017f8:	08001887 	.word	0x08001887
 80017fc:	08001887 	.word	0x08001887
 8001800:	08001887 	.word	0x08001887
 8001804:	08001887 	.word	0x08001887
 8001808:	08001887 	.word	0x08001887
 800180c:	08001887 	.word	0x08001887
 8001810:	08001887 	.word	0x08001887
 8001814:	08001887 	.word	0x08001887
 8001818:	08001887 	.word	0x08001887
 800181c:	08001835 	.word	0x08001835
 8001820:	08001849 	.word	0x08001849
 8001824:	4a79      	ldr	r2, [pc, #484]	; (8001a0c <HAL_GPIO_Init+0x2b4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182a:	e02c      	b.n	8001886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e029      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	3304      	adds	r3, #4
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e024      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	3308      	adds	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e01f      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	330c      	adds	r3, #12
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e01a      	b.n	8001888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185a:	2304      	movs	r3, #4
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e013      	b.n	8001888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001868:	2308      	movs	r3, #8
 800186a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	611a      	str	r2, [r3, #16]
          break;
 8001872:	e009      	b.n	8001888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	615a      	str	r2, [r3, #20]
          break;
 800187e:	e003      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x130>
          break;
 8001886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2bff      	cmp	r3, #255	; 0xff
 800188c:	d801      	bhi.n	8001892 <HAL_GPIO_Init+0x13a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	e001      	b.n	8001896 <HAL_GPIO_Init+0x13e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d802      	bhi.n	80018a4 <HAL_GPIO_Init+0x14c>
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_Init+0x152>
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	3b08      	subs	r3, #8
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	210f      	movs	r1, #15
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80b1 	beq.w	8001a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <HAL_GPIO_Init+0x2b8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x2b8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_GPIO_Init+0x2b8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f0:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2bc>)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d013      	beq.n	8001944 <HAL_GPIO_Init+0x1ec>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3f      	ldr	r2, [pc, #252]	; (8001a1c <HAL_GPIO_Init+0x2c4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00d      	beq.n	8001940 <HAL_GPIO_Init+0x1e8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3e      	ldr	r2, [pc, #248]	; (8001a20 <HAL_GPIO_Init+0x2c8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_GPIO_Init+0x1e4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3d      	ldr	r2, [pc, #244]	; (8001a24 <HAL_GPIO_Init+0x2cc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_Init+0x1e0>
 8001934:	2303      	movs	r3, #3
 8001936:	e006      	b.n	8001946 <HAL_GPIO_Init+0x1ee>
 8001938:	2304      	movs	r3, #4
 800193a:	e004      	b.n	8001946 <HAL_GPIO_Init+0x1ee>
 800193c:	2302      	movs	r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x1ee>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_GPIO_Init+0x1ee>
 8001944:	2300      	movs	r3, #0
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	f002 0203 	and.w	r2, r2, #3
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001956:	492f      	ldr	r1, [pc, #188]	; (8001a14 <HAL_GPIO_Init+0x2bc>)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	492c      	ldr	r1, [pc, #176]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4928      	ldr	r1, [pc, #160]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4922      	ldr	r1, [pc, #136]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	491e      	ldr	r1, [pc, #120]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4918      	ldr	r1, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4914      	ldr	r1, [pc, #80]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d021      	beq.n	8001a2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e021      	b.n	8001a3a <HAL_GPIO_Init+0x2e2>
 80019f6:	bf00      	nop
 80019f8:	10320000 	.word	0x10320000
 80019fc:	10310000 	.word	0x10310000
 8001a00:	10220000 	.word	0x10220000
 8001a04:	10210000 	.word	0x10210000
 8001a08:	10120000 	.word	0x10120000
 8001a0c:	10110000 	.word	0x10110000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	40011000 	.word	0x40011000
 8001a24:	40011400 	.word	0x40011400
 8001a28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_GPIO_Init+0x304>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4909      	ldr	r1, [pc, #36]	; (8001a5c <HAL_GPIO_Init+0x304>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f ae8e 	bne.w	800176c <HAL_GPIO_Init+0x14>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	372c      	adds	r7, #44	; 0x2c
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e272      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
 8001a98:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x12c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e24c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x76>
 8001ac8:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xbc>
 8001b02:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fcd0 	bl	80014e0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fccc 	bl	80014e0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e200      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe4>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcbc 	bl	80014e0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcb8 	bl	80014e0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1ec      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x10c>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
 8001bb2:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4939      	ldr	r1, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fc71 	bl	80014e0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fc6d 	bl	80014e0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4927      	ldr	r1, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc50 	bl	80014e0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc4c 	bl	80014e0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e180      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc30 	bl	80014e0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc2c 	bl	80014e0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e160      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 fa9c 	bl	80021e0 <RCC_Delay>
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc16 	bl	80014e0 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc12 	bl	80014e0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e146      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	42420000 	.word	0x42420000
 8001cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e9      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a6 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fbd3 	bl	80014e0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fbcf 	bl	80014e0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e103      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x312>
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e02d      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x356>
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb83 	bl	80014e0 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb7f 	bl	80014e0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0b1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x37e>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb6d 	bl	80014e0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb69 	bl	80014e0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e09b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d061      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d146      	bne.n	8001eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb3d 	bl	80014e0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fb39 	bl	80014e0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e06d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4921      	ldr	r1, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a19      	ldr	r1, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb0d 	bl	80014e0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff fb09 	bl	80014e0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x46a>
 8001ee8:	e035      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff faf6 	bl	80014e0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff faf2 	bl	80014e0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e026      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x498>
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e019      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x500>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7ff fa44 	bl	80014e0 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fa40 	bl	80014e0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9a2 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	080045b0 	.word	0x080045b0
 8002130:	2000000c 	.word	0x2000000c
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x30>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x36>
 8002166:	e027      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800216a:	613b      	str	r3, [r7, #16]
      break;
 800216c:	e027      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0c5b      	lsrs	r3, r3, #17
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	fb03 f202 	mul.w	r2, r3, r2
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e004      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	613b      	str	r3, [r7, #16]
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	693b      	ldr	r3, [r7, #16]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	080045c0 	.word	0x080045c0
 80021d8:	080045d0 	.word	0x080045d0
 80021dc:	003d0900 	.word	0x003d0900

080021e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <RCC_Delay+0x34>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <RCC_Delay+0x38>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0a5b      	lsrs	r3, r3, #9
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021fc:	bf00      	nop
  }
  while (Delay --);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	60fa      	str	r2, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <RCC_Delay+0x1c>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	2000000c 	.word	0x2000000c
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e041      	b.n	80022b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe ffc6 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 fc72 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d001      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e03a      	b.n	800234a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_TIM_Base_Start_IT+0x98>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d009      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_TIM_Base_Start_IT+0x9c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x58>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_TIM_Base_Start_IT+0xa0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d010      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	e007      	b.n	8002348 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800

08002360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e041      	b.n	80023f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f839 	bl	80023fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f000 fbd0 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_TIM_PWM_Start+0x24>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e022      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d109      	bne.n	800244e <HAL_TIM_PWM_Start+0x3e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e015      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d109      	bne.n	8002468 <HAL_TIM_PWM_Start+0x58>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e008      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e05e      	b.n	8002540 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0x82>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002490:	e013      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x92>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a0:	e00b      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_PWM_Start+0xa2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b0:	e003      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fe4f 	bl	8003166 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_TIM_PWM_Start+0x138>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_TIM_PWM_Start+0x138>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_TIM_PWM_Start+0xfa>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d009      	beq.n	800250a <HAL_TIM_PWM_Start+0xfa>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_TIM_PWM_Start+0x13c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_TIM_PWM_Start+0xfa>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_TIM_PWM_Start+0x140>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d111      	bne.n	800252e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d010      	beq.n	800253e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	e007      	b.n	800253e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fab8 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 faab 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 faba 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0204 	mvn.w	r2, #4
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa8e 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa81 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa90 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b08      	cmp	r3, #8
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b08      	cmp	r3, #8
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0208 	mvn.w	r2, #8
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa64 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa57 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa66 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0210 	mvn.w	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2208      	movs	r2, #8
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa3a 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa2d 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fa3c 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0201 	mvn.w	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fc8e 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 feac 	bl	800345c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa00 	bl	8002b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b20      	cmp	r3, #32
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b20      	cmp	r3, #32
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0220 	mvn.w	r2, #32
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fe77 	bl	800344a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800277e:	2302      	movs	r3, #2
 8002780:	e0ae      	b.n	80028e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	f200 809f 	bhi.w	80028d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027cd 	.word	0x080027cd
 800279c:	080028d1 	.word	0x080028d1
 80027a0:	080028d1 	.word	0x080028d1
 80027a4:	080028d1 	.word	0x080028d1
 80027a8:	0800280d 	.word	0x0800280d
 80027ac:	080028d1 	.word	0x080028d1
 80027b0:	080028d1 	.word	0x080028d1
 80027b4:	080028d1 	.word	0x080028d1
 80027b8:	0800284f 	.word	0x0800284f
 80027bc:	080028d1 	.word	0x080028d1
 80027c0:	080028d1 	.word	0x080028d1
 80027c4:	080028d1 	.word	0x080028d1
 80027c8:	0800288f 	.word	0x0800288f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fa18 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0208 	orr.w	r2, r2, #8
 80027e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6999      	ldr	r1, [r3, #24]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	619a      	str	r2, [r3, #24]
      break;
 800280a:	e064      	b.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fa5e 	bl	8002cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6999      	ldr	r1, [r3, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	021a      	lsls	r2, r3, #8
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	619a      	str	r2, [r3, #24]
      break;
 800284c:	e043      	b.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 faa7 	bl	8002da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0208 	orr.w	r2, r2, #8
 8002868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0204 	bic.w	r2, r2, #4
 8002878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69d9      	ldr	r1, [r3, #28]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
      break;
 800288c:	e023      	b.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 faf1 	bl	8002e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	61da      	str	r2, [r3, #28]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
      break;
 80028d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_TIM_ConfigClockSource+0x1c>
 8002900:	2302      	movs	r3, #2
 8002902:	e0b4      	b.n	8002a6e <HAL_TIM_ConfigClockSource+0x186>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293c:	d03e      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0xd4>
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002942:	f200 8087 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294a:	f000 8086 	beq.w	8002a5a <HAL_TIM_ConfigClockSource+0x172>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	d87f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b70      	cmp	r3, #112	; 0x70
 8002956:	d01a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xa6>
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d87b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b60      	cmp	r3, #96	; 0x60
 800295e:	d050      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x11a>
 8002960:	2b60      	cmp	r3, #96	; 0x60
 8002962:	d877      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b50      	cmp	r3, #80	; 0x50
 8002966:	d03c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002968:	2b50      	cmp	r3, #80	; 0x50
 800296a:	d873      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d058      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x13a>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d86f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b30      	cmp	r3, #48	; 0x30
 8002976:	d064      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d86b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d060      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d867      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002988:	2b10      	cmp	r3, #16
 800298a:	d05a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	e062      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f000 fbc3 	bl	8003128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
      break;
 80029ba:	e04f      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f000 fbac 	bl	8003128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e03c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f000 fb23 	bl	800303a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2150      	movs	r1, #80	; 0x50
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fb7a 	bl	80030f4 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e02c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 fb41 	bl	8003096 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2160      	movs	r1, #96	; 0x60
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fb6a 	bl	80030f4 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e01c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 fb03 	bl	800303a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fb5a 	bl	80030f4 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e00c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 fb51 	bl	80030f4 <TIM_ITRx_SetConfig>
      break;
 8002a52:	e003      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e000      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_SlaveConfigSynchro+0x18>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e031      	b.n	8002af2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa39 	bl	8002f18 <TIM_SlaveTimer_SetConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e018      	b.n	8002af2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ade:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <TIM_Base_SetConfig+0xbc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <TIM_Base_SetConfig+0xc0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <TIM_Base_SetConfig+0xbc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <TIM_Base_SetConfig+0xc0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0201 	bic.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0308 	bic.w	r3, r3, #8
 8002c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00

08002cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 0210 	bic.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0320 	bic.w	r3, r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <TIM_OC2_SetConfig+0xd0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <TIM_OC2_SetConfig+0xd0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d113      	bne.n	8002d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00

08002da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <TIM_OC3_SetConfig+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <TIM_OC3_SetConfig+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d113      	bne.n	8002e52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	621a      	str	r2, [r3, #32]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00

08002e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	031b      	lsls	r3, r3, #12
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <TIM_OC4_SetConfig+0x98>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00

08002f18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f023 0307 	bic.w	r3, r3, #7
 8002f46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b70      	cmp	r3, #112	; 0x70
 8002f60:	d01a      	beq.n	8002f98 <TIM_SlaveTimer_SetConfig+0x80>
 8002f62:	2b70      	cmp	r3, #112	; 0x70
 8002f64:	d860      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f66:	2b60      	cmp	r3, #96	; 0x60
 8002f68:	d054      	beq.n	8003014 <TIM_SlaveTimer_SetConfig+0xfc>
 8002f6a:	2b60      	cmp	r3, #96	; 0x60
 8002f6c:	d85c      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f6e:	2b50      	cmp	r3, #80	; 0x50
 8002f70:	d046      	beq.n	8003000 <TIM_SlaveTimer_SetConfig+0xe8>
 8002f72:	2b50      	cmp	r3, #80	; 0x50
 8002f74:	d858      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d019      	beq.n	8002fae <TIM_SlaveTimer_SetConfig+0x96>
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d854      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f7e:	2b30      	cmp	r3, #48	; 0x30
 8002f80:	d055      	beq.n	800302e <TIM_SlaveTimer_SetConfig+0x116>
 8002f82:	2b30      	cmp	r3, #48	; 0x30
 8002f84:	d850      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d051      	beq.n	800302e <TIM_SlaveTimer_SetConfig+0x116>
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d84c      	bhi.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04d      	beq.n	800302e <TIM_SlaveTimer_SetConfig+0x116>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d04b      	beq.n	800302e <TIM_SlaveTimer_SetConfig+0x116>
 8002f96:	e047      	b.n	8003028 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68d9      	ldr	r1, [r3, #12]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f000 f8be 	bl	8003128 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002fac:	e040      	b.n	8003030 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d101      	bne.n	8002fba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03b      	b.n	8003032 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
      break;
 8002ffe:	e017      	b.n	8003030 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	461a      	mov	r2, r3
 800300e:	f000 f814 	bl	800303a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003012:	e00d      	b.n	8003030 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	461a      	mov	r2, r3
 8003022:	f000 f838 	bl	8003096 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003026:	e003      	b.n	8003030 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e000      	b.n	8003030 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800302e:	bf00      	nop
  }

  return status;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 0201 	bic.w	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 030a 	bic.w	r3, r3, #10
 8003076:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 0210 	bic.w	r2, r3, #16
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	031b      	lsls	r3, r3, #12
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	f043 0307 	orr.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	431a      	orrs	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2201      	movs	r2, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	621a      	str	r2, [r3, #32]
}
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_TIMEx_PWMN_Start+0x24>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e022      	b.n	800321a <HAL_TIMEx_PWMN_Start+0x6a>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d109      	bne.n	80031ee <HAL_TIMEx_PWMN_Start+0x3e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e015      	b.n	800321a <HAL_TIMEx_PWMN_Start+0x6a>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d109      	bne.n	8003208 <HAL_TIMEx_PWMN_Start+0x58>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <HAL_TIMEx_PWMN_Start+0x6a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e059      	b.n	80032d6 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_TIMEx_PWMN_Start+0x82>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003230:	e013      	b.n	800325a <HAL_TIMEx_PWMN_Start+0xaa>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d104      	bne.n	8003242 <HAL_TIMEx_PWMN_Start+0x92>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003240:	e00b      	b.n	800325a <HAL_TIMEx_PWMN_Start+0xaa>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d104      	bne.n	8003252 <HAL_TIMEx_PWMN_Start+0xa2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003250:	e003      	b.n	800325a <HAL_TIMEx_PWMN_Start+0xaa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f903 	bl	800346e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIMEx_PWMN_Start+0x130>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d009      	beq.n	80032a0 <HAL_TIMEx_PWMN_Start+0xf0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIMEx_PWMN_Start+0x134>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <HAL_TIMEx_PWMN_Start+0x138>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e046      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e03d      	b.n	8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800346e:	b480      	push	{r7}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2204      	movs	r2, #4
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	43db      	mvns	r3, r3
 8003490:	401a      	ands	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2600      	movs	r6, #0
 80034bc:	4d0c      	ldr	r5, [pc, #48]	; (80034f0 <__libc_init_array+0x38>)
 80034be:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	f001 f864 	bl	8004594 <_init>
 80034cc:	2600      	movs	r6, #0
 80034ce:	4d0a      	ldr	r5, [pc, #40]	; (80034f8 <__libc_init_array+0x40>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	; (80034fc <__libc_init_array+0x44>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	080047b0 	.word	0x080047b0
 80034f4:	080047b0 	.word	0x080047b0
 80034f8:	080047b0 	.word	0x080047b0
 80034fc:	080047b4 	.word	0x080047b4

08003500 <memset>:
 8003500:	4603      	mov	r3, r0
 8003502:	4402      	add	r2, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <floor>:
 8003510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003514:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003518:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800351c:	2e13      	cmp	r6, #19
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4607      	mov	r7, r0
 8003524:	460c      	mov	r4, r1
 8003526:	4605      	mov	r5, r0
 8003528:	dc33      	bgt.n	8003592 <floor+0x82>
 800352a:	2e00      	cmp	r6, #0
 800352c:	da14      	bge.n	8003558 <floor+0x48>
 800352e:	a334      	add	r3, pc, #208	; (adr r3, 8003600 <floor+0xf0>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fc fe12 	bl	800015c <__adddf3>
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	f7fd fa54 	bl	80009e8 <__aeabi_dcmpgt>
 8003540:	b138      	cbz	r0, 8003552 <floor+0x42>
 8003542:	2c00      	cmp	r4, #0
 8003544:	da58      	bge.n	80035f8 <floor+0xe8>
 8003546:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800354a:	431d      	orrs	r5, r3
 800354c:	d001      	beq.n	8003552 <floor+0x42>
 800354e:	2500      	movs	r5, #0
 8003550:	4c2d      	ldr	r4, [pc, #180]	; (8003608 <floor+0xf8>)
 8003552:	4623      	mov	r3, r4
 8003554:	462f      	mov	r7, r5
 8003556:	e025      	b.n	80035a4 <floor+0x94>
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <floor+0xfc>)
 800355a:	fa42 f806 	asr.w	r8, r2, r6
 800355e:	ea01 0208 	and.w	r2, r1, r8
 8003562:	4302      	orrs	r2, r0
 8003564:	d01e      	beq.n	80035a4 <floor+0x94>
 8003566:	a326      	add	r3, pc, #152	; (adr r3, 8003600 <floor+0xf0>)
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f7fc fdf6 	bl	800015c <__adddf3>
 8003570:	2200      	movs	r2, #0
 8003572:	2300      	movs	r3, #0
 8003574:	f7fd fa38 	bl	80009e8 <__aeabi_dcmpgt>
 8003578:	2800      	cmp	r0, #0
 800357a:	d0ea      	beq.n	8003552 <floor+0x42>
 800357c:	2c00      	cmp	r4, #0
 800357e:	bfbe      	ittt	lt
 8003580:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003584:	fa43 f606 	asrlt.w	r6, r3, r6
 8003588:	19a4      	addlt	r4, r4, r6
 800358a:	2500      	movs	r5, #0
 800358c:	ea24 0408 	bic.w	r4, r4, r8
 8003590:	e7df      	b.n	8003552 <floor+0x42>
 8003592:	2e33      	cmp	r6, #51	; 0x33
 8003594:	dd0a      	ble.n	80035ac <floor+0x9c>
 8003596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800359a:	d103      	bne.n	80035a4 <floor+0x94>
 800359c:	f7fc fdde 	bl	800015c <__adddf3>
 80035a0:	4607      	mov	r7, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4638      	mov	r0, r7
 80035a6:	4619      	mov	r1, r3
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80035b4:	fa22 f808 	lsr.w	r8, r2, r8
 80035b8:	ea18 0f00 	tst.w	r8, r0
 80035bc:	d0f2      	beq.n	80035a4 <floor+0x94>
 80035be:	a310      	add	r3, pc, #64	; (adr r3, 8003600 <floor+0xf0>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc fdca 	bl	800015c <__adddf3>
 80035c8:	2200      	movs	r2, #0
 80035ca:	2300      	movs	r3, #0
 80035cc:	f7fd fa0c 	bl	80009e8 <__aeabi_dcmpgt>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d0be      	beq.n	8003552 <floor+0x42>
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	da02      	bge.n	80035de <floor+0xce>
 80035d8:	2e14      	cmp	r6, #20
 80035da:	d103      	bne.n	80035e4 <floor+0xd4>
 80035dc:	3401      	adds	r4, #1
 80035de:	ea25 0508 	bic.w	r5, r5, r8
 80035e2:	e7b6      	b.n	8003552 <floor+0x42>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80035ea:	fa03 f606 	lsl.w	r6, r3, r6
 80035ee:	4435      	add	r5, r6
 80035f0:	42bd      	cmp	r5, r7
 80035f2:	bf38      	it	cc
 80035f4:	18e4      	addcc	r4, r4, r3
 80035f6:	e7f2      	b.n	80035de <floor+0xce>
 80035f8:	2500      	movs	r5, #0
 80035fa:	462c      	mov	r4, r5
 80035fc:	e7a9      	b.n	8003552 <floor+0x42>
 80035fe:	bf00      	nop
 8003600:	8800759c 	.word	0x8800759c
 8003604:	7e37e43c 	.word	0x7e37e43c
 8003608:	bff00000 	.word	0xbff00000
 800360c:	000fffff 	.word	0x000fffff

08003610 <round>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003616:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800361a:	2c13      	cmp	r4, #19
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4606      	mov	r6, r0
 8003622:	460d      	mov	r5, r1
 8003624:	dc19      	bgt.n	800365a <round+0x4a>
 8003626:	2c00      	cmp	r4, #0
 8003628:	da09      	bge.n	800363e <round+0x2e>
 800362a:	3401      	adds	r4, #1
 800362c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003630:	d103      	bne.n	800363a <round+0x2a>
 8003632:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003636:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800363a:	2200      	movs	r2, #0
 800363c:	e02a      	b.n	8003694 <round+0x84>
 800363e:	4917      	ldr	r1, [pc, #92]	; (800369c <round+0x8c>)
 8003640:	4121      	asrs	r1, r4
 8003642:	ea03 0001 	and.w	r0, r3, r1
 8003646:	4302      	orrs	r2, r0
 8003648:	d010      	beq.n	800366c <round+0x5c>
 800364a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800364e:	fa42 f404 	asr.w	r4, r2, r4
 8003652:	4423      	add	r3, r4
 8003654:	ea23 0301 	bic.w	r3, r3, r1
 8003658:	e7ef      	b.n	800363a <round+0x2a>
 800365a:	2c33      	cmp	r4, #51	; 0x33
 800365c:	dd09      	ble.n	8003672 <round+0x62>
 800365e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003662:	d103      	bne.n	800366c <round+0x5c>
 8003664:	f7fc fd7a 	bl	800015c <__adddf3>
 8003668:	4606      	mov	r6, r0
 800366a:	460d      	mov	r5, r1
 800366c:	4630      	mov	r0, r6
 800366e:	4629      	mov	r1, r5
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003672:	f04f 31ff 	mov.w	r1, #4294967295
 8003676:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800367a:	40f9      	lsrs	r1, r7
 800367c:	4208      	tst	r0, r1
 800367e:	d0f5      	beq.n	800366c <round+0x5c>
 8003680:	2001      	movs	r0, #1
 8003682:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003686:	fa00 f404 	lsl.w	r4, r0, r4
 800368a:	1912      	adds	r2, r2, r4
 800368c:	bf28      	it	cs
 800368e:	181b      	addcs	r3, r3, r0
 8003690:	ea22 0201 	bic.w	r2, r2, r1
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	e7e6      	b.n	8003668 <round+0x58>
 800369a:	bf00      	nop
 800369c:	000fffff 	.word	0x000fffff

080036a0 <sin>:
 80036a0:	b530      	push	{r4, r5, lr}
 80036a2:	4a20      	ldr	r2, [pc, #128]	; (8003724 <sin+0x84>)
 80036a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036a8:	4293      	cmp	r3, r2
 80036aa:	b087      	sub	sp, #28
 80036ac:	dc06      	bgt.n	80036bc <sin+0x1c>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2200      	movs	r2, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	f000 fe33 	bl	8004320 <__kernel_sin>
 80036ba:	e006      	b.n	80036ca <sin+0x2a>
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <sin+0x88>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	dd05      	ble.n	80036ce <sin+0x2e>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	f7fc fd47 	bl	8000158 <__aeabi_dsub>
 80036ca:	b007      	add	sp, #28
 80036cc:	bd30      	pop	{r4, r5, pc}
 80036ce:	aa02      	add	r2, sp, #8
 80036d0:	f000 f82e 	bl	8003730 <__ieee754_rem_pio2>
 80036d4:	f000 0003 	and.w	r0, r0, #3
 80036d8:	2801      	cmp	r0, #1
 80036da:	d009      	beq.n	80036f0 <sin+0x50>
 80036dc:	2802      	cmp	r0, #2
 80036de:	d00e      	beq.n	80036fe <sin+0x5e>
 80036e0:	b9c0      	cbnz	r0, 8003714 <sin+0x74>
 80036e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e6:	2301      	movs	r3, #1
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ee:	e7e2      	b.n	80036b6 <sin+0x16>
 80036f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f8:	f000 fa12 	bl	8003b20 <__kernel_cos>
 80036fc:	e7e5      	b.n	80036ca <sin+0x2a>
 80036fe:	2301      	movs	r3, #1
 8003700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800370a:	f000 fe09 	bl	8004320 <__kernel_sin>
 800370e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003712:	e7da      	b.n	80036ca <sin+0x2a>
 8003714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800371c:	f000 fa00 	bl	8003b20 <__kernel_cos>
 8003720:	e7f5      	b.n	800370e <sin+0x6e>
 8003722:	bf00      	nop
 8003724:	3fe921fb 	.word	0x3fe921fb
 8003728:	7fefffff 	.word	0x7fefffff
 800372c:	00000000 	.word	0x00000000

08003730 <__ieee754_rem_pio2>:
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	4614      	mov	r4, r2
 8003736:	4ac4      	ldr	r2, [pc, #784]	; (8003a48 <__ieee754_rem_pio2+0x318>)
 8003738:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800373c:	b08d      	sub	sp, #52	; 0x34
 800373e:	4592      	cmp	sl, r2
 8003740:	9104      	str	r1, [sp, #16]
 8003742:	dc07      	bgt.n	8003754 <__ieee754_rem_pio2+0x24>
 8003744:	2200      	movs	r2, #0
 8003746:	2300      	movs	r3, #0
 8003748:	e9c4 0100 	strd	r0, r1, [r4]
 800374c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003750:	2500      	movs	r5, #0
 8003752:	e024      	b.n	800379e <__ieee754_rem_pio2+0x6e>
 8003754:	4abd      	ldr	r2, [pc, #756]	; (8003a4c <__ieee754_rem_pio2+0x31c>)
 8003756:	4592      	cmp	sl, r2
 8003758:	dc72      	bgt.n	8003840 <__ieee754_rem_pio2+0x110>
 800375a:	9b04      	ldr	r3, [sp, #16]
 800375c:	4dbc      	ldr	r5, [pc, #752]	; (8003a50 <__ieee754_rem_pio2+0x320>)
 800375e:	2b00      	cmp	r3, #0
 8003760:	a3ab      	add	r3, pc, #684	; (adr r3, 8003a10 <__ieee754_rem_pio2+0x2e0>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	dd36      	ble.n	80037d6 <__ieee754_rem_pio2+0xa6>
 8003768:	f7fc fcf6 	bl	8000158 <__aeabi_dsub>
 800376c:	45aa      	cmp	sl, r5
 800376e:	4606      	mov	r6, r0
 8003770:	460f      	mov	r7, r1
 8003772:	d018      	beq.n	80037a6 <__ieee754_rem_pio2+0x76>
 8003774:	a3a8      	add	r3, pc, #672	; (adr r3, 8003a18 <__ieee754_rem_pio2+0x2e8>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f7fc fced 	bl	8000158 <__aeabi_dsub>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4630      	mov	r0, r6
 8003784:	e9c4 2300 	strd	r2, r3, [r4]
 8003788:	4639      	mov	r1, r7
 800378a:	f7fc fce5 	bl	8000158 <__aeabi_dsub>
 800378e:	a3a2      	add	r3, pc, #648	; (adr r3, 8003a18 <__ieee754_rem_pio2+0x2e8>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f7fc fce0 	bl	8000158 <__aeabi_dsub>
 8003798:	2501      	movs	r5, #1
 800379a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800379e:	4628      	mov	r0, r5
 80037a0:	b00d      	add	sp, #52	; 0x34
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	a39e      	add	r3, pc, #632	; (adr r3, 8003a20 <__ieee754_rem_pio2+0x2f0>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f7fc fcd4 	bl	8000158 <__aeabi_dsub>
 80037b0:	a39d      	add	r3, pc, #628	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2f8>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	4606      	mov	r6, r0
 80037b8:	460f      	mov	r7, r1
 80037ba:	f7fc fccd 	bl	8000158 <__aeabi_dsub>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4630      	mov	r0, r6
 80037c4:	e9c4 2300 	strd	r2, r3, [r4]
 80037c8:	4639      	mov	r1, r7
 80037ca:	f7fc fcc5 	bl	8000158 <__aeabi_dsub>
 80037ce:	a396      	add	r3, pc, #600	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2f8>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	e7de      	b.n	8003794 <__ieee754_rem_pio2+0x64>
 80037d6:	f7fc fcc1 	bl	800015c <__adddf3>
 80037da:	45aa      	cmp	sl, r5
 80037dc:	4606      	mov	r6, r0
 80037de:	460f      	mov	r7, r1
 80037e0:	d016      	beq.n	8003810 <__ieee754_rem_pio2+0xe0>
 80037e2:	a38d      	add	r3, pc, #564	; (adr r3, 8003a18 <__ieee754_rem_pio2+0x2e8>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f7fc fcb8 	bl	800015c <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4630      	mov	r0, r6
 80037f2:	e9c4 2300 	strd	r2, r3, [r4]
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fc fcae 	bl	8000158 <__aeabi_dsub>
 80037fc:	a386      	add	r3, pc, #536	; (adr r3, 8003a18 <__ieee754_rem_pio2+0x2e8>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fcab 	bl	800015c <__adddf3>
 8003806:	f04f 35ff 	mov.w	r5, #4294967295
 800380a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800380e:	e7c6      	b.n	800379e <__ieee754_rem_pio2+0x6e>
 8003810:	a383      	add	r3, pc, #524	; (adr r3, 8003a20 <__ieee754_rem_pio2+0x2f0>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc fca1 	bl	800015c <__adddf3>
 800381a:	a383      	add	r3, pc, #524	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2f8>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	4606      	mov	r6, r0
 8003822:	460f      	mov	r7, r1
 8003824:	f7fc fc9a 	bl	800015c <__adddf3>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4630      	mov	r0, r6
 800382e:	e9c4 2300 	strd	r2, r3, [r4]
 8003832:	4639      	mov	r1, r7
 8003834:	f7fc fc90 	bl	8000158 <__aeabi_dsub>
 8003838:	a37b      	add	r3, pc, #492	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2f8>)
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	e7e0      	b.n	8003802 <__ieee754_rem_pio2+0xd2>
 8003840:	4a84      	ldr	r2, [pc, #528]	; (8003a54 <__ieee754_rem_pio2+0x324>)
 8003842:	4592      	cmp	sl, r2
 8003844:	f300 80d5 	bgt.w	80039f2 <__ieee754_rem_pio2+0x2c2>
 8003848:	f000 fe20 	bl	800448c <fabs>
 800384c:	a378      	add	r3, pc, #480	; (adr r3, 8003a30 <__ieee754_rem_pio2+0x300>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	4606      	mov	r6, r0
 8003854:	460f      	mov	r7, r1
 8003856:	f7fc fe37 	bl	80004c8 <__aeabi_dmul>
 800385a:	2200      	movs	r2, #0
 800385c:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <__ieee754_rem_pio2+0x328>)
 800385e:	f7fc fc7d 	bl	800015c <__adddf3>
 8003862:	f7fd f8cb 	bl	80009fc <__aeabi_d2iz>
 8003866:	4605      	mov	r5, r0
 8003868:	f7fc fdc4 	bl	80003f4 <__aeabi_i2d>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003874:	a366      	add	r3, pc, #408	; (adr r3, 8003a10 <__ieee754_rem_pio2+0x2e0>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fe25 	bl	80004c8 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4630      	mov	r0, r6
 8003884:	4639      	mov	r1, r7
 8003886:	f7fc fc67 	bl	8000158 <__aeabi_dsub>
 800388a:	a363      	add	r3, pc, #396	; (adr r3, 8003a18 <__ieee754_rem_pio2+0x2e8>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	4680      	mov	r8, r0
 8003892:	4689      	mov	r9, r1
 8003894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003898:	f7fc fe16 	bl	80004c8 <__aeabi_dmul>
 800389c:	2d1f      	cmp	r5, #31
 800389e:	4606      	mov	r6, r0
 80038a0:	460f      	mov	r7, r1
 80038a2:	dc0e      	bgt.n	80038c2 <__ieee754_rem_pio2+0x192>
 80038a4:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <__ieee754_rem_pio2+0x32c>)
 80038a6:	1e6a      	subs	r2, r5, #1
 80038a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ac:	4553      	cmp	r3, sl
 80038ae:	d008      	beq.n	80038c2 <__ieee754_rem_pio2+0x192>
 80038b0:	4632      	mov	r2, r6
 80038b2:	463b      	mov	r3, r7
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fc4e 	bl	8000158 <__aeabi_dsub>
 80038bc:	e9c4 0100 	strd	r0, r1, [r4]
 80038c0:	e013      	b.n	80038ea <__ieee754_rem_pio2+0x1ba>
 80038c2:	463b      	mov	r3, r7
 80038c4:	4632      	mov	r2, r6
 80038c6:	4640      	mov	r0, r8
 80038c8:	4649      	mov	r1, r9
 80038ca:	f7fc fc45 	bl	8000158 <__aeabi_dsub>
 80038ce:	ea4f 532a 	mov.w	r3, sl, asr #20
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80038d8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80038dc:	f1ba 0f10 	cmp.w	sl, #16
 80038e0:	dc1f      	bgt.n	8003922 <__ieee754_rem_pio2+0x1f2>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	e9c4 2300 	strd	r2, r3, [r4]
 80038ea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80038ee:	4640      	mov	r0, r8
 80038f0:	4653      	mov	r3, sl
 80038f2:	4649      	mov	r1, r9
 80038f4:	f7fc fc30 	bl	8000158 <__aeabi_dsub>
 80038f8:	4632      	mov	r2, r6
 80038fa:	463b      	mov	r3, r7
 80038fc:	f7fc fc2c 	bl	8000158 <__aeabi_dsub>
 8003900:	460b      	mov	r3, r1
 8003902:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003906:	9904      	ldr	r1, [sp, #16]
 8003908:	4602      	mov	r2, r0
 800390a:	2900      	cmp	r1, #0
 800390c:	f6bf af47 	bge.w	800379e <__ieee754_rem_pio2+0x6e>
 8003910:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003914:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003918:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800391c:	60e3      	str	r3, [r4, #12]
 800391e:	426d      	negs	r5, r5
 8003920:	e73d      	b.n	800379e <__ieee754_rem_pio2+0x6e>
 8003922:	a33f      	add	r3, pc, #252	; (adr r3, 8003a20 <__ieee754_rem_pio2+0x2f0>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800392c:	f7fc fdcc 	bl	80004c8 <__aeabi_dmul>
 8003930:	4606      	mov	r6, r0
 8003932:	460f      	mov	r7, r1
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4640      	mov	r0, r8
 800393a:	4649      	mov	r1, r9
 800393c:	f7fc fc0c 	bl	8000158 <__aeabi_dsub>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4682      	mov	sl, r0
 8003946:	468b      	mov	fp, r1
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fc fc04 	bl	8000158 <__aeabi_dsub>
 8003950:	4632      	mov	r2, r6
 8003952:	463b      	mov	r3, r7
 8003954:	f7fc fc00 	bl	8000158 <__aeabi_dsub>
 8003958:	a333      	add	r3, pc, #204	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2f8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	4606      	mov	r6, r0
 8003960:	460f      	mov	r7, r1
 8003962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003966:	f7fc fdaf 	bl	80004c8 <__aeabi_dmul>
 800396a:	4632      	mov	r2, r6
 800396c:	463b      	mov	r3, r7
 800396e:	f7fc fbf3 	bl	8000158 <__aeabi_dsub>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4606      	mov	r6, r0
 8003978:	460f      	mov	r7, r1
 800397a:	4650      	mov	r0, sl
 800397c:	4659      	mov	r1, fp
 800397e:	f7fc fbeb 	bl	8000158 <__aeabi_dsub>
 8003982:	9a05      	ldr	r2, [sp, #20]
 8003984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b31      	cmp	r3, #49	; 0x31
 800398c:	dc06      	bgt.n	800399c <__ieee754_rem_pio2+0x26c>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	46d0      	mov	r8, sl
 8003994:	46d9      	mov	r9, fp
 8003996:	e9c4 2300 	strd	r2, r3, [r4]
 800399a:	e7a6      	b.n	80038ea <__ieee754_rem_pio2+0x1ba>
 800399c:	a326      	add	r3, pc, #152	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x308>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039a6:	f7fc fd8f 	bl	80004c8 <__aeabi_dmul>
 80039aa:	4606      	mov	r6, r0
 80039ac:	460f      	mov	r7, r1
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4650      	mov	r0, sl
 80039b4:	4659      	mov	r1, fp
 80039b6:	f7fc fbcf 	bl	8000158 <__aeabi_dsub>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4680      	mov	r8, r0
 80039c0:	4689      	mov	r9, r1
 80039c2:	4650      	mov	r0, sl
 80039c4:	4659      	mov	r1, fp
 80039c6:	f7fc fbc7 	bl	8000158 <__aeabi_dsub>
 80039ca:	4632      	mov	r2, r6
 80039cc:	463b      	mov	r3, r7
 80039ce:	f7fc fbc3 	bl	8000158 <__aeabi_dsub>
 80039d2:	a31b      	add	r3, pc, #108	; (adr r3, 8003a40 <__ieee754_rem_pio2+0x310>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	4606      	mov	r6, r0
 80039da:	460f      	mov	r7, r1
 80039dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039e0:	f7fc fd72 	bl	80004c8 <__aeabi_dmul>
 80039e4:	4632      	mov	r2, r6
 80039e6:	463b      	mov	r3, r7
 80039e8:	f7fc fbb6 	bl	8000158 <__aeabi_dsub>
 80039ec:	4606      	mov	r6, r0
 80039ee:	460f      	mov	r7, r1
 80039f0:	e75e      	b.n	80038b0 <__ieee754_rem_pio2+0x180>
 80039f2:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <__ieee754_rem_pio2+0x330>)
 80039f4:	4592      	cmp	sl, r2
 80039f6:	dd35      	ble.n	8003a64 <__ieee754_rem_pio2+0x334>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	f7fc fbac 	bl	8000158 <__aeabi_dsub>
 8003a00:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a04:	e9c4 0100 	strd	r0, r1, [r4]
 8003a08:	e6a2      	b.n	8003750 <__ieee754_rem_pio2+0x20>
 8003a0a:	bf00      	nop
 8003a0c:	f3af 8000 	nop.w
 8003a10:	54400000 	.word	0x54400000
 8003a14:	3ff921fb 	.word	0x3ff921fb
 8003a18:	1a626331 	.word	0x1a626331
 8003a1c:	3dd0b461 	.word	0x3dd0b461
 8003a20:	1a600000 	.word	0x1a600000
 8003a24:	3dd0b461 	.word	0x3dd0b461
 8003a28:	2e037073 	.word	0x2e037073
 8003a2c:	3ba3198a 	.word	0x3ba3198a
 8003a30:	6dc9c883 	.word	0x6dc9c883
 8003a34:	3fe45f30 	.word	0x3fe45f30
 8003a38:	2e000000 	.word	0x2e000000
 8003a3c:	3ba3198a 	.word	0x3ba3198a
 8003a40:	252049c1 	.word	0x252049c1
 8003a44:	397b839a 	.word	0x397b839a
 8003a48:	3fe921fb 	.word	0x3fe921fb
 8003a4c:	4002d97b 	.word	0x4002d97b
 8003a50:	3ff921fb 	.word	0x3ff921fb
 8003a54:	413921fb 	.word	0x413921fb
 8003a58:	3fe00000 	.word	0x3fe00000
 8003a5c:	080045d4 	.word	0x080045d4
 8003a60:	7fefffff 	.word	0x7fefffff
 8003a64:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003a68:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003a6c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003a70:	460f      	mov	r7, r1
 8003a72:	4606      	mov	r6, r0
 8003a74:	f7fc ffc2 	bl	80009fc <__aeabi_d2iz>
 8003a78:	f7fc fcbc 	bl	80003f4 <__aeabi_i2d>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4630      	mov	r0, r6
 8003a82:	4639      	mov	r1, r7
 8003a84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a88:	f7fc fb66 	bl	8000158 <__aeabi_dsub>
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <__ieee754_rem_pio2+0x3e8>)
 8003a90:	f7fc fd1a 	bl	80004c8 <__aeabi_dmul>
 8003a94:	460f      	mov	r7, r1
 8003a96:	4606      	mov	r6, r0
 8003a98:	f7fc ffb0 	bl	80009fc <__aeabi_d2iz>
 8003a9c:	f7fc fcaa 	bl	80003f4 <__aeabi_i2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003aac:	f7fc fb54 	bl	8000158 <__aeabi_dsub>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <__ieee754_rem_pio2+0x3e8>)
 8003ab4:	f7fc fd08 	bl	80004c8 <__aeabi_dmul>
 8003ab8:	f04f 0803 	mov.w	r8, #3
 8003abc:	2600      	movs	r6, #0
 8003abe:	2700      	movs	r7, #0
 8003ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ac4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8003ac8:	4632      	mov	r2, r6
 8003aca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8003ace:	463b      	mov	r3, r7
 8003ad0:	46c2      	mov	sl, r8
 8003ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ad6:	f7fc ff5f 	bl	8000998 <__aeabi_dcmpeq>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1f4      	bne.n	8003ac8 <__ieee754_rem_pio2+0x398>
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <__ieee754_rem_pio2+0x3ec>)
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	a806      	add	r0, sp, #24
 8003aec:	4653      	mov	r3, sl
 8003aee:	f000 f8d5 	bl	8003c9c <__kernel_rem_pio2>
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	4605      	mov	r5, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f6bf ae51 	bge.w	800379e <__ieee754_rem_pio2+0x6e>
 8003afc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b04:	e9c4 2300 	strd	r2, r3, [r4]
 8003b08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003b0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003b14:	e703      	b.n	800391e <__ieee754_rem_pio2+0x1ee>
 8003b16:	bf00      	nop
 8003b18:	41700000 	.word	0x41700000
 8003b1c:	08004654 	.word	0x08004654

08003b20 <__kernel_cos>:
 8003b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003b28:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	e9cd 2300 	strd	r2, r3, [sp]
 8003b34:	da04      	bge.n	8003b40 <__kernel_cos+0x20>
 8003b36:	f7fc ff61 	bl	80009fc <__aeabi_d2iz>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f000 8086 	beq.w	8003c4c <__kernel_cos+0x12c>
 8003b40:	4642      	mov	r2, r8
 8003b42:	463b      	mov	r3, r7
 8003b44:	4640      	mov	r0, r8
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc fcbe 	bl	80004c8 <__aeabi_dmul>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <__kernel_cos+0x168>)
 8003b50:	4604      	mov	r4, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	f7fc fcb8 	bl	80004c8 <__aeabi_dmul>
 8003b58:	a33f      	add	r3, pc, #252	; (adr r3, 8003c58 <__kernel_cos+0x138>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	4682      	mov	sl, r0
 8003b60:	468b      	mov	fp, r1
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc fcaf 	bl	80004c8 <__aeabi_dmul>
 8003b6a:	a33d      	add	r3, pc, #244	; (adr r3, 8003c60 <__kernel_cos+0x140>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc faf4 	bl	800015c <__adddf3>
 8003b74:	4622      	mov	r2, r4
 8003b76:	462b      	mov	r3, r5
 8003b78:	f7fc fca6 	bl	80004c8 <__aeabi_dmul>
 8003b7c:	a33a      	add	r3, pc, #232	; (adr r3, 8003c68 <__kernel_cos+0x148>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fae9 	bl	8000158 <__aeabi_dsub>
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	f7fc fc9d 	bl	80004c8 <__aeabi_dmul>
 8003b8e:	a338      	add	r3, pc, #224	; (adr r3, 8003c70 <__kernel_cos+0x150>)
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f7fc fae2 	bl	800015c <__adddf3>
 8003b98:	4622      	mov	r2, r4
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	f7fc fc94 	bl	80004c8 <__aeabi_dmul>
 8003ba0:	a335      	add	r3, pc, #212	; (adr r3, 8003c78 <__kernel_cos+0x158>)
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc fad7 	bl	8000158 <__aeabi_dsub>
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	f7fc fc8b 	bl	80004c8 <__aeabi_dmul>
 8003bb2:	a333      	add	r3, pc, #204	; (adr r3, 8003c80 <__kernel_cos+0x160>)
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f7fc fad0 	bl	800015c <__adddf3>
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f7fc fc82 	bl	80004c8 <__aeabi_dmul>
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	f7fc fc7e 	bl	80004c8 <__aeabi_dmul>
 8003bcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	f7fc fc76 	bl	80004c8 <__aeabi_dmul>
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4602      	mov	r2, r0
 8003be0:	4629      	mov	r1, r5
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7fc fab8 	bl	8000158 <__aeabi_dsub>
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <__kernel_cos+0x16c>)
 8003bea:	4680      	mov	r8, r0
 8003bec:	429e      	cmp	r6, r3
 8003bee:	4689      	mov	r9, r1
 8003bf0:	dc0e      	bgt.n	8003c10 <__kernel_cos+0xf0>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4650      	mov	r0, sl
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	f7fc faad 	bl	8000158 <__aeabi_dsub>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	2000      	movs	r0, #0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4922      	ldr	r1, [pc, #136]	; (8003c90 <__kernel_cos+0x170>)
 8003c06:	f7fc faa7 	bl	8000158 <__aeabi_dsub>
 8003c0a:	b003      	add	sp, #12
 8003c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c10:	2400      	movs	r4, #0
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <__kernel_cos+0x174>)
 8003c14:	4622      	mov	r2, r4
 8003c16:	429e      	cmp	r6, r3
 8003c18:	bfcc      	ite	gt
 8003c1a:	4d1f      	ldrgt	r5, [pc, #124]	; (8003c98 <__kernel_cos+0x178>)
 8003c1c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003c20:	462b      	mov	r3, r5
 8003c22:	2000      	movs	r0, #0
 8003c24:	491a      	ldr	r1, [pc, #104]	; (8003c90 <__kernel_cos+0x170>)
 8003c26:	f7fc fa97 	bl	8000158 <__aeabi_dsub>
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	460f      	mov	r7, r1
 8003c30:	462b      	mov	r3, r5
 8003c32:	4650      	mov	r0, sl
 8003c34:	4659      	mov	r1, fp
 8003c36:	f7fc fa8f 	bl	8000158 <__aeabi_dsub>
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	f7fc fa8b 	bl	8000158 <__aeabi_dsub>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4630      	mov	r0, r6
 8003c48:	4639      	mov	r1, r7
 8003c4a:	e7dc      	b.n	8003c06 <__kernel_cos+0xe6>
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	4910      	ldr	r1, [pc, #64]	; (8003c90 <__kernel_cos+0x170>)
 8003c50:	e7db      	b.n	8003c0a <__kernel_cos+0xea>
 8003c52:	bf00      	nop
 8003c54:	f3af 8000 	nop.w
 8003c58:	be8838d4 	.word	0xbe8838d4
 8003c5c:	bda8fae9 	.word	0xbda8fae9
 8003c60:	bdb4b1c4 	.word	0xbdb4b1c4
 8003c64:	3e21ee9e 	.word	0x3e21ee9e
 8003c68:	809c52ad 	.word	0x809c52ad
 8003c6c:	3e927e4f 	.word	0x3e927e4f
 8003c70:	19cb1590 	.word	0x19cb1590
 8003c74:	3efa01a0 	.word	0x3efa01a0
 8003c78:	16c15177 	.word	0x16c15177
 8003c7c:	3f56c16c 	.word	0x3f56c16c
 8003c80:	5555554c 	.word	0x5555554c
 8003c84:	3fa55555 	.word	0x3fa55555
 8003c88:	3fe00000 	.word	0x3fe00000
 8003c8c:	3fd33332 	.word	0x3fd33332
 8003c90:	3ff00000 	.word	0x3ff00000
 8003c94:	3fe90000 	.word	0x3fe90000
 8003c98:	3fd20000 	.word	0x3fd20000

08003c9c <__kernel_rem_pio2>:
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003ca4:	9308      	str	r3, [sp, #32]
 8003ca6:	9106      	str	r1, [sp, #24]
 8003ca8:	4bb6      	ldr	r3, [pc, #728]	; (8003f84 <__kernel_rem_pio2+0x2e8>)
 8003caa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003cac:	f112 0f14 	cmn.w	r2, #20
 8003cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cb4:	bfa8      	it	ge
 8003cb6:	1ed4      	subge	r4, r2, #3
 8003cb8:	9302      	str	r3, [sp, #8]
 8003cba:	9b08      	ldr	r3, [sp, #32]
 8003cbc:	bfb8      	it	lt
 8003cbe:	2400      	movlt	r4, #0
 8003cc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cc4:	9307      	str	r3, [sp, #28]
 8003cc6:	bfa4      	itt	ge
 8003cc8:	2318      	movge	r3, #24
 8003cca:	fb94 f4f3 	sdivge	r4, r4, r3
 8003cce:	f06f 0317 	mvn.w	r3, #23
 8003cd2:	fb04 3303 	mla	r3, r4, r3, r3
 8003cd6:	eb03 0b02 	add.w	fp, r3, r2
 8003cda:	9a07      	ldr	r2, [sp, #28]
 8003cdc:	9b02      	ldr	r3, [sp, #8]
 8003cde:	1aa7      	subs	r7, r4, r2
 8003ce0:	eb03 0802 	add.w	r8, r3, r2
 8003ce4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003cec:	2200      	movs	r2, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9009      	str	r0, [sp, #36]	; 0x24
 8003cf2:	ae20      	add	r6, sp, #128	; 0x80
 8003cf4:	4545      	cmp	r5, r8
 8003cf6:	dd14      	ble.n	8003d22 <__kernel_rem_pio2+0x86>
 8003cf8:	f04f 0800 	mov.w	r8, #0
 8003cfc:	9a08      	ldr	r2, [sp, #32]
 8003cfe:	ab20      	add	r3, sp, #128	; 0x80
 8003d00:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003d04:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	4598      	cmp	r8, r3
 8003d0c:	dc35      	bgt.n	8003d7a <__kernel_rem_pio2+0xde>
 8003d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d10:	2200      	movs	r2, #0
 8003d12:	f1a3 0908 	sub.w	r9, r3, #8
 8003d16:	2300      	movs	r3, #0
 8003d18:	462f      	mov	r7, r5
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d20:	e01f      	b.n	8003d62 <__kernel_rem_pio2+0xc6>
 8003d22:	42ef      	cmn	r7, r5
 8003d24:	d40b      	bmi.n	8003d3e <__kernel_rem_pio2+0xa2>
 8003d26:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003d2a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d2e:	f7fc fb61 	bl	80003f4 <__aeabi_i2d>
 8003d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d36:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003d3a:	3501      	adds	r5, #1
 8003d3c:	e7da      	b.n	8003cf4 <__kernel_rem_pio2+0x58>
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	e7f8      	b.n	8003d36 <__kernel_rem_pio2+0x9a>
 8003d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d48:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003d4c:	f7fc fbbc 	bl	80004c8 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d58:	f7fc fa00 	bl	800015c <__adddf3>
 8003d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8003d60:	3601      	adds	r6, #1
 8003d62:	9b07      	ldr	r3, [sp, #28]
 8003d64:	3f08      	subs	r7, #8
 8003d66:	429e      	cmp	r6, r3
 8003d68:	ddec      	ble.n	8003d44 <__kernel_rem_pio2+0xa8>
 8003d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d6e:	f108 0801 	add.w	r8, r8, #1
 8003d72:	e8ea 2302 	strd	r2, r3, [sl], #8
 8003d76:	3508      	adds	r5, #8
 8003d78:	e7c6      	b.n	8003d08 <__kernel_rem_pio2+0x6c>
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	aa0c      	add	r2, sp, #48	; 0x30
 8003d7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d84:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003d86:	9e02      	ldr	r6, [sp, #8]
 8003d88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8003d8e:	ab98      	add	r3, sp, #608	; 0x260
 8003d90:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d94:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003d98:	ab70      	add	r3, sp, #448	; 0x1c0
 8003d9a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8003d9e:	46d0      	mov	r8, sl
 8003da0:	46b1      	mov	r9, r6
 8003da2:	af0c      	add	r7, sp, #48	; 0x30
 8003da4:	9700      	str	r7, [sp, #0]
 8003da6:	f1b9 0f00 	cmp.w	r9, #0
 8003daa:	f1a8 0808 	sub.w	r8, r8, #8
 8003dae:	dc71      	bgt.n	8003e94 <__kernel_rem_pio2+0x1f8>
 8003db0:	465a      	mov	r2, fp
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f000 fb6f 	bl	8004498 <scalbn>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	f7fc fb80 	bl	80004c8 <__aeabi_dmul>
 8003dc8:	f7ff fba2 	bl	8003510 <floor>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <__kernel_rem_pio2+0x2ec>)
 8003dd0:	f7fc fb7a 	bl	80004c8 <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f7fc f9bc 	bl	8000158 <__aeabi_dsub>
 8003de0:	460d      	mov	r5, r1
 8003de2:	4604      	mov	r4, r0
 8003de4:	f7fc fe0a 	bl	80009fc <__aeabi_d2iz>
 8003de8:	9004      	str	r0, [sp, #16]
 8003dea:	f7fc fb03 	bl	80003f4 <__aeabi_i2d>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc f9af 	bl	8000158 <__aeabi_dsub>
 8003dfa:	f1bb 0f00 	cmp.w	fp, #0
 8003dfe:	4680      	mov	r8, r0
 8003e00:	4689      	mov	r9, r1
 8003e02:	dd70      	ble.n	8003ee6 <__kernel_rem_pio2+0x24a>
 8003e04:	1e72      	subs	r2, r6, #1
 8003e06:	ab0c      	add	r3, sp, #48	; 0x30
 8003e08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003e0c:	9c04      	ldr	r4, [sp, #16]
 8003e0e:	f1cb 0118 	rsb	r1, fp, #24
 8003e12:	fa40 f301 	asr.w	r3, r0, r1
 8003e16:	441c      	add	r4, r3
 8003e18:	408b      	lsls	r3, r1
 8003e1a:	1ac0      	subs	r0, r0, r3
 8003e1c:	ab0c      	add	r3, sp, #48	; 0x30
 8003e1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003e22:	f1cb 0317 	rsb	r3, fp, #23
 8003e26:	9404      	str	r4, [sp, #16]
 8003e28:	fa40 f303 	asr.w	r3, r0, r3
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	9b00      	ldr	r3, [sp, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dd66      	ble.n	8003f02 <__kernel_rem_pio2+0x266>
 8003e34:	2200      	movs	r2, #0
 8003e36:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	9b04      	ldr	r3, [sp, #16]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	9304      	str	r3, [sp, #16]
 8003e42:	4296      	cmp	r6, r2
 8003e44:	f300 80ac 	bgt.w	8003fa0 <__kernel_rem_pio2+0x304>
 8003e48:	f1bb 0f00 	cmp.w	fp, #0
 8003e4c:	dd07      	ble.n	8003e5e <__kernel_rem_pio2+0x1c2>
 8003e4e:	f1bb 0f01 	cmp.w	fp, #1
 8003e52:	f000 80b4 	beq.w	8003fbe <__kernel_rem_pio2+0x322>
 8003e56:	f1bb 0f02 	cmp.w	fp, #2
 8003e5a:	f000 80ba 	beq.w	8003fd2 <__kernel_rem_pio2+0x336>
 8003e5e:	9b00      	ldr	r3, [sp, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d14e      	bne.n	8003f02 <__kernel_rem_pio2+0x266>
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	2000      	movs	r0, #0
 8003e6a:	4948      	ldr	r1, [pc, #288]	; (8003f8c <__kernel_rem_pio2+0x2f0>)
 8003e6c:	f7fc f974 	bl	8000158 <__aeabi_dsub>
 8003e70:	4680      	mov	r8, r0
 8003e72:	4689      	mov	r9, r1
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d044      	beq.n	8003f02 <__kernel_rem_pio2+0x266>
 8003e78:	465a      	mov	r2, fp
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	4943      	ldr	r1, [pc, #268]	; (8003f8c <__kernel_rem_pio2+0x2f0>)
 8003e7e:	f000 fb0b 	bl	8004498 <scalbn>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4640      	mov	r0, r8
 8003e88:	4649      	mov	r1, r9
 8003e8a:	f7fc f965 	bl	8000158 <__aeabi_dsub>
 8003e8e:	4680      	mov	r8, r0
 8003e90:	4689      	mov	r9, r1
 8003e92:	e036      	b.n	8003f02 <__kernel_rem_pio2+0x266>
 8003e94:	2200      	movs	r2, #0
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <__kernel_rem_pio2+0x2f4>)
 8003e98:	4620      	mov	r0, r4
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f7fc fb14 	bl	80004c8 <__aeabi_dmul>
 8003ea0:	f7fc fdac 	bl	80009fc <__aeabi_d2iz>
 8003ea4:	f7fc faa6 	bl	80003f4 <__aeabi_i2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <__kernel_rem_pio2+0x2f8>)
 8003eb4:	f7fc fb08 	bl	80004c8 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc f94a 	bl	8000158 <__aeabi_dsub>
 8003ec4:	f7fc fd9a 	bl	80009fc <__aeabi_d2iz>
 8003ec8:	9b00      	ldr	r3, [sp, #0]
 8003eca:	f109 39ff 	add.w	r9, r9, #4294967295
 8003ece:	f843 0b04 	str.w	r0, [r3], #4
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ed8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003edc:	f7fc f93e 	bl	800015c <__adddf3>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	e75f      	b.n	8003da6 <__kernel_rem_pio2+0x10a>
 8003ee6:	d105      	bne.n	8003ef4 <__kernel_rem_pio2+0x258>
 8003ee8:	1e73      	subs	r3, r6, #1
 8003eea:	aa0c      	add	r2, sp, #48	; 0x30
 8003eec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ef0:	15c3      	asrs	r3, r0, #23
 8003ef2:	e79b      	b.n	8003e2c <__kernel_rem_pio2+0x190>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <__kernel_rem_pio2+0x2fc>)
 8003ef8:	f7fc fd6c 	bl	80009d4 <__aeabi_dcmpge>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d13e      	bne.n	8003f7e <__kernel_rem_pio2+0x2e2>
 8003f00:	9000      	str	r0, [sp, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	2300      	movs	r3, #0
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f7fc fd45 	bl	8000998 <__aeabi_dcmpeq>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	f000 80b1 	beq.w	8004076 <__kernel_rem_pio2+0x3da>
 8003f14:	1e74      	subs	r4, r6, #1
 8003f16:	4623      	mov	r3, r4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	9902      	ldr	r1, [sp, #8]
 8003f1c:	428b      	cmp	r3, r1
 8003f1e:	da5f      	bge.n	8003fe0 <__kernel_rem_pio2+0x344>
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d074      	beq.n	800400e <__kernel_rem_pio2+0x372>
 8003f24:	ab0c      	add	r3, sp, #48	; 0x30
 8003f26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003f2a:	f1ab 0b18 	sub.w	fp, fp, #24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 809f 	beq.w	8004072 <__kernel_rem_pio2+0x3d6>
 8003f34:	465a      	mov	r2, fp
 8003f36:	2000      	movs	r0, #0
 8003f38:	4914      	ldr	r1, [pc, #80]	; (8003f8c <__kernel_rem_pio2+0x2f0>)
 8003f3a:	f000 faad 	bl	8004498 <scalbn>
 8003f3e:	46a2      	mov	sl, r4
 8003f40:	4606      	mov	r6, r0
 8003f42:	460f      	mov	r7, r1
 8003f44:	f04f 0800 	mov.w	r8, #0
 8003f48:	ab70      	add	r3, sp, #448	; 0x1c0
 8003f4a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003f90 <__kernel_rem_pio2+0x2f4>
 8003f4e:	00e5      	lsls	r5, r4, #3
 8003f50:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003f54:	f1ba 0f00 	cmp.w	sl, #0
 8003f58:	f280 80c3 	bge.w	80040e2 <__kernel_rem_pio2+0x446>
 8003f5c:	4626      	mov	r6, r4
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	f2c0 80f5 	blt.w	800414e <__kernel_rem_pio2+0x4b2>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__kernel_rem_pio2+0x300>)
 8003f66:	f04f 0a00 	mov.w	sl, #0
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8003f6e:	f04f 0b00 	mov.w	fp, #0
 8003f72:	f04f 0800 	mov.w	r8, #0
 8003f76:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003f7a:	1ba7      	subs	r7, r4, r6
 8003f7c:	e0db      	b.n	8004136 <__kernel_rem_pio2+0x49a>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	e757      	b.n	8003e34 <__kernel_rem_pio2+0x198>
 8003f84:	080047a0 	.word	0x080047a0
 8003f88:	40200000 	.word	0x40200000
 8003f8c:	3ff00000 	.word	0x3ff00000
 8003f90:	3e700000 	.word	0x3e700000
 8003f94:	41700000 	.word	0x41700000
 8003f98:	3fe00000 	.word	0x3fe00000
 8003f9c:	08004760 	.word	0x08004760
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b944      	cbnz	r4, 8003fb6 <__kernel_rem_pio2+0x31a>
 8003fa4:	b11b      	cbz	r3, 8003fae <__kernel_rem_pio2+0x312>
 8003fa6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	2301      	movs	r3, #1
 8003fae:	461c      	mov	r4, r3
 8003fb0:	3201      	adds	r2, #1
 8003fb2:	3704      	adds	r7, #4
 8003fb4:	e745      	b.n	8003e42 <__kernel_rem_pio2+0x1a6>
 8003fb6:	1acb      	subs	r3, r1, r3
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4623      	mov	r3, r4
 8003fbc:	e7f7      	b.n	8003fae <__kernel_rem_pio2+0x312>
 8003fbe:	1e72      	subs	r2, r6, #1
 8003fc0:	ab0c      	add	r3, sp, #48	; 0x30
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003fca:	a90c      	add	r1, sp, #48	; 0x30
 8003fcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003fd0:	e745      	b.n	8003e5e <__kernel_rem_pio2+0x1c2>
 8003fd2:	1e72      	subs	r2, r6, #1
 8003fd4:	ab0c      	add	r3, sp, #48	; 0x30
 8003fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fda:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003fde:	e7f4      	b.n	8003fca <__kernel_rem_pio2+0x32e>
 8003fe0:	a90c      	add	r1, sp, #48	; 0x30
 8003fe2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	e796      	b.n	8003f1a <__kernel_rem_pio2+0x27e>
 8003fec:	3401      	adds	r4, #1
 8003fee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	d0fa      	beq.n	8003fec <__kernel_rem_pio2+0x350>
 8003ff6:	9b08      	ldr	r3, [sp, #32]
 8003ff8:	f106 0801 	add.w	r8, r6, #1
 8003ffc:	18f5      	adds	r5, r6, r3
 8003ffe:	ab20      	add	r3, sp, #128	; 0x80
 8004000:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004004:	4434      	add	r4, r6
 8004006:	4544      	cmp	r4, r8
 8004008:	da04      	bge.n	8004014 <__kernel_rem_pio2+0x378>
 800400a:	4626      	mov	r6, r4
 800400c:	e6bf      	b.n	8003d8e <__kernel_rem_pio2+0xf2>
 800400e:	2401      	movs	r4, #1
 8004010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004012:	e7ec      	b.n	8003fee <__kernel_rem_pio2+0x352>
 8004014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800401e:	f7fc f9e9 	bl	80003f4 <__aeabi_i2d>
 8004022:	2600      	movs	r6, #0
 8004024:	2700      	movs	r7, #0
 8004026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004028:	e9c5 0100 	strd	r0, r1, [r5]
 800402c:	3b08      	subs	r3, #8
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	9504      	str	r5, [sp, #16]
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	4599      	cmp	r9, r3
 8004036:	dd05      	ble.n	8004044 <__kernel_rem_pio2+0x3a8>
 8004038:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800403c:	f108 0801 	add.w	r8, r8, #1
 8004040:	3508      	adds	r5, #8
 8004042:	e7e0      	b.n	8004006 <__kernel_rem_pio2+0x36a>
 8004044:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004048:	9900      	ldr	r1, [sp, #0]
 800404a:	f109 0901 	add.w	r9, r9, #1
 800404e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004052:	9100      	str	r1, [sp, #0]
 8004054:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004058:	f8cd c010 	str.w	ip, [sp, #16]
 800405c:	f7fc fa34 	bl	80004c8 <__aeabi_dmul>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4630      	mov	r0, r6
 8004066:	4639      	mov	r1, r7
 8004068:	f7fc f878 	bl	800015c <__adddf3>
 800406c:	4606      	mov	r6, r0
 800406e:	460f      	mov	r7, r1
 8004070:	e7df      	b.n	8004032 <__kernel_rem_pio2+0x396>
 8004072:	3c01      	subs	r4, #1
 8004074:	e756      	b.n	8003f24 <__kernel_rem_pio2+0x288>
 8004076:	f1cb 0200 	rsb	r2, fp, #0
 800407a:	4640      	mov	r0, r8
 800407c:	4649      	mov	r1, r9
 800407e:	f000 fa0b 	bl	8004498 <scalbn>
 8004082:	2200      	movs	r2, #0
 8004084:	4ba4      	ldr	r3, [pc, #656]	; (8004318 <__kernel_rem_pio2+0x67c>)
 8004086:	4604      	mov	r4, r0
 8004088:	460d      	mov	r5, r1
 800408a:	f7fc fca3 	bl	80009d4 <__aeabi_dcmpge>
 800408e:	b1f8      	cbz	r0, 80040d0 <__kernel_rem_pio2+0x434>
 8004090:	2200      	movs	r2, #0
 8004092:	4ba2      	ldr	r3, [pc, #648]	; (800431c <__kernel_rem_pio2+0x680>)
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fa16 	bl	80004c8 <__aeabi_dmul>
 800409c:	f7fc fcae 	bl	80009fc <__aeabi_d2iz>
 80040a0:	4607      	mov	r7, r0
 80040a2:	f7fc f9a7 	bl	80003f4 <__aeabi_i2d>
 80040a6:	2200      	movs	r2, #0
 80040a8:	4b9b      	ldr	r3, [pc, #620]	; (8004318 <__kernel_rem_pio2+0x67c>)
 80040aa:	f7fc fa0d 	bl	80004c8 <__aeabi_dmul>
 80040ae:	460b      	mov	r3, r1
 80040b0:	4602      	mov	r2, r0
 80040b2:	4629      	mov	r1, r5
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7fc f84f 	bl	8000158 <__aeabi_dsub>
 80040ba:	f7fc fc9f 	bl	80009fc <__aeabi_d2iz>
 80040be:	1c74      	adds	r4, r6, #1
 80040c0:	ab0c      	add	r3, sp, #48	; 0x30
 80040c2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80040c6:	f10b 0b18 	add.w	fp, fp, #24
 80040ca:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80040ce:	e731      	b.n	8003f34 <__kernel_rem_pio2+0x298>
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7fc fc92 	bl	80009fc <__aeabi_d2iz>
 80040d8:	ab0c      	add	r3, sp, #48	; 0x30
 80040da:	4634      	mov	r4, r6
 80040dc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80040e0:	e728      	b.n	8003f34 <__kernel_rem_pio2+0x298>
 80040e2:	ab0c      	add	r3, sp, #48	; 0x30
 80040e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80040e8:	f7fc f984 	bl	80003f4 <__aeabi_i2d>
 80040ec:	4632      	mov	r2, r6
 80040ee:	463b      	mov	r3, r7
 80040f0:	f7fc f9ea 	bl	80004c8 <__aeabi_dmul>
 80040f4:	4642      	mov	r2, r8
 80040f6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80040fa:	464b      	mov	r3, r9
 80040fc:	4630      	mov	r0, r6
 80040fe:	4639      	mov	r1, r7
 8004100:	f7fc f9e2 	bl	80004c8 <__aeabi_dmul>
 8004104:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004108:	4606      	mov	r6, r0
 800410a:	460f      	mov	r7, r1
 800410c:	e722      	b.n	8003f54 <__kernel_rem_pio2+0x2b8>
 800410e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004112:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004116:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800411a:	f8cd c01c 	str.w	ip, [sp, #28]
 800411e:	f7fc f9d3 	bl	80004c8 <__aeabi_dmul>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4650      	mov	r0, sl
 8004128:	4659      	mov	r1, fp
 800412a:	f7fc f817 	bl	800015c <__adddf3>
 800412e:	4682      	mov	sl, r0
 8004130:	468b      	mov	fp, r1
 8004132:	f108 0801 	add.w	r8, r8, #1
 8004136:	9b02      	ldr	r3, [sp, #8]
 8004138:	4598      	cmp	r8, r3
 800413a:	dc01      	bgt.n	8004140 <__kernel_rem_pio2+0x4a4>
 800413c:	45b8      	cmp	r8, r7
 800413e:	dde6      	ble.n	800410e <__kernel_rem_pio2+0x472>
 8004140:	ab48      	add	r3, sp, #288	; 0x120
 8004142:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004146:	e9c7 ab00 	strd	sl, fp, [r7]
 800414a:	3e01      	subs	r6, #1
 800414c:	e707      	b.n	8003f5e <__kernel_rem_pio2+0x2c2>
 800414e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004150:	2b02      	cmp	r3, #2
 8004152:	dc09      	bgt.n	8004168 <__kernel_rem_pio2+0x4cc>
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc32      	bgt.n	80041be <__kernel_rem_pio2+0x522>
 8004158:	d05a      	beq.n	8004210 <__kernel_rem_pio2+0x574>
 800415a:	9b04      	ldr	r3, [sp, #16]
 800415c:	f003 0007 	and.w	r0, r3, #7
 8004160:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800416a:	2b03      	cmp	r3, #3
 800416c:	d1f5      	bne.n	800415a <__kernel_rem_pio2+0x4be>
 800416e:	ab48      	add	r3, sp, #288	; 0x120
 8004170:	441d      	add	r5, r3
 8004172:	46aa      	mov	sl, r5
 8004174:	46a3      	mov	fp, r4
 8004176:	f1bb 0f00 	cmp.w	fp, #0
 800417a:	dc76      	bgt.n	800426a <__kernel_rem_pio2+0x5ce>
 800417c:	46aa      	mov	sl, r5
 800417e:	46a3      	mov	fp, r4
 8004180:	f1bb 0f01 	cmp.w	fp, #1
 8004184:	f300 8090 	bgt.w	80042a8 <__kernel_rem_pio2+0x60c>
 8004188:	2700      	movs	r7, #0
 800418a:	463e      	mov	r6, r7
 800418c:	2c01      	cmp	r4, #1
 800418e:	f300 80aa 	bgt.w	80042e6 <__kernel_rem_pio2+0x64a>
 8004192:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004196:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800419a:	9b00      	ldr	r3, [sp, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 80ac 	bne.w	80042fa <__kernel_rem_pio2+0x65e>
 80041a2:	4603      	mov	r3, r0
 80041a4:	462a      	mov	r2, r5
 80041a6:	9806      	ldr	r0, [sp, #24]
 80041a8:	e9c0 2300 	strd	r2, r3, [r0]
 80041ac:	4622      	mov	r2, r4
 80041ae:	460b      	mov	r3, r1
 80041b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80041b4:	463a      	mov	r2, r7
 80041b6:	4633      	mov	r3, r6
 80041b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80041bc:	e7cd      	b.n	800415a <__kernel_rem_pio2+0x4be>
 80041be:	2000      	movs	r0, #0
 80041c0:	46a0      	mov	r8, r4
 80041c2:	4601      	mov	r1, r0
 80041c4:	ab48      	add	r3, sp, #288	; 0x120
 80041c6:	441d      	add	r5, r3
 80041c8:	f1b8 0f00 	cmp.w	r8, #0
 80041cc:	da3a      	bge.n	8004244 <__kernel_rem_pio2+0x5a8>
 80041ce:	9b00      	ldr	r3, [sp, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03e      	beq.n	8004252 <__kernel_rem_pio2+0x5b6>
 80041d4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80041d8:	4602      	mov	r2, r0
 80041da:	462b      	mov	r3, r5
 80041dc:	9d06      	ldr	r5, [sp, #24]
 80041de:	2601      	movs	r6, #1
 80041e0:	e9c5 2300 	strd	r2, r3, [r5]
 80041e4:	460b      	mov	r3, r1
 80041e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80041ea:	f7fb ffb5 	bl	8000158 <__aeabi_dsub>
 80041ee:	4684      	mov	ip, r0
 80041f0:	460f      	mov	r7, r1
 80041f2:	ad48      	add	r5, sp, #288	; 0x120
 80041f4:	42b4      	cmp	r4, r6
 80041f6:	f105 0508 	add.w	r5, r5, #8
 80041fa:	da2c      	bge.n	8004256 <__kernel_rem_pio2+0x5ba>
 80041fc:	9b00      	ldr	r3, [sp, #0]
 80041fe:	b10b      	cbz	r3, 8004204 <__kernel_rem_pio2+0x568>
 8004200:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004204:	4662      	mov	r2, ip
 8004206:	463b      	mov	r3, r7
 8004208:	9906      	ldr	r1, [sp, #24]
 800420a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800420e:	e7a4      	b.n	800415a <__kernel_rem_pio2+0x4be>
 8004210:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004212:	ab48      	add	r3, sp, #288	; 0x120
 8004214:	4637      	mov	r7, r6
 8004216:	441d      	add	r5, r3
 8004218:	2c00      	cmp	r4, #0
 800421a:	da09      	bge.n	8004230 <__kernel_rem_pio2+0x594>
 800421c:	9b00      	ldr	r3, [sp, #0]
 800421e:	b10b      	cbz	r3, 8004224 <__kernel_rem_pio2+0x588>
 8004220:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004224:	4632      	mov	r2, r6
 8004226:	463b      	mov	r3, r7
 8004228:	9906      	ldr	r1, [sp, #24]
 800422a:	e9c1 2300 	strd	r2, r3, [r1]
 800422e:	e794      	b.n	800415a <__kernel_rem_pio2+0x4be>
 8004230:	4630      	mov	r0, r6
 8004232:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004236:	4639      	mov	r1, r7
 8004238:	f7fb ff90 	bl	800015c <__adddf3>
 800423c:	3c01      	subs	r4, #1
 800423e:	4606      	mov	r6, r0
 8004240:	460f      	mov	r7, r1
 8004242:	e7e9      	b.n	8004218 <__kernel_rem_pio2+0x57c>
 8004244:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004248:	f7fb ff88 	bl	800015c <__adddf3>
 800424c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004250:	e7ba      	b.n	80041c8 <__kernel_rem_pio2+0x52c>
 8004252:	460d      	mov	r5, r1
 8004254:	e7c0      	b.n	80041d8 <__kernel_rem_pio2+0x53c>
 8004256:	4660      	mov	r0, ip
 8004258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800425c:	4639      	mov	r1, r7
 800425e:	f7fb ff7d 	bl	800015c <__adddf3>
 8004262:	3601      	adds	r6, #1
 8004264:	4684      	mov	ip, r0
 8004266:	460f      	mov	r7, r1
 8004268:	e7c4      	b.n	80041f4 <__kernel_rem_pio2+0x558>
 800426a:	e9da 6700 	ldrd	r6, r7, [sl]
 800426e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004272:	4632      	mov	r2, r6
 8004274:	463b      	mov	r3, r7
 8004276:	4640      	mov	r0, r8
 8004278:	4649      	mov	r1, r9
 800427a:	f7fb ff6f 	bl	800015c <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004286:	4640      	mov	r0, r8
 8004288:	4649      	mov	r1, r9
 800428a:	f7fb ff65 	bl	8000158 <__aeabi_dsub>
 800428e:	4632      	mov	r2, r6
 8004290:	463b      	mov	r3, r7
 8004292:	f7fb ff63 	bl	800015c <__adddf3>
 8004296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800429e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042a2:	e9ca 2300 	strd	r2, r3, [sl]
 80042a6:	e766      	b.n	8004176 <__kernel_rem_pio2+0x4da>
 80042a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80042ac:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fb ff50 	bl	800015c <__adddf3>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042c4:	4630      	mov	r0, r6
 80042c6:	4639      	mov	r1, r7
 80042c8:	f7fb ff46 	bl	8000158 <__aeabi_dsub>
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	f7fb ff44 	bl	800015c <__adddf3>
 80042d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042d8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80042dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042e0:	e9ca 2300 	strd	r2, r3, [sl]
 80042e4:	e74c      	b.n	8004180 <__kernel_rem_pio2+0x4e4>
 80042e6:	4638      	mov	r0, r7
 80042e8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80042ec:	4631      	mov	r1, r6
 80042ee:	f7fb ff35 	bl	800015c <__adddf3>
 80042f2:	3c01      	subs	r4, #1
 80042f4:	4607      	mov	r7, r0
 80042f6:	460e      	mov	r6, r1
 80042f8:	e748      	b.n	800418c <__kernel_rem_pio2+0x4f0>
 80042fa:	9b06      	ldr	r3, [sp, #24]
 80042fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004300:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004304:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004308:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800430c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004310:	601d      	str	r5, [r3, #0]
 8004312:	615e      	str	r6, [r3, #20]
 8004314:	e721      	b.n	800415a <__kernel_rem_pio2+0x4be>
 8004316:	bf00      	nop
 8004318:	41700000 	.word	0x41700000
 800431c:	3e700000 	.word	0x3e700000

08004320 <__kernel_sin>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	e9cd 2300 	strd	r2, r3, [sp]
 800432a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800432e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004332:	4682      	mov	sl, r0
 8004334:	460c      	mov	r4, r1
 8004336:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004338:	da03      	bge.n	8004342 <__kernel_sin+0x22>
 800433a:	f7fc fb5f 	bl	80009fc <__aeabi_d2iz>
 800433e:	2800      	cmp	r0, #0
 8004340:	d050      	beq.n	80043e4 <__kernel_sin+0xc4>
 8004342:	4652      	mov	r2, sl
 8004344:	4623      	mov	r3, r4
 8004346:	4650      	mov	r0, sl
 8004348:	4621      	mov	r1, r4
 800434a:	f7fc f8bd 	bl	80004c8 <__aeabi_dmul>
 800434e:	4606      	mov	r6, r0
 8004350:	460f      	mov	r7, r1
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4650      	mov	r0, sl
 8004358:	4621      	mov	r1, r4
 800435a:	f7fc f8b5 	bl	80004c8 <__aeabi_dmul>
 800435e:	a33e      	add	r3, pc, #248	; (adr r3, 8004458 <__kernel_sin+0x138>)
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	4680      	mov	r8, r0
 8004366:	4689      	mov	r9, r1
 8004368:	4630      	mov	r0, r6
 800436a:	4639      	mov	r1, r7
 800436c:	f7fc f8ac 	bl	80004c8 <__aeabi_dmul>
 8004370:	a33b      	add	r3, pc, #236	; (adr r3, 8004460 <__kernel_sin+0x140>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fb feef 	bl	8000158 <__aeabi_dsub>
 800437a:	4632      	mov	r2, r6
 800437c:	463b      	mov	r3, r7
 800437e:	f7fc f8a3 	bl	80004c8 <__aeabi_dmul>
 8004382:	a339      	add	r3, pc, #228	; (adr r3, 8004468 <__kernel_sin+0x148>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fb fee8 	bl	800015c <__adddf3>
 800438c:	4632      	mov	r2, r6
 800438e:	463b      	mov	r3, r7
 8004390:	f7fc f89a 	bl	80004c8 <__aeabi_dmul>
 8004394:	a336      	add	r3, pc, #216	; (adr r3, 8004470 <__kernel_sin+0x150>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb fedd 	bl	8000158 <__aeabi_dsub>
 800439e:	4632      	mov	r2, r6
 80043a0:	463b      	mov	r3, r7
 80043a2:	f7fc f891 	bl	80004c8 <__aeabi_dmul>
 80043a6:	a334      	add	r3, pc, #208	; (adr r3, 8004478 <__kernel_sin+0x158>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fb fed6 	bl	800015c <__adddf3>
 80043b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043b4:	b9dd      	cbnz	r5, 80043ee <__kernel_sin+0xce>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4630      	mov	r0, r6
 80043bc:	4639      	mov	r1, r7
 80043be:	f7fc f883 	bl	80004c8 <__aeabi_dmul>
 80043c2:	a32f      	add	r3, pc, #188	; (adr r3, 8004480 <__kernel_sin+0x160>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fb fec6 	bl	8000158 <__aeabi_dsub>
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	f7fc f87a 	bl	80004c8 <__aeabi_dmul>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4650      	mov	r0, sl
 80043da:	4621      	mov	r1, r4
 80043dc:	f7fb febe 	bl	800015c <__adddf3>
 80043e0:	4682      	mov	sl, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	4650      	mov	r0, sl
 80043e6:	4621      	mov	r1, r4
 80043e8:	b006      	add	sp, #24
 80043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ee:	2200      	movs	r2, #0
 80043f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <__kernel_sin+0x168>)
 80043f6:	f7fc f867 	bl	80004c8 <__aeabi_dmul>
 80043fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004402:	4640      	mov	r0, r8
 8004404:	4649      	mov	r1, r9
 8004406:	f7fc f85f 	bl	80004c8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004412:	f7fb fea1 	bl	8000158 <__aeabi_dsub>
 8004416:	4632      	mov	r2, r6
 8004418:	463b      	mov	r3, r7
 800441a:	f7fc f855 	bl	80004c8 <__aeabi_dmul>
 800441e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004422:	f7fb fe99 	bl	8000158 <__aeabi_dsub>
 8004426:	a316      	add	r3, pc, #88	; (adr r3, 8004480 <__kernel_sin+0x160>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	4606      	mov	r6, r0
 800442e:	460f      	mov	r7, r1
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fc f848 	bl	80004c8 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4630      	mov	r0, r6
 800443e:	4639      	mov	r1, r7
 8004440:	f7fb fe8c 	bl	800015c <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4650      	mov	r0, sl
 800444a:	4621      	mov	r1, r4
 800444c:	f7fb fe84 	bl	8000158 <__aeabi_dsub>
 8004450:	e7c6      	b.n	80043e0 <__kernel_sin+0xc0>
 8004452:	bf00      	nop
 8004454:	f3af 8000 	nop.w
 8004458:	5acfd57c 	.word	0x5acfd57c
 800445c:	3de5d93a 	.word	0x3de5d93a
 8004460:	8a2b9ceb 	.word	0x8a2b9ceb
 8004464:	3e5ae5e6 	.word	0x3e5ae5e6
 8004468:	57b1fe7d 	.word	0x57b1fe7d
 800446c:	3ec71de3 	.word	0x3ec71de3
 8004470:	19c161d5 	.word	0x19c161d5
 8004474:	3f2a01a0 	.word	0x3f2a01a0
 8004478:	1110f8a6 	.word	0x1110f8a6
 800447c:	3f811111 	.word	0x3f811111
 8004480:	55555549 	.word	0x55555549
 8004484:	3fc55555 	.word	0x3fc55555
 8004488:	3fe00000 	.word	0x3fe00000

0800448c <fabs>:
 800448c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004490:	4770      	bx	lr
 8004492:	0000      	movs	r0, r0
 8004494:	0000      	movs	r0, r0
	...

08004498 <scalbn>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800449e:	4604      	mov	r4, r0
 80044a0:	460d      	mov	r5, r1
 80044a2:	4617      	mov	r7, r2
 80044a4:	460b      	mov	r3, r1
 80044a6:	b996      	cbnz	r6, 80044ce <scalbn+0x36>
 80044a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80044ac:	4303      	orrs	r3, r0
 80044ae:	d039      	beq.n	8004524 <scalbn+0x8c>
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <scalbn+0xe8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	f7fc f808 	bl	80004c8 <__aeabi_dmul>
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <scalbn+0xec>)
 80044ba:	4604      	mov	r4, r0
 80044bc:	429f      	cmp	r7, r3
 80044be:	460d      	mov	r5, r1
 80044c0:	da0f      	bge.n	80044e2 <scalbn+0x4a>
 80044c2:	a32b      	add	r3, pc, #172	; (adr r3, 8004570 <scalbn+0xd8>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fb fffe 	bl	80004c8 <__aeabi_dmul>
 80044cc:	e006      	b.n	80044dc <scalbn+0x44>
 80044ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80044d2:	4296      	cmp	r6, r2
 80044d4:	d10a      	bne.n	80044ec <scalbn+0x54>
 80044d6:	4602      	mov	r2, r0
 80044d8:	f7fb fe40 	bl	800015c <__adddf3>
 80044dc:	4604      	mov	r4, r0
 80044de:	460d      	mov	r5, r1
 80044e0:	e020      	b.n	8004524 <scalbn+0x8c>
 80044e2:	460b      	mov	r3, r1
 80044e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80044e8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80044ec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80044f0:	19b9      	adds	r1, r7, r6
 80044f2:	4291      	cmp	r1, r2
 80044f4:	dd0e      	ble.n	8004514 <scalbn+0x7c>
 80044f6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80044fa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80044fe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004502:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004506:	4820      	ldr	r0, [pc, #128]	; (8004588 <scalbn+0xf0>)
 8004508:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800450c:	a31a      	add	r3, pc, #104	; (adr r3, 8004578 <scalbn+0xe0>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	e7d9      	b.n	80044c8 <scalbn+0x30>
 8004514:	2900      	cmp	r1, #0
 8004516:	dd08      	ble.n	800452a <scalbn+0x92>
 8004518:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800451c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004520:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800452e:	da12      	bge.n	8004556 <scalbn+0xbe>
 8004530:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004534:	429f      	cmp	r7, r3
 8004536:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800453a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800453e:	dcdc      	bgt.n	80044fa <scalbn+0x62>
 8004540:	a30b      	add	r3, pc, #44	; (adr r3, 8004570 <scalbn+0xd8>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800454a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800454e:	480f      	ldr	r0, [pc, #60]	; (800458c <scalbn+0xf4>)
 8004550:	f041 011f 	orr.w	r1, r1, #31
 8004554:	e7b8      	b.n	80044c8 <scalbn+0x30>
 8004556:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800455a:	3136      	adds	r1, #54	; 0x36
 800455c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004560:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004564:	4620      	mov	r0, r4
 8004566:	4629      	mov	r1, r5
 8004568:	2200      	movs	r2, #0
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <scalbn+0xf8>)
 800456c:	e7ac      	b.n	80044c8 <scalbn+0x30>
 800456e:	bf00      	nop
 8004570:	c2f8f359 	.word	0xc2f8f359
 8004574:	01a56e1f 	.word	0x01a56e1f
 8004578:	8800759c 	.word	0x8800759c
 800457c:	7e37e43c 	.word	0x7e37e43c
 8004580:	43500000 	.word	0x43500000
 8004584:	ffff3cb0 	.word	0xffff3cb0
 8004588:	8800759c 	.word	0x8800759c
 800458c:	c2f8f359 	.word	0xc2f8f359
 8004590:	3c900000 	.word	0x3c900000

08004594 <_init>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <_fini>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr
