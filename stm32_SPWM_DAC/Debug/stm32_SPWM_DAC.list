
stm32_SPWM_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005730  08005730  00015730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005930  08005930  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005930  08005930  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005930  08005930  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005938  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  20000014  0800594c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef8  0800594c  00021ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c941  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4a  00000000  00000000  0002c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0002f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8a  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dddf  00000000  00000000  000480ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e512  00000000  00000000  00055e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e43ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000e43fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08005714 	.word	0x08005714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08005714 	.word	0x08005714

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f000 ff49 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a96:	f000 f8bd 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 fb0b 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a9e:	f000 f989 	bl	8000db4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000aa2:	f000 fa3f 	bl	8000f24 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000aa6:	f000 f911 	bl	8000ccc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000aaa:	f000 fa9f 	bl	8000fec <MX_TIM3_Init>
  MX_SPI1_Init();
 8000aae:	f000 f94b 	bl	8000d48 <MX_SPI1_Init>
  //if(HAL_ADC_Start_IT(&hadc1) != HAL_OK) Error_Handler();

  //Start PWM generation
  //if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) Error_Handler();

  sineValuesGeneration();
 8000ab2:	f000 fb6d 	bl	8001190 <sineValuesGeneration>

  HAL_TIM_Base_Start_IT(&htim2);
 8000ab6:	4853      	ldr	r0, [pc, #332]	; (8000c04 <main+0x178>)
 8000ab8:	f002 fcbe 	bl	8003438 <HAL_TIM_Base_Start_IT>
  HAL_Delay(250);
 8000abc:	20fa      	movs	r0, #250	; 0xfa
 8000abe:	f000 ff95 	bl	80019ec <HAL_Delay>


  //HAL_SPI_Init(&hspi1);
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000ac2:	4851      	ldr	r0, [pc, #324]	; (8000c08 <main+0x17c>)
 8000ac4:	f002 f9fa 	bl	8002ebc <HAL_SPI_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <main+0x46>
	  // Initialization Error
	  Error_Handler();
 8000ace:	f000 fd13 	bl	80014f8 <Error_Handler>
  }
  //initializeDAC();

  // Ensure CS is initially high
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	484d      	ldr	r0, [pc, #308]	; (8000c0c <main+0x180>)
 8000ad8:	f001 fd2a 	bl	8002530 <HAL_GPIO_WritePin>

  // Activate CS line
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	484a      	ldr	r0, [pc, #296]	; (8000c0c <main+0x180>)
 8000ae2:	f001 fd25 	bl	8002530 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0b00001000}, 1, HAL_MAX_DELAY);
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	773b      	strb	r3, [r7, #28]
 8000aea:	f107 011c 	add.w	r1, r7, #28
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2201      	movs	r2, #1
 8000af4:	4844      	ldr	r0, [pc, #272]	; (8000c08 <main+0x17c>)
 8000af6:	f002 fa65 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 ff76 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0}, 1, HAL_MAX_DELAY);
 8000b00:	2300      	movs	r3, #0
 8000b02:	763b      	strb	r3, [r7, #24]
 8000b04:	f107 0118 	add.w	r1, r7, #24
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	483e      	ldr	r0, [pc, #248]	; (8000c08 <main+0x17c>)
 8000b10:	f002 fa58 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f000 ff69 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0}, 1, HAL_MAX_DELAY);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	753b      	strb	r3, [r7, #20]
 8000b1e:	f107 0114 	add.w	r1, r7, #20
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2201      	movs	r2, #1
 8000b28:	4837      	ldr	r0, [pc, #220]	; (8000c08 <main+0x17c>)
 8000b2a:	f002 fa4b 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 ff5c 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0b00000001}, 1, HAL_MAX_DELAY);
 8000b34:	2301      	movs	r3, #1
 8000b36:	743b      	strb	r3, [r7, #16]
 8000b38:	f107 0110 	add.w	r1, r7, #16
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2201      	movs	r2, #1
 8000b42:	4831      	ldr	r0, [pc, #196]	; (8000c08 <main+0x17c>)
 8000b44:	f002 fa3e 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 ff4f 	bl	80019ec <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2110      	movs	r1, #16
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <main+0x180>)
 8000b54:	f001 fcec 	bl	8002530 <HAL_GPIO_WritePin>

  // Activate CS line
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	482b      	ldr	r0, [pc, #172]	; (8000c0c <main+0x180>)
 8000b5e:	f001 fce7 	bl	8002530 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0b00000011}, 1, HAL_MAX_DELAY);
 8000b62:	2303      	movs	r3, #3
 8000b64:	733b      	strb	r3, [r7, #12]
 8000b66:	f107 010c 	add.w	r1, r7, #12
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <main+0x17c>)
 8000b72:	f002 fa27 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 ff38 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0b11110000}, 1, HAL_MAX_DELAY);
 8000b7c:	23f0      	movs	r3, #240	; 0xf0
 8000b7e:	723b      	strb	r3, [r7, #8]
 8000b80:	f107 0108 	add.w	r1, r7, #8
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	2201      	movs	r2, #1
 8000b8a:	481f      	ldr	r0, [pc, #124]	; (8000c08 <main+0x17c>)
 8000b8c:	f002 fa1a 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 ff2b 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0}, 1, HAL_MAX_DELAY);
 8000b96:	2300      	movs	r3, #0
 8000b98:	713b      	strb	r3, [r7, #4]
 8000b9a:	1d39      	adds	r1, r7, #4
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <main+0x17c>)
 8000ba4:	f002 fa0e 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 ff1f 	bl	80019ec <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, (uint8_t[]){0}, 1, HAL_MAX_DELAY);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	703b      	strb	r3, [r7, #0]
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <main+0x17c>)
 8000bbc:	f002 fa02 	bl	8002fc4 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 ff13 	bl	80019ec <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <main+0x180>)
 8000bcc:	f001 fcb0 	bl	8002530 <HAL_GPIO_WritePin>

  //HAL_TIM_Base_Start_IT(&htim3);
  //HAL_Delay(250);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <main+0x184>)
 8000bd4:	f002 fcda 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <main+0x184>)
 8000bdc:	f003 fba6 	bl	800432c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000be0:	2104      	movs	r1, #4
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <main+0x184>)
 8000be4:	f002 fcd2 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <main+0x184>)
 8000bec:	f003 fb9e 	bl	800432c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <main+0x184>)
 8000bf4:	f002 fcca 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <main+0x184>)
 8000bfc:	f003 fb96 	bl	800432c <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <main+0x174>
 8000c02:	bf00      	nop
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000060 	.word	0x20000060
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	200000b8 	.word	0x200000b8

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	2228      	movs	r2, #40	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fd2a 	bl	800467c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c52:	2301      	movs	r3, #1
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fc92 	bl	8002594 <HAL_RCC_OscConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c76:	f000 fc3f 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2102      	movs	r1, #2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fefe 	bl	8002a98 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ca2:	f000 fc29 	bl	80014f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f84c 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cbe:	f000 fc1b 	bl	80014f8 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <MX_ADC1_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000d0a:	f000 fe93 	bl	8001a34 <HAL_ADC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 fbf0 	bl	80014f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_ADC1_Init+0x74>)
 8000d2a:	f001 f82d 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d34:	f000 fbe0 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000030 	.word	0x20000030
 8000d44:	40012400 	.word	0x40012400

08000d48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <MX_SPI1_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d9a:	f002 f88f 	bl	8002ebc <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000da4:	f000 fba8 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000060 	.word	0x20000060
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2220      	movs	r2, #32
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fc45 	bl	800467c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df2:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000df4:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <MX_TIM1_Init+0x16c>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df8:	4b48      	ldr	r3, [pc, #288]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000dfe:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e00:	2260      	movs	r2, #96	; 0x60
 8000e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 959;
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e06:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1e:	483f      	ldr	r0, [pc, #252]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e20:	f002 faba 	bl	8003398 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e2a:	f000 fb65 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4838      	ldr	r0, [pc, #224]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e3c:	f002 fe12 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e46:	f000 fb57 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e4a:	4834      	ldr	r0, [pc, #208]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e4c:	f002 fb46 	bl	80034dc <HAL_TIM_PWM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e56:	f000 fb4f 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e66:	4619      	mov	r1, r3
 8000e68:	482c      	ldr	r0, [pc, #176]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e6a:	f003 fafd 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e74:	f000 fb40 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e78:	2360      	movs	r3, #96	; 0x60
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481f      	ldr	r0, [pc, #124]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000e9e:	f002 fd1f 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ea8:	f000 fb26 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4819      	ldr	r0, [pc, #100]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000eb6:	f002 fd13 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ec0:	f000 fb1a 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000ece:	f002 fd07 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ed8:	f000 fb0e 	bl	80014f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 172;
 8000ee8:	23ac      	movs	r3, #172	; 0xac
 8000eea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000f00:	f003 fb10 	bl	8004524 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000f0a:	f000 faf5 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM1_Init+0x168>)
 8000f10:	f000 fc18 	bl	8001744 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3758      	adds	r7, #88	; 0x58
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000b8 	.word	0x200000b8
 8000f20:	40012c00 	.word	0x40012c00

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f60:	2260      	movs	r2, #96	; 0x60
 8000f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 959;
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f66:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f7a:	f002 fa0d 	bl	8003398 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000f84:	f000 fab8 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000f96:	f002 fd65 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fa0:	f000 faaa 	bl	80014f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000fb4:	f002 fe1d 	bl	8003bf2 <HAL_TIM_SlaveConfigSynchro>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000fbe:	f000 fa9b 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_TIM2_Init+0xc4>)
 8000fd0:	f003 fa4a 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000fda:	f000 fa8d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000100 	.word	0x20000100

08000fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_TIM3_Init+0xc0>)
 800101a:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <MX_TIM3_Init+0xc4>)
 800101c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_TIM3_Init+0xc0>)
 8001020:	2201      	movs	r2, #1
 8001022:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_TIM3_Init+0xc0>)
 8001026:	2260      	movs	r2, #96	; 0x60
 8001028:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_TIM3_Init+0xc0>)
 800102c:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001030:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_TIM3_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_TIM3_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800103e:	481b      	ldr	r0, [pc, #108]	; (80010ac <MX_TIM3_Init+0xc0>)
 8001040:	f002 f9aa 	bl	8003398 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800104a:	f000 fa55 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM3_Init+0xc0>)
 800105c:	f002 fd02 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001066:	f000 fa47 	bl	80014f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800106a:	2306      	movs	r3, #6
 800106c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM3_Init+0xc0>)
 800107a:	f002 fdba 	bl	8003bf2 <HAL_TIM_SlaveConfigSynchro>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001084:	f000 fa38 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001088:	2320      	movs	r3, #32
 800108a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_TIM3_Init+0xc0>)
 8001096:	f003 f9e7 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80010a0:	f000 fa2a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000148 	.word	0x20000148
 80010b0:	40000400 	.word	0x40000400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a2c      	ldr	r2, [pc, #176]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <MX_GPIO_Init+0xcc>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_GPIO_Init+0xcc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_GPIO_Init+0xcc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <MX_GPIO_Init+0xcc>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_GPIO_Init+0xcc>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	4815      	ldr	r0, [pc, #84]	; (8001184 <MX_GPIO_Init+0xd0>)
 8001130:	f001 f9fe 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2110      	movs	r1, #16
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_GPIO_Init+0xd4>)
 800113a:	f001 f9f9 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <MX_GPIO_Init+0xd0>)
 8001158:	f001 f866 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800115c:	2310      	movs	r3, #16
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001174:	f001 f858 	bl	8002228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	40011000 	.word	0x40011000
 8001188:	40010c00 	.word	0x40010c00
 800118c:	00000000 	.word	0x00000000

08001190 <sineValuesGeneration>:

/**
  * @brief  This function pre-generates the sine values for modulator signal.
  * @retval None
  */
void sineValuesGeneration(void){
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
	// Executed only one time at the start of the program

	// Number of samples for one period
	N  = floor(2*FSW/freq);  // For generated frequency (f).
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <sineValuesGeneration+0x130>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	a140      	add	r1, pc, #256	; (adr r1, 80012a0 <sineValuesGeneration+0x110>)
 800119e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011a2:	f7ff fabb 	bl	800071c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f003 fa6f 	bl	8004690 <floor>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc47 	bl	8000a4c <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <sineValuesGeneration+0x134>)
 80011c2:	6013      	str	r3, [r2, #0]
	N_old = N;
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <sineValuesGeneration+0x134>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <sineValuesGeneration+0x138>)
 80011ca:	6013      	str	r3, [r2, #0]

	// Number of samples for phase shifts (with reference to f0)
	phaseB = 1*N0/3 + phaseA;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80011d2:	3308      	adds	r3, #8
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <sineValuesGeneration+0x13c>)
 80011d8:	801a      	strh	r2, [r3, #0]
	phaseC = 2*N0/3 + phaseA;
 80011da:	2300      	movs	r3, #0
 80011dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80011e0:	3310      	adds	r3, #16
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <sineValuesGeneration+0x140>)
 80011e6:	801a      	strh	r2, [r3, #0]

	// Generation of sinusoidal reference wave
	for(uint16_t i = 0; i <= N0/4; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	80fb      	strh	r3, [r7, #6]
 80011ec:	e04b      	b.n	8001286 <sineValuesGeneration+0xf6>
		//sinValues[i] = round(959.00*(0.5*m*sin(i*(double)2*PI/(double)N0)+0.5));
		sinValues[i] = round(959.00*(0.5*sin(i*2.0*PI/N0)+0.5));
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f8ff 	bl	80003f4 <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f7fe ffaf 	bl	800015c <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a328      	add	r3, pc, #160	; (adr r3, 80012a8 <sineValuesGeneration+0x118>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff f95c 	bl	80004c8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	a325      	add	r3, pc, #148	; (adr r3, 80012b0 <sineValuesGeneration+0x120>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fa7d 	bl	800071c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f003 faf9 	bl	8004820 <sin>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <sineValuesGeneration+0x144>)
 8001234:	f7ff f948 	bl	80004c8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <sineValuesGeneration+0x144>)
 8001246:	f7fe ff89 	bl	800015c <__adddf3>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	a319      	add	r3, pc, #100	; (adr r3, 80012b8 <sineValuesGeneration+0x128>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f936 	bl	80004c8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f003 fa94 	bl	8004790 <round>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	88fc      	ldrh	r4, [r7, #6]
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fbc3 	bl	80009fc <__aeabi_d2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <sineValuesGeneration+0x148>)
 800127c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint16_t i = 0; i <= N0/4; i++){
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3301      	adds	r3, #1
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	f640 62a6 	movw	r2, #3750	; 0xea6
 800128c:	4293      	cmp	r3, r2
 800128e:	d9ae      	bls.n	80011ee <sineValuesGeneration+0x5e>
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40f24f80 	.word	0x40f24f80
 80012a8:	54442d18 	.word	0x54442d18
 80012ac:	400921fb 	.word	0x400921fb
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40cd4c00 	.word	0x40cd4c00
 80012b8:	00000000 	.word	0x00000000
 80012bc:	408df800 	.word	0x408df800
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20001ee8 	.word	0x20001ee8
 80012c8:	20001eec 	.word	0x20001eec
 80012cc:	20001ef0 	.word	0x20001ef0
 80012d0:	20001ef2 	.word	0x20001ef2
 80012d4:	3fe00000 	.word	0x3fe00000
 80012d8:	20000190 	.word	0x20000190
 80012dc:	00000000 	.word	0x00000000

080012e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim2.Instance) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 80a7 	bne.w	8001444 <HAL_TIM_PeriodElapsedCallback+0x164>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fa:	4858      	ldr	r0, [pc, #352]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80012fc:	f001 f930 	bl	8002560 <HAL_GPIO_TogglePin>
		//Time between executions: 1/(2*FSW) = 13 us

		// Conditioning of counter
		counter0 = round((double)N0*(double)counter/(double)N);
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f865 	bl	80003d4 <__aeabi_ui2d>
 800130a:	a351      	add	r3, pc, #324	; (adr r3, 8001450 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f8da 	bl	80004c8 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f857 	bl	80003d4 <__aeabi_ui2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f9f5 	bl	800071c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f003 fa29 	bl	8004790 <round>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb81 	bl	8000a4c <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800134e:	6013      	str	r3, [r2, #0]
		//m*sin() + (959/2)*(1 - m)

		//offset = round((479.5)*(1.0 - m));

		// Phase detection (A)
		i_aux = (counter0 + phaseA) % N0;
 8001350:	2300      	movs	r3, #0
 8001352:	461a      	mov	r2, r3
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	441a      	add	r2, r3
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800135c:	fba3 1302 	umull	r1, r3, r3, r2
 8001360:	0b1b      	lsrs	r3, r3, #12
 8001362:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001370:	801a      	strh	r2, [r3, #0]
		if (i_aux <= N0/4){
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	f640 62a6 	movw	r2, #3750	; 0xea6
 800137a:	4293      	cmp	r3, r2
 800137c:	d80b      	bhi.n	8001396 <HAL_TIM_PeriodElapsedCallback+0xb6>
			//TIM1->CCR1 = sinValues[i_aux];
			writeValueDAC(0b0000, sinValues[i_aux]);
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001386:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f872 	bl	8001478 <writeValueDAC>
 8001394:	e048      	b.n	8001428 <HAL_TIM_PeriodElapsedCallback+0x148>
		}
		else if((i_aux > N0/4)&&(i_aux < N0/2)){
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	f640 62a6 	movw	r2, #3750	; 0xea6
 800139e:	4293      	cmp	r3, r2
 80013a0:	d913      	bls.n	80013ca <HAL_TIM_PeriodElapsedCallback+0xea>
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d80d      	bhi.n	80013ca <HAL_TIM_PeriodElapsedCallback+0xea>
			//TIM1->CCR1 = sinValues[(N0/2 - i_aux)];
			writeValueDAC(0b0000, sinValues[(N0/2 - i_aux)]);
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	f5c3 53ea 	rsb	r3, r3, #7488	; 0x1d40
 80013b6:	330c      	adds	r3, #12
 80013b8:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80013ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f858 	bl	8001478 <writeValueDAC>
 80013c8:	e02e      	b.n	8001428 <HAL_TIM_PeriodElapsedCallback+0x148>
		}
		else if ((i_aux >= N0/2)&&(i_aux <= 3*N0/4)){
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d917      	bls.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x126>
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 80013de:	4293      	cmp	r3, r2
 80013e0:	d811      	bhi.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x126>
			//TIM1->CCR1 = (959-sinValues[(i_aux - N0/2)]);
			writeValueDAC(0b0000, (959-sinValues[(i_aux - N0/2)]));
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	f5a3 53ea 	sub.w	r3, r3, #7488	; 0x1d40
 80013ea:	3b0c      	subs	r3, #12
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80013ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 80013f8:	3303      	adds	r3, #3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f83a 	bl	8001478 <writeValueDAC>
 8001404:	e010      	b.n	8001428 <HAL_TIM_PeriodElapsedCallback+0x148>
		}
		else{
			//TIM1->CCR1 = (959-sinValues[(N0 - i_aux)]);
			writeValueDAC(0b0000, (959-sinValues[(N0 - i_aux)]));
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 800140e:	3318      	adds	r3, #24
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001412:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001416:	b29b      	uxth	r3, r3
 8001418:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 800141c:	3303      	adds	r3, #3
 800141e:	b29b      	uxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f828 	bl	8001478 <writeValueDAC>
//		//else if (i_aux > 3*N0/4){
//		else{
//			TIM1->CCR3 = (959-sinValues[(N0 - i_aux3)]);
//		}

		counter++;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001430:	6013      	str	r3, [r2, #0]
		if(counter >= N) counter = 0;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d302      	bcc.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x164>
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	}
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	00000000 	.word	0x00000000
 8001454:	40cd4c00 	.word	0x40cd4c00
 8001458:	20000100 	.word	0x20000100
 800145c:	40011000 	.word	0x40011000
 8001460:	20001ee0 	.word	0x20001ee0
 8001464:	20001ee8 	.word	0x20001ee8
 8001468:	20001ee4 	.word	0x20001ee4
 800146c:	45e7b273 	.word	0x45e7b273
 8001470:	20001ede 	.word	0x20001ede
 8001474:	20000190 	.word	0x20000190

08001478 <writeValueDAC>:
//	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
//	HAL_SPI_Transmit(&hspi1, data, 4, 100);
//	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
//}

void writeValueDAC(uint8_t address, uint16_t value) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	80bb      	strh	r3, [r7, #4]
    uint8_t data[4];

    // Primero 4 bits vacíos y comando de escritura
    data[0] = 0b00000000 | 0b0011;
 8001488:	2303      	movs	r3, #3
 800148a:	733b      	strb	r3, [r7, #12]
    // Dirección y primeros 4 bits de datos
    data[1] = (address << 4) | ((0xF00 & value) >> 8);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b25a      	sxtb	r2, r3
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	737b      	strb	r3, [r7, #13]
    // Últimos 8 bits de datos
    data[2] = 0x0FF & value;
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73bb      	strb	r3, [r7, #14]
    // Últimos 8 bits vacíos
    data[3] = 0b00000000;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]

    // Activar línea CS
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2110      	movs	r1, #16
 80014b6:	480e      	ldr	r0, [pc, #56]	; (80014f0 <writeValueDAC+0x78>)
 80014b8:	f001 f83a 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 fa95 	bl	80019ec <HAL_Delay>

    // Transmitir datos por SPI
    HAL_SPI_Transmit(&hspi1, data, 4, HAL_MAX_DELAY);
 80014c2:	f107 010c 	add.w	r1, r7, #12
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	2204      	movs	r2, #4
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <writeValueDAC+0x7c>)
 80014ce:	f001 fd79 	bl	8002fc4 <HAL_SPI_Transmit>
    HAL_Delay(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f000 fa8a 	bl	80019ec <HAL_Delay>

    // Desactivar línea CS
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2110      	movs	r1, #16
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <writeValueDAC+0x78>)
 80014de:	f001 f827 	bl	8002530 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fa82 	bl	80019ec <HAL_Delay>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	20000060 	.word	0x20000060

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_MspInit+0x40>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_MspInit+0x40>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_MspInit+0x40>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_MspInit+0x40>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_MspInit+0x40>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_MspInit+0x40>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_ADC_MspInit+0x7c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d129      	bne.n	80015bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_ADC_MspInit+0x80>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2303      	movs	r3, #3
 800159e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_ADC_MspInit+0x84>)
 80015a8:	f000 fe3e 	bl	8002228 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2012      	movs	r0, #18
 80015b2:	f000 fe02 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015b6:	2012      	movs	r0, #18
 80015b8:	f000 fe1b 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40012400 	.word	0x40012400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010800 	.word	0x40010800

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_SPI_MspInit+0x8c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d131      	bne.n	8001654 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_SPI_MspInit+0x90>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_SPI_MspInit+0x90>)
 80015f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_SPI_MspInit+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_SPI_MspInit+0x90>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_SPI_MspInit+0x90>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_SPI_MspInit+0x90>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001620:	2328      	movs	r3, #40	; 0x28
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <HAL_SPI_MspInit+0x94>)
 8001634:	f000 fdf8 	bl	8002228 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_SPI_MspInit+0x98>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_SPI_MspInit+0x98>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40021000 	.word	0x40021000
 8001664:	40010c00 	.word	0x40010c00
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <HAL_TIM_Base_MspInit+0xcc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d124      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 8001684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2019      	movs	r0, #25
 800169c:	f000 fd8d 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016a0:	2019      	movs	r0, #25
 80016a2:	f000 fda6 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201a      	movs	r0, #26
 80016ac:	f000 fd85 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80016b0:	201a      	movs	r0, #26
 80016b2:	f000 fd9e 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	201b      	movs	r0, #27
 80016bc:	f000 fd7d 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016c0:	201b      	movs	r0, #27
 80016c2:	f000 fd96 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016c6:	e032      	b.n	800172e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	d114      	bne.n	80016fc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	201c      	movs	r0, #28
 80016f0:	f000 fd63 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016f4:	201c      	movs	r0, #28
 80016f6:	f000 fd7c 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 80016fa:	e018      	b.n	800172e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_TIM_Base_MspInit+0xd4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d113      	bne.n	800172e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_TIM_Base_MspInit+0xd0>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	201d      	movs	r0, #29
 8001724:	f000 fd49 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001728:	201d      	movs	r0, #29
 800172a:	f000 fd62 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40012c00 	.word	0x40012c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40000400 	.word	0x40000400

08001744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_TIM_MspPostInit+0xb0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d142      	bne.n	80017ea <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_TIM_MspPostInit+0xb4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001794:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4814      	ldr	r0, [pc, #80]	; (80017fc <HAL_TIM_MspPostInit+0xb8>)
 80017aa:	f000 fd3d 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ae:	2303      	movs	r3, #3
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <HAL_TIM_MspPostInit+0xbc>)
 80017c2:	f000 fd31 	bl	8002228 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_TIM_MspPostInit+0xc0>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_TIM_MspPostInit+0xc0>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40010000 	.word	0x40010000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f8b1 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <ADC1_2_IRQHandler+0x10>)
 800185e:	f000 f9c1 	bl	8001be4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000030 	.word	0x20000030

0800186c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM1_UP_IRQHandler+0x10>)
 8001872:	f001 ff2d 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000b8 	.word	0x200000b8

08001880 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001886:	f001 ff23 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000b8 	.word	0x200000b8

08001894 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM1_CC_IRQHandler+0x10>)
 800189a:	f001 ff19 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000b8 	.word	0x200000b8

080018a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM2_IRQHandler+0x10>)
 80018ae:	f001 ff0f 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000100 	.word	0x20000100

080018bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM3_IRQHandler+0x10>)
 80018c2:	f001 ff05 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000148 	.word	0x20000148

080018d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff fff8 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018e2:	490c      	ldr	r1, [pc, #48]	; (8001914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018f8:	4c09      	ldr	r4, [pc, #36]	; (8001920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f002 fe95 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190a:	f7ff f8bf 	bl	8000a8c <main>
  bx lr
 800190e:	4770      	bx	lr
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001918:	08005938 	.word	0x08005938
  ldr r2, =_sbss
 800191c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001920:	20001ef8 	.word	0x20001ef8

08001924 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <CAN1_RX1_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x28>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 fc33 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fdde 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fc4b 	bl	800220e <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 fc13 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000010 	.word	0x20000010
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x1c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_IncTick+0x20>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_IncTick+0x20>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000010 	.word	0x20000010
 80019d4:	20001ef4 	.word	0x20001ef4

080019d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_GetTick+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20001ef4 	.word	0x20001ef4

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff fff0 	bl	80019d8 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffe0 	bl	80019d8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010

08001a34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0be      	b.n	8001bd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fd68 	bl	8001548 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fa7d 	bl	8001f78 <ADC_ConversionStop_Disable>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8099 	bne.w	8001bc2 <HAL_ADC_Init+0x18e>
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8095 	bne.w	8001bc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f043 0202 	orr.w	r2, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b1b      	ldrb	r3, [r3, #12]
 8001aba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001abc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001acc:	d003      	beq.n	8001ad6 <HAL_ADC_Init+0xa2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_ADC_Init+0xa8>
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	e000      	b.n	8001ade <HAL_ADC_Init+0xaa>
 8001adc:	2300      	movs	r3, #0
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7d1b      	ldrb	r3, [r3, #20]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d119      	bne.n	8001b20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7b1b      	ldrb	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	035a      	lsls	r2, r3, #13
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	e00b      	b.n	8001b20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f043 0220 	orr.w	r2, r3, #32
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_ADC_Init+0x1a8>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b50:	d003      	beq.n	8001b5a <HAL_ADC_Init+0x126>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d104      	bne.n	8001b64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	051b      	lsls	r3, r3, #20
 8001b62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_ADC_Init+0x1ac>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10b      	bne.n	8001ba0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b9e:	e018      	b.n	8001bd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f023 0312 	bic.w	r3, r3, #18
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc0:	e007      	b.n	8001bd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	ffe1f7fd 	.word	0xffe1f7fd
 8001be0:	ff1f0efe 	.word	0xff1f0efe

08001be4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03e      	beq.n	8001c84 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d039      	beq.n	8001c84 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c36:	d11d      	bne.n	8001c74 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d119      	bne.n	8001c74 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0220 	bic.w	r2, r2, #32
 8001c4e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f874 	bl	8001d62 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0212 	mvn.w	r2, #18
 8001c82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04d      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d048      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001cba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001cbe:	d012      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d125      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cdc:	d11d      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f96d 	bl	8001ffa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 020c 	mvn.w	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f812 	bl	8001d74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0201 	mvn.w	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x20>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0dc      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x1da>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d81c      	bhi.n	8001df2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b05      	subs	r3, #5
 8001dca:	221f      	movs	r2, #31
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4019      	ands	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
 8001df0:	e03c      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d81c      	bhi.n	8001e34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b23      	subs	r3, #35	; 0x23
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4019      	ands	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b23      	subs	r3, #35	; 0x23
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
 8001e32:	e01b      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b41      	subs	r3, #65	; 0x41
 8001e46:	221f      	movs	r2, #31
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b41      	subs	r3, #65	; 0x41
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d91c      	bls.n	8001eae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1e      	subs	r3, #30
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	e019      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6919      	ldr	r1, [r3, #16]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d003      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eee:	2b11      	cmp	r3, #17
 8001ef0:	d132      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d125      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d126      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d11a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x1b2>
 8001f46:	e007      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40012400 	.word	0x40012400
 8001f70:	20000008 	.word	0x20000008
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12e      	bne.n	8001ff0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fa2:	f7ff fd19 	bl	80019d8 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fa8:	e01b      	b.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001faa:	f7ff fd15 	bl	80019d8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d914      	bls.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10d      	bne.n	8001fe2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d0dc      	beq.n	8001faa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4906      	ldr	r1, [pc, #24]	; (80020a4 <__NVIC_EnableIRQ+0x34>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff90 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff2d 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff42 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff90 	bl	80020fc <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5f 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff35 	bl	8002070 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b08b      	sub	sp, #44	; 0x2c
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e169      	b.n	8002510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800223c:	2201      	movs	r2, #1
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8158 	bne.w	800250a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a9a      	ldr	r2, [pc, #616]	; (80024c8 <HAL_GPIO_Init+0x2a0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d05e      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002264:	4a98      	ldr	r2, [pc, #608]	; (80024c8 <HAL_GPIO_Init+0x2a0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d875      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800226a:	4a98      	ldr	r2, [pc, #608]	; (80024cc <HAL_GPIO_Init+0x2a4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d058      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002270:	4a96      	ldr	r2, [pc, #600]	; (80024cc <HAL_GPIO_Init+0x2a4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d86f      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 8002276:	4a96      	ldr	r2, [pc, #600]	; (80024d0 <HAL_GPIO_Init+0x2a8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d052      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 800227c:	4a94      	ldr	r2, [pc, #592]	; (80024d0 <HAL_GPIO_Init+0x2a8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d869      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 8002282:	4a94      	ldr	r2, [pc, #592]	; (80024d4 <HAL_GPIO_Init+0x2ac>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04c      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002288:	4a92      	ldr	r2, [pc, #584]	; (80024d4 <HAL_GPIO_Init+0x2ac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d863      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800228e:	4a92      	ldr	r2, [pc, #584]	; (80024d8 <HAL_GPIO_Init+0x2b0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d046      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002294:	4a90      	ldr	r2, [pc, #576]	; (80024d8 <HAL_GPIO_Init+0x2b0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d85d      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800229a:	2b12      	cmp	r3, #18
 800229c:	d82a      	bhi.n	80022f4 <HAL_GPIO_Init+0xcc>
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d859      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_GPIO_Init+0x80>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002323 	.word	0x08002323
 80022ac:	080022fd 	.word	0x080022fd
 80022b0:	0800230f 	.word	0x0800230f
 80022b4:	08002351 	.word	0x08002351
 80022b8:	08002357 	.word	0x08002357
 80022bc:	08002357 	.word	0x08002357
 80022c0:	08002357 	.word	0x08002357
 80022c4:	08002357 	.word	0x08002357
 80022c8:	08002357 	.word	0x08002357
 80022cc:	08002357 	.word	0x08002357
 80022d0:	08002357 	.word	0x08002357
 80022d4:	08002357 	.word	0x08002357
 80022d8:	08002357 	.word	0x08002357
 80022dc:	08002357 	.word	0x08002357
 80022e0:	08002357 	.word	0x08002357
 80022e4:	08002357 	.word	0x08002357
 80022e8:	08002357 	.word	0x08002357
 80022ec:	08002305 	.word	0x08002305
 80022f0:	08002319 	.word	0x08002319
 80022f4:	4a79      	ldr	r2, [pc, #484]	; (80024dc <HAL_GPIO_Init+0x2b4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022fa:	e02c      	b.n	8002356 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e029      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	3304      	adds	r3, #4
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e024      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	3308      	adds	r3, #8
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e01f      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	330c      	adds	r3, #12
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e01a      	b.n	8002358 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800232a:	2304      	movs	r3, #4
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e013      	b.n	8002358 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002338:	2308      	movs	r3, #8
 800233a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	611a      	str	r2, [r3, #16]
          break;
 8002342:	e009      	b.n	8002358 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002344:	2308      	movs	r3, #8
 8002346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	615a      	str	r2, [r3, #20]
          break;
 800234e:	e003      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x130>
          break;
 8002356:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d801      	bhi.n	8002362 <HAL_GPIO_Init+0x13a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_Init+0x13e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d802      	bhi.n	8002374 <HAL_GPIO_Init+0x14c>
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x152>
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3b08      	subs	r3, #8
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	210f      	movs	r1, #15
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80b1 	beq.w	800250a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c0:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <HAL_GPIO_Init+0x2bc>)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <HAL_GPIO_Init+0x2c0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_GPIO_Init+0x1ec>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <HAL_GPIO_Init+0x2c4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00d      	beq.n	8002410 <HAL_GPIO_Init+0x1e8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <HAL_GPIO_Init+0x2c8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <HAL_GPIO_Init+0x1e4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <HAL_GPIO_Init+0x2cc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_GPIO_Init+0x1e0>
 8002404:	2303      	movs	r3, #3
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002408:	2304      	movs	r3, #4
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002414:	2300      	movs	r3, #0
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002426:	492f      	ldr	r1, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x2bc>)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	492c      	ldr	r1, [pc, #176]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	43db      	mvns	r3, r3
 8002456:	4928      	ldr	r1, [pc, #160]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002458:	4013      	ands	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	491e      	ldr	r1, [pc, #120]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4918      	ldr	r1, [pc, #96]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4914      	ldr	r1, [pc, #80]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d021      	beq.n	80024fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e021      	b.n	800250a <HAL_GPIO_Init+0x2e2>
 80024c6:	bf00      	nop
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10310000 	.word	0x10310000
 80024d0:	10220000 	.word	0x10220000
 80024d4:	10210000 	.word	0x10210000
 80024d8:	10120000 	.word	0x10120000
 80024dc:	10110000 	.word	0x10110000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40010800 	.word	0x40010800
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_GPIO_Init+0x304>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	43db      	mvns	r3, r3
 8002504:	4909      	ldr	r1, [pc, #36]	; (800252c <HAL_GPIO_Init+0x304>)
 8002506:	4013      	ands	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3301      	adds	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f ae8e 	bne.w	800223c <HAL_GPIO_Init+0x14>
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	372c      	adds	r7, #44	; 0x2c
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43d9      	mvns	r1, r3
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	400b      	ands	r3, r1
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e272      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d00c      	beq.n	80025da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d112      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x12c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d168      	bne.n	80026c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e24c      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x76>
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e02e      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b7b      	ldr	r3, [pc, #492]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7a      	ldr	r2, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b78      	ldr	r3, [pc, #480]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a77      	ldr	r2, [pc, #476]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0xbc>
 8002636:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a71      	ldr	r2, [pc, #452]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 8002650:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a67      	ldr	r2, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff f9b2 	bl	80019d8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff f9ae 	bl	80019d8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e200      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xe4>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff f99e 	bl	80019d8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff f99a 	bl	80019d8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1ec      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x10c>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1c0      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4939      	ldr	r1, [pc, #228]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff f953 	bl	80019d8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7ff f94f 	bl	80019d8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1a1      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4927      	ldr	r1, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff f932 	bl	80019d8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002778:	f7ff f92e 	bl	80019d8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e180      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03a      	beq.n	8002818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff f912 	bl	80019d8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7ff f90e 	bl	80019d8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e160      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f000 fa9c 	bl	8002d14 <RCC_Delay>
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7ff f8f8 	bl	80019d8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	e00f      	b.n	800280c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff f8f4 	bl	80019d8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d908      	bls.n	800280c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e146      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	42420000 	.word	0x42420000
 8002808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e9      	bne.n	80027ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a6 	beq.w	8002972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7e      	ldr	r2, [pc, #504]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7ff f8b5 	bl	80019d8 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7ff f8b1 	bl	80019d8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e103      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x4c8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x312>
 8002898:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	e02d      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x334>
 80028ae:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a69      	ldr	r2, [pc, #420]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x356>
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a5a      	ldr	r2, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff f865 	bl	80019d8 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff f861 	bl	80019d8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0b1      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x37e>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff f84f 	bl	80019d8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7ff f84b 	bl	80019d8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e09b      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d061      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d146      	bne.n	8002a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff f81f 	bl	80019d8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7ff f81b 	bl	80019d8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e06d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4921      	ldr	r1, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a19      	ldr	r1, [r3, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	430b      	orrs	r3, r1
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe ffef 	bl	80019d8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe ffeb 	bl	80019d8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e03d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x46a>
 8002a1c:	e035      	b.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe ffd8 	bl	80019d8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe ffd4 	bl	80019d8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e026      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x498>
 8002a4a:	e01e      	b.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e019      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x500>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0d0      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4965      	ldr	r1, [pc, #404]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d040      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d115      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e073      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4936      	ldr	r1, [pc, #216]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fe ff26 	bl	80019d8 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe ff22 	bl	80019d8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e053      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d210      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4922      	ldr	r1, [pc, #136]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f821 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1cc>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1d0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fe84 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40022000 	.word	0x40022000
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08005730 	.word	0x08005730
 8002c64:	20000008 	.word	0x20000008
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x30>
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8002c9a:	e027      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	e027      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0c9b      	lsrs	r3, r3, #18
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0c5b      	lsrs	r3, r3, #17
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cce:	fb03 f202 	mul.w	r2, r3, r2
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e004      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cee:	613b      	str	r3, [r7, #16]
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	693b      	ldr	r3, [r7, #16]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	007a1200 	.word	0x007a1200
 8002d08:	08005740 	.word	0x08005740
 8002d0c:	08005750 	.word	0x08005750
 8002d10:	003d0900 	.word	0x003d0900

08002d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <RCC_Delay+0x34>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <RCC_Delay+0x38>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a5b      	lsrs	r3, r3, #9
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d30:	bf00      	nop
  }
  while (Delay --);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	60fa      	str	r2, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <RCC_Delay+0x1c>
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fe12 	bl	80019d8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fe0e 	bl	80019d8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d027      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fddd 	bl	80019d8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fdd9 	bl	80019d8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e036      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420440 	.word	0x42420440

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e076      	b.n	8002fbc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ede:	d009      	beq.n	8002ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fb5e 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	0c1a      	lsrs	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f002 0204 	and.w	r2, r2, #4
 8002f9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002faa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_SPI_Transmit+0x22>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e12d      	b.n	8003242 <HAL_SPI_Transmit+0x27e>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fee:	f7fe fcf3 	bl	80019d8 <HAL_GetTick>
 8002ff2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d002      	beq.n	800300a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003008:	e116      	b.n	8003238 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_SPI_Transmit+0x52>
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800301a:	e10d      	b.n	8003238 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2203      	movs	r2, #3
 8003020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	88fa      	ldrh	r2, [r7, #6]
 800303a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003062:	d10f      	bne.n	8003084 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003072:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003082:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d007      	beq.n	80030a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030aa:	d14f      	bne.n	800314c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0xf6>
 80030b4:	8afb      	ldrh	r3, [r7, #22]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d142      	bne.n	8003140 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030de:	e02f      	b.n	8003140 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d112      	bne.n	8003114 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	86da      	strh	r2, [r3, #54]	; 0x36
 8003112:	e015      	b.n	8003140 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003114:	f7fe fc60 	bl	80019d8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d803      	bhi.n	800312c <HAL_SPI_Transmit+0x168>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <HAL_SPI_Transmit+0x16e>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800313e:	e07b      	b.n	8003238 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ca      	bne.n	80030e0 <HAL_SPI_Transmit+0x11c>
 800314a:	e050      	b.n	80031ee <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_SPI_Transmit+0x196>
 8003154:	8afb      	ldrh	r3, [r7, #22]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d144      	bne.n	80031e4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003180:	e030      	b.n	80031e4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d113      	bne.n	80031b8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80031b6:	e015      	b.n	80031e4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031b8:	f7fe fc0e 	bl	80019d8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d803      	bhi.n	80031d0 <HAL_SPI_Transmit+0x20c>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d102      	bne.n	80031d6 <HAL_SPI_Transmit+0x212>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031e2:	e029      	b.n	8003238 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1c9      	bne.n	8003182 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8b2 	bl	800335c <SPI_EndRxTxTransaction>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e003      	b.n	8003238 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003240:	7ffb      	ldrb	r3, [r7, #31]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800325c:	f7fe fbbc 	bl	80019d8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800326c:	f7fe fbb4 	bl	80019d8 <HAL_GetTick>
 8003270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	015b      	lsls	r3, r3, #5
 8003278:	0d1b      	lsrs	r3, r3, #20
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	e054      	b.n	800332e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d050      	beq.n	800332e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800328c:	f7fe fba4 	bl	80019d8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	d902      	bls.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d13d      	bne.n	800331e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d111      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d004      	beq.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d107      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e8:	d10f      	bne.n	800330a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e017      	b.n	800334e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3b01      	subs	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d19b      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000008 	.word	0x20000008

0800335c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff6a 	bl	800324c <SPI_WaitFlagStateUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e000      	b.n	8003390 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e041      	b.n	800342e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe f954 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 fc72 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e03a      	b.n	80034c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_TIM_Base_Start_IT+0x98>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x58>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347a:	d009      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x58>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x58>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d111      	bne.n	80034b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d010      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	e007      	b.n	80034c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800

080034dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e041      	b.n	8003572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f839 	bl	800357a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 fbd0 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start+0x24>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e022      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d109      	bne.n	80035ca <HAL_TIM_PWM_Start+0x3e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e015      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x58>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05e      	b.n	80036bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0x82>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0x92>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fe4f 	bl	80042e2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_TIM_PWM_Start+0x138>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d107      	bne.n	800365e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_TIM_PWM_Start+0x138>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <HAL_TIM_PWM_Start+0x13c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a12      	ldr	r2, [pc, #72]	; (80036cc <HAL_TIM_PWM_Start+0x140>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d010      	beq.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0202 	mvn.w	r2, #2
 80036fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fab8 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 faab 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 faba 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa8e 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa81 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa90 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0208 	mvn.w	r2, #8
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa64 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa57 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa66 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0210 	mvn.w	r2, #16
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2208      	movs	r2, #8
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa3a 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa2d 	bl	8003c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa3c 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0201 	mvn.w	r2, #1
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fd46 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 feac 	bl	80045d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa00 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fe77 	bl	80045c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ae      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	f200 809f 	bhi.w	8003a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003949 	.word	0x08003949
 8003918:	08003a4d 	.word	0x08003a4d
 800391c:	08003a4d 	.word	0x08003a4d
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003989 	.word	0x08003989
 8003928:	08003a4d 	.word	0x08003a4d
 800392c:	08003a4d 	.word	0x08003a4d
 8003930:	08003a4d 	.word	0x08003a4d
 8003934:	080039cb 	.word	0x080039cb
 8003938:	08003a4d 	.word	0x08003a4d
 800393c:	08003a4d 	.word	0x08003a4d
 8003940:	08003a4d 	.word	0x08003a4d
 8003944:	08003a0b 	.word	0x08003a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa18 	bl	8003d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
      break;
 8003986:	e064      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fa5e 	bl	8003e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
      break;
 80039c8:	e043      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 faa7 	bl	8003f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0208 	orr.w	r2, r2, #8
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
      break;
 8003a08:	e023      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 faf1 	bl	8003ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0b4      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d03e      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xd4>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 8087 	bhi.w	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	f000 8086 	beq.w	8003bd6 <HAL_TIM_ConfigClockSource+0x172>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d87f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d01a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d87b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d050      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x11a>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d877      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d03c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d873      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d058      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x13a>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d86f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d86b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d060      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d867      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d05a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 fbc3 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	609a      	str	r2, [r3, #8]
      break;
 8003b36:	e04f      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 fbac 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fb23 	bl	80041b6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2150      	movs	r1, #80	; 0x50
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb7a 	bl	8004270 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e02c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fb41 	bl	8004212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb6a 	bl	8004270 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e01c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 fb03 	bl	80041b6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fb5a 	bl	8004270 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e00c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 fb51 	bl	8004270 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e031      	b.n	8003c6e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa39 	bl	8004094 <TIM_SlaveTimer_SetConfig>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e018      	b.n	8003c6e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c5a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
	...

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <TIM_Base_SetConfig+0xb8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x30>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x30>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <TIM_Base_SetConfig+0xbc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x30>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <TIM_Base_SetConfig+0xc0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <TIM_Base_SetConfig+0xb8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <TIM_Base_SetConfig+0x62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d007      	beq.n	8003d22 <TIM_Base_SetConfig+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a19      	ldr	r2, [pc, #100]	; (8003d7c <TIM_Base_SetConfig+0xbc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_Base_SetConfig+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <TIM_Base_SetConfig+0xc0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <TIM_Base_SetConfig+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d103      	bne.n	8003d68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 0201 	bic.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 0302 	bic.w	r3, r3, #2
 8003dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <TIM_OC1_SetConfig+0xc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10c      	bne.n	8003dfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0308 	bic.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <TIM_OC1_SetConfig+0xc8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	621a      	str	r2, [r3, #32]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40012c00 	.word	0x40012c00

08003e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f023 0210 	bic.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0320 	bic.w	r3, r3, #32
 8003e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <TIM_OC2_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10d      	bne.n	8003ecc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <TIM_OC2_SetConfig+0xd0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d113      	bne.n	8003efc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00

08003f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <TIM_OC3_SetConfig+0xd0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10d      	bne.n	8003f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <TIM_OC3_SetConfig+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40012c00 	.word	0x40012c00

08003ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <TIM_OC4_SetConfig+0x98>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d109      	bne.n	800406c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00

08004094 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b70      	cmp	r3, #112	; 0x70
 80040dc:	d01a      	beq.n	8004114 <TIM_SlaveTimer_SetConfig+0x80>
 80040de:	2b70      	cmp	r3, #112	; 0x70
 80040e0:	d860      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 80040e2:	2b60      	cmp	r3, #96	; 0x60
 80040e4:	d054      	beq.n	8004190 <TIM_SlaveTimer_SetConfig+0xfc>
 80040e6:	2b60      	cmp	r3, #96	; 0x60
 80040e8:	d85c      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 80040ea:	2b50      	cmp	r3, #80	; 0x50
 80040ec:	d046      	beq.n	800417c <TIM_SlaveTimer_SetConfig+0xe8>
 80040ee:	2b50      	cmp	r3, #80	; 0x50
 80040f0:	d858      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d019      	beq.n	800412a <TIM_SlaveTimer_SetConfig+0x96>
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d854      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 80040fa:	2b30      	cmp	r3, #48	; 0x30
 80040fc:	d055      	beq.n	80041aa <TIM_SlaveTimer_SetConfig+0x116>
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d850      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 8004102:	2b20      	cmp	r3, #32
 8004104:	d051      	beq.n	80041aa <TIM_SlaveTimer_SetConfig+0x116>
 8004106:	2b20      	cmp	r3, #32
 8004108:	d84c      	bhi.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04d      	beq.n	80041aa <TIM_SlaveTimer_SetConfig+0x116>
 800410e:	2b10      	cmp	r3, #16
 8004110:	d04b      	beq.n	80041aa <TIM_SlaveTimer_SetConfig+0x116>
 8004112:	e047      	b.n	80041a4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f000 f8be 	bl	80042a4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004128:	e040      	b.n	80041ac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d101      	bne.n	8004136 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e03b      	b.n	80041ae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
      break;
 800417a:	e017      	b.n	80041ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	461a      	mov	r2, r3
 800418a:	f000 f814 	bl	80041b6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800418e:	e00d      	b.n	80041ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	461a      	mov	r2, r3
 800419e:	f000 f838 	bl	8004212 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80041a2:	e003      	b.n	80041ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	e000      	b.n	80041ac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80041aa:	bf00      	nop
  }

  return status;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0201 	bic.w	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 030a 	bic.w	r3, r3, #10
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800423c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	031b      	lsls	r3, r3, #12
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	f043 0307 	orr.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	609a      	str	r2, [r3, #8]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2201      	movs	r2, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	43db      	mvns	r3, r3
 8004304:	401a      	ands	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	431a      	orrs	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
	...

0800432c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_TIMEx_PWMN_Start+0x24>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e022      	b.n	8004396 <HAL_TIMEx_PWMN_Start+0x6a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d109      	bne.n	800436a <HAL_TIMEx_PWMN_Start+0x3e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e015      	b.n	8004396 <HAL_TIMEx_PWMN_Start+0x6a>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d109      	bne.n	8004384 <HAL_TIMEx_PWMN_Start+0x58>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e008      	b.n	8004396 <HAL_TIMEx_PWMN_Start+0x6a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e059      	b.n	8004452 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_TIMEx_PWMN_Start+0x82>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ac:	e013      	b.n	80043d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d104      	bne.n	80043be <HAL_TIMEx_PWMN_Start+0x92>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	e00b      	b.n	80043d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d104      	bne.n	80043ce <HAL_TIMEx_PWMN_Start+0xa2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043cc:	e003      	b.n	80043d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f903 	bl	80045ea <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_TIMEx_PWMN_Start+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIMEx_PWMN_Start+0xf0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d009      	beq.n	800441c <HAL_TIMEx_PWMN_Start+0xf0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_TIMEx_PWMN_Start+0x134>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIMEx_PWMN_Start+0xf0>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_TIMEx_PWMN_Start+0x138>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b06      	cmp	r3, #6
 800442c:	d010      	beq.n	8004450 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e007      	b.n	8004450 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e046      	b.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d009      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a10      	ldr	r2, [pc, #64]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10c      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800

08004524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800453c:	2302      	movs	r3, #2
 800453e:	e03d      	b.n	80045bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2204      	movs	r2, #4
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	43db      	mvns	r3, r3
 800460c:	401a      	ands	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	431a      	orrs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
	...

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	2600      	movs	r6, #0
 8004638:	4d0c      	ldr	r5, [pc, #48]	; (800466c <__libc_init_array+0x38>)
 800463a:	4c0d      	ldr	r4, [pc, #52]	; (8004670 <__libc_init_array+0x3c>)
 800463c:	1b64      	subs	r4, r4, r5
 800463e:	10a4      	asrs	r4, r4, #2
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	f001 f866 	bl	8005714 <_init>
 8004648:	2600      	movs	r6, #0
 800464a:	4d0a      	ldr	r5, [pc, #40]	; (8004674 <__libc_init_array+0x40>)
 800464c:	4c0a      	ldr	r4, [pc, #40]	; (8004678 <__libc_init_array+0x44>)
 800464e:	1b64      	subs	r4, r4, r5
 8004650:	10a4      	asrs	r4, r4, #2
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	08005930 	.word	0x08005930
 8004670:	08005930 	.word	0x08005930
 8004674:	08005930 	.word	0x08005930
 8004678:	08005934 	.word	0x08005934

0800467c <memset>:
 800467c:	4603      	mov	r3, r0
 800467e:	4402      	add	r2, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	d100      	bne.n	8004686 <memset+0xa>
 8004684:	4770      	bx	lr
 8004686:	f803 1b01 	strb.w	r1, [r3], #1
 800468a:	e7f9      	b.n	8004680 <memset+0x4>
 800468c:	0000      	movs	r0, r0
	...

08004690 <floor>:
 8004690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004694:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004698:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800469c:	2e13      	cmp	r6, #19
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4607      	mov	r7, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	4605      	mov	r5, r0
 80046a8:	dc33      	bgt.n	8004712 <floor+0x82>
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	da14      	bge.n	80046d8 <floor+0x48>
 80046ae:	a334      	add	r3, pc, #208	; (adr r3, 8004780 <floor+0xf0>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f7fb fd52 	bl	800015c <__adddf3>
 80046b8:	2200      	movs	r2, #0
 80046ba:	2300      	movs	r3, #0
 80046bc:	f7fc f994 	bl	80009e8 <__aeabi_dcmpgt>
 80046c0:	b138      	cbz	r0, 80046d2 <floor+0x42>
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	da58      	bge.n	8004778 <floor+0xe8>
 80046c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80046ca:	431d      	orrs	r5, r3
 80046cc:	d001      	beq.n	80046d2 <floor+0x42>
 80046ce:	2500      	movs	r5, #0
 80046d0:	4c2d      	ldr	r4, [pc, #180]	; (8004788 <floor+0xf8>)
 80046d2:	4623      	mov	r3, r4
 80046d4:	462f      	mov	r7, r5
 80046d6:	e025      	b.n	8004724 <floor+0x94>
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <floor+0xfc>)
 80046da:	fa42 f806 	asr.w	r8, r2, r6
 80046de:	ea01 0208 	and.w	r2, r1, r8
 80046e2:	4302      	orrs	r2, r0
 80046e4:	d01e      	beq.n	8004724 <floor+0x94>
 80046e6:	a326      	add	r3, pc, #152	; (adr r3, 8004780 <floor+0xf0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb fd36 	bl	800015c <__adddf3>
 80046f0:	2200      	movs	r2, #0
 80046f2:	2300      	movs	r3, #0
 80046f4:	f7fc f978 	bl	80009e8 <__aeabi_dcmpgt>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0ea      	beq.n	80046d2 <floor+0x42>
 80046fc:	2c00      	cmp	r4, #0
 80046fe:	bfbe      	ittt	lt
 8004700:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004704:	fa43 f606 	asrlt.w	r6, r3, r6
 8004708:	19a4      	addlt	r4, r4, r6
 800470a:	2500      	movs	r5, #0
 800470c:	ea24 0408 	bic.w	r4, r4, r8
 8004710:	e7df      	b.n	80046d2 <floor+0x42>
 8004712:	2e33      	cmp	r6, #51	; 0x33
 8004714:	dd0a      	ble.n	800472c <floor+0x9c>
 8004716:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800471a:	d103      	bne.n	8004724 <floor+0x94>
 800471c:	f7fb fd1e 	bl	800015c <__adddf3>
 8004720:	4607      	mov	r7, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4638      	mov	r0, r7
 8004726:	4619      	mov	r1, r3
 8004728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004734:	fa22 f808 	lsr.w	r8, r2, r8
 8004738:	ea18 0f00 	tst.w	r8, r0
 800473c:	d0f2      	beq.n	8004724 <floor+0x94>
 800473e:	a310      	add	r3, pc, #64	; (adr r3, 8004780 <floor+0xf0>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb fd0a 	bl	800015c <__adddf3>
 8004748:	2200      	movs	r2, #0
 800474a:	2300      	movs	r3, #0
 800474c:	f7fc f94c 	bl	80009e8 <__aeabi_dcmpgt>
 8004750:	2800      	cmp	r0, #0
 8004752:	d0be      	beq.n	80046d2 <floor+0x42>
 8004754:	2c00      	cmp	r4, #0
 8004756:	da02      	bge.n	800475e <floor+0xce>
 8004758:	2e14      	cmp	r6, #20
 800475a:	d103      	bne.n	8004764 <floor+0xd4>
 800475c:	3401      	adds	r4, #1
 800475e:	ea25 0508 	bic.w	r5, r5, r8
 8004762:	e7b6      	b.n	80046d2 <floor+0x42>
 8004764:	2301      	movs	r3, #1
 8004766:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800476a:	fa03 f606 	lsl.w	r6, r3, r6
 800476e:	4435      	add	r5, r6
 8004770:	42bd      	cmp	r5, r7
 8004772:	bf38      	it	cc
 8004774:	18e4      	addcc	r4, r4, r3
 8004776:	e7f2      	b.n	800475e <floor+0xce>
 8004778:	2500      	movs	r5, #0
 800477a:	462c      	mov	r4, r5
 800477c:	e7a9      	b.n	80046d2 <floor+0x42>
 800477e:	bf00      	nop
 8004780:	8800759c 	.word	0x8800759c
 8004784:	7e37e43c 	.word	0x7e37e43c
 8004788:	bff00000 	.word	0xbff00000
 800478c:	000fffff 	.word	0x000fffff

08004790 <round>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004796:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800479a:	2c13      	cmp	r4, #19
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4606      	mov	r6, r0
 80047a2:	460d      	mov	r5, r1
 80047a4:	dc19      	bgt.n	80047da <round+0x4a>
 80047a6:	2c00      	cmp	r4, #0
 80047a8:	da09      	bge.n	80047be <round+0x2e>
 80047aa:	3401      	adds	r4, #1
 80047ac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80047b0:	d103      	bne.n	80047ba <round+0x2a>
 80047b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80047b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80047ba:	2200      	movs	r2, #0
 80047bc:	e02a      	b.n	8004814 <round+0x84>
 80047be:	4917      	ldr	r1, [pc, #92]	; (800481c <round+0x8c>)
 80047c0:	4121      	asrs	r1, r4
 80047c2:	ea03 0001 	and.w	r0, r3, r1
 80047c6:	4302      	orrs	r2, r0
 80047c8:	d010      	beq.n	80047ec <round+0x5c>
 80047ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047ce:	fa42 f404 	asr.w	r4, r2, r4
 80047d2:	4423      	add	r3, r4
 80047d4:	ea23 0301 	bic.w	r3, r3, r1
 80047d8:	e7ef      	b.n	80047ba <round+0x2a>
 80047da:	2c33      	cmp	r4, #51	; 0x33
 80047dc:	dd09      	ble.n	80047f2 <round+0x62>
 80047de:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80047e2:	d103      	bne.n	80047ec <round+0x5c>
 80047e4:	f7fb fcba 	bl	800015c <__adddf3>
 80047e8:	4606      	mov	r6, r0
 80047ea:	460d      	mov	r5, r1
 80047ec:	4630      	mov	r0, r6
 80047ee:	4629      	mov	r1, r5
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	f04f 31ff 	mov.w	r1, #4294967295
 80047f6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80047fa:	40f9      	lsrs	r1, r7
 80047fc:	4208      	tst	r0, r1
 80047fe:	d0f5      	beq.n	80047ec <round+0x5c>
 8004800:	2001      	movs	r0, #1
 8004802:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004806:	fa00 f404 	lsl.w	r4, r0, r4
 800480a:	1912      	adds	r2, r2, r4
 800480c:	bf28      	it	cs
 800480e:	181b      	addcs	r3, r3, r0
 8004810:	ea22 0201 	bic.w	r2, r2, r1
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	e7e6      	b.n	80047e8 <round+0x58>
 800481a:	bf00      	nop
 800481c:	000fffff 	.word	0x000fffff

08004820 <sin>:
 8004820:	b530      	push	{r4, r5, lr}
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <sin+0x84>)
 8004824:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004828:	4293      	cmp	r3, r2
 800482a:	b087      	sub	sp, #28
 800482c:	dc06      	bgt.n	800483c <sin+0x1c>
 800482e:	2300      	movs	r3, #0
 8004830:	2200      	movs	r2, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	f000 fe33 	bl	80054a0 <__kernel_sin>
 800483a:	e006      	b.n	800484a <sin+0x2a>
 800483c:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <sin+0x88>)
 800483e:	4293      	cmp	r3, r2
 8004840:	dd05      	ble.n	800484e <sin+0x2e>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	f7fb fc87 	bl	8000158 <__aeabi_dsub>
 800484a:	b007      	add	sp, #28
 800484c:	bd30      	pop	{r4, r5, pc}
 800484e:	aa02      	add	r2, sp, #8
 8004850:	f000 f82e 	bl	80048b0 <__ieee754_rem_pio2>
 8004854:	f000 0003 	and.w	r0, r0, #3
 8004858:	2801      	cmp	r0, #1
 800485a:	d009      	beq.n	8004870 <sin+0x50>
 800485c:	2802      	cmp	r0, #2
 800485e:	d00e      	beq.n	800487e <sin+0x5e>
 8004860:	b9c0      	cbnz	r0, 8004894 <sin+0x74>
 8004862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004866:	2301      	movs	r3, #1
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800486e:	e7e2      	b.n	8004836 <sin+0x16>
 8004870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004878:	f000 fa12 	bl	8004ca0 <__kernel_cos>
 800487c:	e7e5      	b.n	800484a <sin+0x2a>
 800487e:	2301      	movs	r3, #1
 8004880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800488a:	f000 fe09 	bl	80054a0 <__kernel_sin>
 800488e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004892:	e7da      	b.n	800484a <sin+0x2a>
 8004894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489c:	f000 fa00 	bl	8004ca0 <__kernel_cos>
 80048a0:	e7f5      	b.n	800488e <sin+0x6e>
 80048a2:	bf00      	nop
 80048a4:	3fe921fb 	.word	0x3fe921fb
 80048a8:	7fefffff 	.word	0x7fefffff
 80048ac:	00000000 	.word	0x00000000

080048b0 <__ieee754_rem_pio2>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	4614      	mov	r4, r2
 80048b6:	4ac4      	ldr	r2, [pc, #784]	; (8004bc8 <__ieee754_rem_pio2+0x318>)
 80048b8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80048bc:	b08d      	sub	sp, #52	; 0x34
 80048be:	4592      	cmp	sl, r2
 80048c0:	9104      	str	r1, [sp, #16]
 80048c2:	dc07      	bgt.n	80048d4 <__ieee754_rem_pio2+0x24>
 80048c4:	2200      	movs	r2, #0
 80048c6:	2300      	movs	r3, #0
 80048c8:	e9c4 0100 	strd	r0, r1, [r4]
 80048cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80048d0:	2500      	movs	r5, #0
 80048d2:	e024      	b.n	800491e <__ieee754_rem_pio2+0x6e>
 80048d4:	4abd      	ldr	r2, [pc, #756]	; (8004bcc <__ieee754_rem_pio2+0x31c>)
 80048d6:	4592      	cmp	sl, r2
 80048d8:	dc72      	bgt.n	80049c0 <__ieee754_rem_pio2+0x110>
 80048da:	9b04      	ldr	r3, [sp, #16]
 80048dc:	4dbc      	ldr	r5, [pc, #752]	; (8004bd0 <__ieee754_rem_pio2+0x320>)
 80048de:	2b00      	cmp	r3, #0
 80048e0:	a3ab      	add	r3, pc, #684	; (adr r3, 8004b90 <__ieee754_rem_pio2+0x2e0>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	dd36      	ble.n	8004956 <__ieee754_rem_pio2+0xa6>
 80048e8:	f7fb fc36 	bl	8000158 <__aeabi_dsub>
 80048ec:	45aa      	cmp	sl, r5
 80048ee:	4606      	mov	r6, r0
 80048f0:	460f      	mov	r7, r1
 80048f2:	d018      	beq.n	8004926 <__ieee754_rem_pio2+0x76>
 80048f4:	a3a8      	add	r3, pc, #672	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x2e8>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fc2d 	bl	8000158 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4630      	mov	r0, r6
 8004904:	e9c4 2300 	strd	r2, r3, [r4]
 8004908:	4639      	mov	r1, r7
 800490a:	f7fb fc25 	bl	8000158 <__aeabi_dsub>
 800490e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x2e8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fc20 	bl	8000158 <__aeabi_dsub>
 8004918:	2501      	movs	r5, #1
 800491a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800491e:	4628      	mov	r0, r5
 8004920:	b00d      	add	sp, #52	; 0x34
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	a39e      	add	r3, pc, #632	; (adr r3, 8004ba0 <__ieee754_rem_pio2+0x2f0>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fc14 	bl	8000158 <__aeabi_dsub>
 8004930:	a39d      	add	r3, pc, #628	; (adr r3, 8004ba8 <__ieee754_rem_pio2+0x2f8>)
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	4606      	mov	r6, r0
 8004938:	460f      	mov	r7, r1
 800493a:	f7fb fc0d 	bl	8000158 <__aeabi_dsub>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4630      	mov	r0, r6
 8004944:	e9c4 2300 	strd	r2, r3, [r4]
 8004948:	4639      	mov	r1, r7
 800494a:	f7fb fc05 	bl	8000158 <__aeabi_dsub>
 800494e:	a396      	add	r3, pc, #600	; (adr r3, 8004ba8 <__ieee754_rem_pio2+0x2f8>)
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	e7de      	b.n	8004914 <__ieee754_rem_pio2+0x64>
 8004956:	f7fb fc01 	bl	800015c <__adddf3>
 800495a:	45aa      	cmp	sl, r5
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	d016      	beq.n	8004990 <__ieee754_rem_pio2+0xe0>
 8004962:	a38d      	add	r3, pc, #564	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x2e8>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fbf8 	bl	800015c <__adddf3>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	e9c4 2300 	strd	r2, r3, [r4]
 8004976:	4639      	mov	r1, r7
 8004978:	f7fb fbee 	bl	8000158 <__aeabi_dsub>
 800497c:	a386      	add	r3, pc, #536	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x2e8>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fbeb 	bl	800015c <__adddf3>
 8004986:	f04f 35ff 	mov.w	r5, #4294967295
 800498a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800498e:	e7c6      	b.n	800491e <__ieee754_rem_pio2+0x6e>
 8004990:	a383      	add	r3, pc, #524	; (adr r3, 8004ba0 <__ieee754_rem_pio2+0x2f0>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f7fb fbe1 	bl	800015c <__adddf3>
 800499a:	a383      	add	r3, pc, #524	; (adr r3, 8004ba8 <__ieee754_rem_pio2+0x2f8>)
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	4606      	mov	r6, r0
 80049a2:	460f      	mov	r7, r1
 80049a4:	f7fb fbda 	bl	800015c <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4630      	mov	r0, r6
 80049ae:	e9c4 2300 	strd	r2, r3, [r4]
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fb fbd0 	bl	8000158 <__aeabi_dsub>
 80049b8:	a37b      	add	r3, pc, #492	; (adr r3, 8004ba8 <__ieee754_rem_pio2+0x2f8>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	e7e0      	b.n	8004982 <__ieee754_rem_pio2+0xd2>
 80049c0:	4a84      	ldr	r2, [pc, #528]	; (8004bd4 <__ieee754_rem_pio2+0x324>)
 80049c2:	4592      	cmp	sl, r2
 80049c4:	f300 80d5 	bgt.w	8004b72 <__ieee754_rem_pio2+0x2c2>
 80049c8:	f000 fe20 	bl	800560c <fabs>
 80049cc:	a378      	add	r3, pc, #480	; (adr r3, 8004bb0 <__ieee754_rem_pio2+0x300>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	4606      	mov	r6, r0
 80049d4:	460f      	mov	r7, r1
 80049d6:	f7fb fd77 	bl	80004c8 <__aeabi_dmul>
 80049da:	2200      	movs	r2, #0
 80049dc:	4b7e      	ldr	r3, [pc, #504]	; (8004bd8 <__ieee754_rem_pio2+0x328>)
 80049de:	f7fb fbbd 	bl	800015c <__adddf3>
 80049e2:	f7fc f80b 	bl	80009fc <__aeabi_d2iz>
 80049e6:	4605      	mov	r5, r0
 80049e8:	f7fb fd04 	bl	80003f4 <__aeabi_i2d>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049f4:	a366      	add	r3, pc, #408	; (adr r3, 8004b90 <__ieee754_rem_pio2+0x2e0>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fb fd65 	bl	80004c8 <__aeabi_dmul>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4630      	mov	r0, r6
 8004a04:	4639      	mov	r1, r7
 8004a06:	f7fb fba7 	bl	8000158 <__aeabi_dsub>
 8004a0a:	a363      	add	r3, pc, #396	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x2e8>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	4680      	mov	r8, r0
 8004a12:	4689      	mov	r9, r1
 8004a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a18:	f7fb fd56 	bl	80004c8 <__aeabi_dmul>
 8004a1c:	2d1f      	cmp	r5, #31
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460f      	mov	r7, r1
 8004a22:	dc0e      	bgt.n	8004a42 <__ieee754_rem_pio2+0x192>
 8004a24:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <__ieee754_rem_pio2+0x32c>)
 8004a26:	1e6a      	subs	r2, r5, #1
 8004a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2c:	4553      	cmp	r3, sl
 8004a2e:	d008      	beq.n	8004a42 <__ieee754_rem_pio2+0x192>
 8004a30:	4632      	mov	r2, r6
 8004a32:	463b      	mov	r3, r7
 8004a34:	4640      	mov	r0, r8
 8004a36:	4649      	mov	r1, r9
 8004a38:	f7fb fb8e 	bl	8000158 <__aeabi_dsub>
 8004a3c:	e9c4 0100 	strd	r0, r1, [r4]
 8004a40:	e013      	b.n	8004a6a <__ieee754_rem_pio2+0x1ba>
 8004a42:	463b      	mov	r3, r7
 8004a44:	4632      	mov	r2, r6
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f7fb fb85 	bl	8000158 <__aeabi_dsub>
 8004a4e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004a52:	9305      	str	r3, [sp, #20]
 8004a54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a58:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004a5c:	f1ba 0f10 	cmp.w	sl, #16
 8004a60:	dc1f      	bgt.n	8004aa2 <__ieee754_rem_pio2+0x1f2>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	e9c4 2300 	strd	r2, r3, [r4]
 8004a6a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004a6e:	4640      	mov	r0, r8
 8004a70:	4653      	mov	r3, sl
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fb fb70 	bl	8000158 <__aeabi_dsub>
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	f7fb fb6c 	bl	8000158 <__aeabi_dsub>
 8004a80:	460b      	mov	r3, r1
 8004a82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a86:	9904      	ldr	r1, [sp, #16]
 8004a88:	4602      	mov	r2, r0
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	f6bf af47 	bge.w	800491e <__ieee754_rem_pio2+0x6e>
 8004a90:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004a94:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004a98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a9c:	60e3      	str	r3, [r4, #12]
 8004a9e:	426d      	negs	r5, r5
 8004aa0:	e73d      	b.n	800491e <__ieee754_rem_pio2+0x6e>
 8004aa2:	a33f      	add	r3, pc, #252	; (adr r3, 8004ba0 <__ieee754_rem_pio2+0x2f0>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aac:	f7fb fd0c 	bl	80004c8 <__aeabi_dmul>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4640      	mov	r0, r8
 8004aba:	4649      	mov	r1, r9
 8004abc:	f7fb fb4c 	bl	8000158 <__aeabi_dsub>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	468b      	mov	fp, r1
 8004ac8:	4640      	mov	r0, r8
 8004aca:	4649      	mov	r1, r9
 8004acc:	f7fb fb44 	bl	8000158 <__aeabi_dsub>
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	f7fb fb40 	bl	8000158 <__aeabi_dsub>
 8004ad8:	a333      	add	r3, pc, #204	; (adr r3, 8004ba8 <__ieee754_rem_pio2+0x2f8>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae6:	f7fb fcef 	bl	80004c8 <__aeabi_dmul>
 8004aea:	4632      	mov	r2, r6
 8004aec:	463b      	mov	r3, r7
 8004aee:	f7fb fb33 	bl	8000158 <__aeabi_dsub>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	4650      	mov	r0, sl
 8004afc:	4659      	mov	r1, fp
 8004afe:	f7fb fb2b 	bl	8000158 <__aeabi_dsub>
 8004b02:	9a05      	ldr	r2, [sp, #20]
 8004b04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b31      	cmp	r3, #49	; 0x31
 8004b0c:	dc06      	bgt.n	8004b1c <__ieee754_rem_pio2+0x26c>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	46d0      	mov	r8, sl
 8004b14:	46d9      	mov	r9, fp
 8004b16:	e9c4 2300 	strd	r2, r3, [r4]
 8004b1a:	e7a6      	b.n	8004a6a <__ieee754_rem_pio2+0x1ba>
 8004b1c:	a326      	add	r3, pc, #152	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x308>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b26:	f7fb fccf 	bl	80004c8 <__aeabi_dmul>
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	460f      	mov	r7, r1
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4650      	mov	r0, sl
 8004b34:	4659      	mov	r1, fp
 8004b36:	f7fb fb0f 	bl	8000158 <__aeabi_dsub>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4680      	mov	r8, r0
 8004b40:	4689      	mov	r9, r1
 8004b42:	4650      	mov	r0, sl
 8004b44:	4659      	mov	r1, fp
 8004b46:	f7fb fb07 	bl	8000158 <__aeabi_dsub>
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	f7fb fb03 	bl	8000158 <__aeabi_dsub>
 8004b52:	a31b      	add	r3, pc, #108	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x310>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	4606      	mov	r6, r0
 8004b5a:	460f      	mov	r7, r1
 8004b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b60:	f7fb fcb2 	bl	80004c8 <__aeabi_dmul>
 8004b64:	4632      	mov	r2, r6
 8004b66:	463b      	mov	r3, r7
 8004b68:	f7fb faf6 	bl	8000158 <__aeabi_dsub>
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	460f      	mov	r7, r1
 8004b70:	e75e      	b.n	8004a30 <__ieee754_rem_pio2+0x180>
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <__ieee754_rem_pio2+0x330>)
 8004b74:	4592      	cmp	sl, r2
 8004b76:	dd35      	ble.n	8004be4 <__ieee754_rem_pio2+0x334>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	f7fb faec 	bl	8000158 <__aeabi_dsub>
 8004b80:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b84:	e9c4 0100 	strd	r0, r1, [r4]
 8004b88:	e6a2      	b.n	80048d0 <__ieee754_rem_pio2+0x20>
 8004b8a:	bf00      	nop
 8004b8c:	f3af 8000 	nop.w
 8004b90:	54400000 	.word	0x54400000
 8004b94:	3ff921fb 	.word	0x3ff921fb
 8004b98:	1a626331 	.word	0x1a626331
 8004b9c:	3dd0b461 	.word	0x3dd0b461
 8004ba0:	1a600000 	.word	0x1a600000
 8004ba4:	3dd0b461 	.word	0x3dd0b461
 8004ba8:	2e037073 	.word	0x2e037073
 8004bac:	3ba3198a 	.word	0x3ba3198a
 8004bb0:	6dc9c883 	.word	0x6dc9c883
 8004bb4:	3fe45f30 	.word	0x3fe45f30
 8004bb8:	2e000000 	.word	0x2e000000
 8004bbc:	3ba3198a 	.word	0x3ba3198a
 8004bc0:	252049c1 	.word	0x252049c1
 8004bc4:	397b839a 	.word	0x397b839a
 8004bc8:	3fe921fb 	.word	0x3fe921fb
 8004bcc:	4002d97b 	.word	0x4002d97b
 8004bd0:	3ff921fb 	.word	0x3ff921fb
 8004bd4:	413921fb 	.word	0x413921fb
 8004bd8:	3fe00000 	.word	0x3fe00000
 8004bdc:	08005754 	.word	0x08005754
 8004be0:	7fefffff 	.word	0x7fefffff
 8004be4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004be8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004bec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004bf0:	460f      	mov	r7, r1
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	f7fb ff02 	bl	80009fc <__aeabi_d2iz>
 8004bf8:	f7fb fbfc 	bl	80003f4 <__aeabi_i2d>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4630      	mov	r0, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c08:	f7fb faa6 	bl	8000158 <__aeabi_dsub>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <__ieee754_rem_pio2+0x3e8>)
 8004c10:	f7fb fc5a 	bl	80004c8 <__aeabi_dmul>
 8004c14:	460f      	mov	r7, r1
 8004c16:	4606      	mov	r6, r0
 8004c18:	f7fb fef0 	bl	80009fc <__aeabi_d2iz>
 8004c1c:	f7fb fbea 	bl	80003f4 <__aeabi_i2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c2c:	f7fb fa94 	bl	8000158 <__aeabi_dsub>
 8004c30:	2200      	movs	r2, #0
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <__ieee754_rem_pio2+0x3e8>)
 8004c34:	f7fb fc48 	bl	80004c8 <__aeabi_dmul>
 8004c38:	f04f 0803 	mov.w	r8, #3
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	2700      	movs	r7, #0
 8004c40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c44:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004c48:	4632      	mov	r2, r6
 8004c4a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004c4e:	463b      	mov	r3, r7
 8004c50:	46c2      	mov	sl, r8
 8004c52:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c56:	f7fb fe9f 	bl	8000998 <__aeabi_dcmpeq>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d1f4      	bne.n	8004c48 <__ieee754_rem_pio2+0x398>
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <__ieee754_rem_pio2+0x3ec>)
 8004c60:	462a      	mov	r2, r5
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	2302      	movs	r3, #2
 8004c66:	4621      	mov	r1, r4
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	a806      	add	r0, sp, #24
 8004c6c:	4653      	mov	r3, sl
 8004c6e:	f000 f8d5 	bl	8004e1c <__kernel_rem_pio2>
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	4605      	mov	r5, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f6bf ae51 	bge.w	800491e <__ieee754_rem_pio2+0x6e>
 8004c7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004c80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c84:	e9c4 2300 	strd	r2, r3, [r4]
 8004c88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004c94:	e703      	b.n	8004a9e <__ieee754_rem_pio2+0x1ee>
 8004c96:	bf00      	nop
 8004c98:	41700000 	.word	0x41700000
 8004c9c:	080057d4 	.word	0x080057d4

08004ca0 <__kernel_cos>:
 8004ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004ca8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004cac:	4680      	mov	r8, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8004cb4:	da04      	bge.n	8004cc0 <__kernel_cos+0x20>
 8004cb6:	f7fb fea1 	bl	80009fc <__aeabi_d2iz>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	f000 8086 	beq.w	8004dcc <__kernel_cos+0x12c>
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	f7fb fbfe 	bl	80004c8 <__aeabi_dmul>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <__kernel_cos+0x168>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	f7fb fbf8 	bl	80004c8 <__aeabi_dmul>
 8004cd8:	a33f      	add	r3, pc, #252	; (adr r3, 8004dd8 <__kernel_cos+0x138>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	4682      	mov	sl, r0
 8004ce0:	468b      	mov	fp, r1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb fbef 	bl	80004c8 <__aeabi_dmul>
 8004cea:	a33d      	add	r3, pc, #244	; (adr r3, 8004de0 <__kernel_cos+0x140>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fa34 	bl	800015c <__adddf3>
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	f7fb fbe6 	bl	80004c8 <__aeabi_dmul>
 8004cfc:	a33a      	add	r3, pc, #232	; (adr r3, 8004de8 <__kernel_cos+0x148>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fa29 	bl	8000158 <__aeabi_dsub>
 8004d06:	4622      	mov	r2, r4
 8004d08:	462b      	mov	r3, r5
 8004d0a:	f7fb fbdd 	bl	80004c8 <__aeabi_dmul>
 8004d0e:	a338      	add	r3, pc, #224	; (adr r3, 8004df0 <__kernel_cos+0x150>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f7fb fa22 	bl	800015c <__adddf3>
 8004d18:	4622      	mov	r2, r4
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	f7fb fbd4 	bl	80004c8 <__aeabi_dmul>
 8004d20:	a335      	add	r3, pc, #212	; (adr r3, 8004df8 <__kernel_cos+0x158>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f7fb fa17 	bl	8000158 <__aeabi_dsub>
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	f7fb fbcb 	bl	80004c8 <__aeabi_dmul>
 8004d32:	a333      	add	r3, pc, #204	; (adr r3, 8004e00 <__kernel_cos+0x160>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fa10 	bl	800015c <__adddf3>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	f7fb fbc2 	bl	80004c8 <__aeabi_dmul>
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	f7fb fbbe 	bl	80004c8 <__aeabi_dmul>
 8004d4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d50:	4604      	mov	r4, r0
 8004d52:	460d      	mov	r5, r1
 8004d54:	4640      	mov	r0, r8
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fbb6 	bl	80004c8 <__aeabi_dmul>
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4629      	mov	r1, r5
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7fb f9f8 	bl	8000158 <__aeabi_dsub>
 8004d68:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <__kernel_cos+0x16c>)
 8004d6a:	4680      	mov	r8, r0
 8004d6c:	429e      	cmp	r6, r3
 8004d6e:	4689      	mov	r9, r1
 8004d70:	dc0e      	bgt.n	8004d90 <__kernel_cos+0xf0>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4650      	mov	r0, sl
 8004d78:	4659      	mov	r1, fp
 8004d7a:	f7fb f9ed 	bl	8000158 <__aeabi_dsub>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	2000      	movs	r0, #0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4922      	ldr	r1, [pc, #136]	; (8004e10 <__kernel_cos+0x170>)
 8004d86:	f7fb f9e7 	bl	8000158 <__aeabi_dsub>
 8004d8a:	b003      	add	sp, #12
 8004d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d90:	2400      	movs	r4, #0
 8004d92:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <__kernel_cos+0x174>)
 8004d94:	4622      	mov	r2, r4
 8004d96:	429e      	cmp	r6, r3
 8004d98:	bfcc      	ite	gt
 8004d9a:	4d1f      	ldrgt	r5, [pc, #124]	; (8004e18 <__kernel_cos+0x178>)
 8004d9c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004da0:	462b      	mov	r3, r5
 8004da2:	2000      	movs	r0, #0
 8004da4:	491a      	ldr	r1, [pc, #104]	; (8004e10 <__kernel_cos+0x170>)
 8004da6:	f7fb f9d7 	bl	8000158 <__aeabi_dsub>
 8004daa:	4622      	mov	r2, r4
 8004dac:	4606      	mov	r6, r0
 8004dae:	460f      	mov	r7, r1
 8004db0:	462b      	mov	r3, r5
 8004db2:	4650      	mov	r0, sl
 8004db4:	4659      	mov	r1, fp
 8004db6:	f7fb f9cf 	bl	8000158 <__aeabi_dsub>
 8004dba:	4642      	mov	r2, r8
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	f7fb f9cb 	bl	8000158 <__aeabi_dsub>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4639      	mov	r1, r7
 8004dca:	e7dc      	b.n	8004d86 <__kernel_cos+0xe6>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4910      	ldr	r1, [pc, #64]	; (8004e10 <__kernel_cos+0x170>)
 8004dd0:	e7db      	b.n	8004d8a <__kernel_cos+0xea>
 8004dd2:	bf00      	nop
 8004dd4:	f3af 8000 	nop.w
 8004dd8:	be8838d4 	.word	0xbe8838d4
 8004ddc:	bda8fae9 	.word	0xbda8fae9
 8004de0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004de4:	3e21ee9e 	.word	0x3e21ee9e
 8004de8:	809c52ad 	.word	0x809c52ad
 8004dec:	3e927e4f 	.word	0x3e927e4f
 8004df0:	19cb1590 	.word	0x19cb1590
 8004df4:	3efa01a0 	.word	0x3efa01a0
 8004df8:	16c15177 	.word	0x16c15177
 8004dfc:	3f56c16c 	.word	0x3f56c16c
 8004e00:	5555554c 	.word	0x5555554c
 8004e04:	3fa55555 	.word	0x3fa55555
 8004e08:	3fe00000 	.word	0x3fe00000
 8004e0c:	3fd33332 	.word	0x3fd33332
 8004e10:	3ff00000 	.word	0x3ff00000
 8004e14:	3fe90000 	.word	0x3fe90000
 8004e18:	3fd20000 	.word	0x3fd20000

08004e1c <__kernel_rem_pio2>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004e24:	9308      	str	r3, [sp, #32]
 8004e26:	9106      	str	r1, [sp, #24]
 8004e28:	4bb6      	ldr	r3, [pc, #728]	; (8005104 <__kernel_rem_pio2+0x2e8>)
 8004e2a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004e2c:	f112 0f14 	cmn.w	r2, #20
 8004e30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e34:	bfa8      	it	ge
 8004e36:	1ed4      	subge	r4, r2, #3
 8004e38:	9302      	str	r3, [sp, #8]
 8004e3a:	9b08      	ldr	r3, [sp, #32]
 8004e3c:	bfb8      	it	lt
 8004e3e:	2400      	movlt	r4, #0
 8004e40:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	bfa4      	itt	ge
 8004e48:	2318      	movge	r3, #24
 8004e4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e4e:	f06f 0317 	mvn.w	r3, #23
 8004e52:	fb04 3303 	mla	r3, r4, r3, r3
 8004e56:	eb03 0b02 	add.w	fp, r3, r2
 8004e5a:	9a07      	ldr	r2, [sp, #28]
 8004e5c:	9b02      	ldr	r3, [sp, #8]
 8004e5e:	1aa7      	subs	r7, r4, r2
 8004e60:	eb03 0802 	add.w	r8, r3, r2
 8004e64:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004e66:	2500      	movs	r5, #0
 8004e68:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9009      	str	r0, [sp, #36]	; 0x24
 8004e72:	ae20      	add	r6, sp, #128	; 0x80
 8004e74:	4545      	cmp	r5, r8
 8004e76:	dd14      	ble.n	8004ea2 <__kernel_rem_pio2+0x86>
 8004e78:	f04f 0800 	mov.w	r8, #0
 8004e7c:	9a08      	ldr	r2, [sp, #32]
 8004e7e:	ab20      	add	r3, sp, #128	; 0x80
 8004e80:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004e84:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004e88:	9b02      	ldr	r3, [sp, #8]
 8004e8a:	4598      	cmp	r8, r3
 8004e8c:	dc35      	bgt.n	8004efa <__kernel_rem_pio2+0xde>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	2200      	movs	r2, #0
 8004e92:	f1a3 0908 	sub.w	r9, r3, #8
 8004e96:	2300      	movs	r3, #0
 8004e98:	462f      	mov	r7, r5
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8004ea0:	e01f      	b.n	8004ee2 <__kernel_rem_pio2+0xc6>
 8004ea2:	42ef      	cmn	r7, r5
 8004ea4:	d40b      	bmi.n	8004ebe <__kernel_rem_pio2+0xa2>
 8004ea6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004eaa:	e9cd 2300 	strd	r2, r3, [sp]
 8004eae:	f7fb faa1 	bl	80003f4 <__aeabi_i2d>
 8004eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eb6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004eba:	3501      	adds	r5, #1
 8004ebc:	e7da      	b.n	8004e74 <__kernel_rem_pio2+0x58>
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	e7f8      	b.n	8004eb6 <__kernel_rem_pio2+0x9a>
 8004ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004ecc:	f7fb fafc 	bl	80004c8 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed8:	f7fb f940 	bl	800015c <__adddf3>
 8004edc:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	9b07      	ldr	r3, [sp, #28]
 8004ee4:	3f08      	subs	r7, #8
 8004ee6:	429e      	cmp	r6, r3
 8004ee8:	ddec      	ble.n	8004ec4 <__kernel_rem_pio2+0xa8>
 8004eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004ef6:	3508      	adds	r5, #8
 8004ef8:	e7c6      	b.n	8004e88 <__kernel_rem_pio2+0x6c>
 8004efa:	9b02      	ldr	r3, [sp, #8]
 8004efc:	aa0c      	add	r2, sp, #48	; 0x30
 8004efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f04:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004f06:	9e02      	ldr	r6, [sp, #8]
 8004f08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0e:	ab98      	add	r3, sp, #608	; 0x260
 8004f10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f14:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004f18:	ab70      	add	r3, sp, #448	; 0x1c0
 8004f1a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004f1e:	46d0      	mov	r8, sl
 8004f20:	46b1      	mov	r9, r6
 8004f22:	af0c      	add	r7, sp, #48	; 0x30
 8004f24:	9700      	str	r7, [sp, #0]
 8004f26:	f1b9 0f00 	cmp.w	r9, #0
 8004f2a:	f1a8 0808 	sub.w	r8, r8, #8
 8004f2e:	dc71      	bgt.n	8005014 <__kernel_rem_pio2+0x1f8>
 8004f30:	465a      	mov	r2, fp
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f000 fb6f 	bl	8005618 <scalbn>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f40:	4604      	mov	r4, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	f7fb fac0 	bl	80004c8 <__aeabi_dmul>
 8004f48:	f7ff fba2 	bl	8004690 <floor>
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4b6e      	ldr	r3, [pc, #440]	; (8005108 <__kernel_rem_pio2+0x2ec>)
 8004f50:	f7fb faba 	bl	80004c8 <__aeabi_dmul>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4620      	mov	r0, r4
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	f7fb f8fc 	bl	8000158 <__aeabi_dsub>
 8004f60:	460d      	mov	r5, r1
 8004f62:	4604      	mov	r4, r0
 8004f64:	f7fb fd4a 	bl	80009fc <__aeabi_d2iz>
 8004f68:	9004      	str	r0, [sp, #16]
 8004f6a:	f7fb fa43 	bl	80003f4 <__aeabi_i2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7fb f8ef 	bl	8000158 <__aeabi_dsub>
 8004f7a:	f1bb 0f00 	cmp.w	fp, #0
 8004f7e:	4680      	mov	r8, r0
 8004f80:	4689      	mov	r9, r1
 8004f82:	dd70      	ble.n	8005066 <__kernel_rem_pio2+0x24a>
 8004f84:	1e72      	subs	r2, r6, #1
 8004f86:	ab0c      	add	r3, sp, #48	; 0x30
 8004f88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f8c:	9c04      	ldr	r4, [sp, #16]
 8004f8e:	f1cb 0118 	rsb	r1, fp, #24
 8004f92:	fa40 f301 	asr.w	r3, r0, r1
 8004f96:	441c      	add	r4, r3
 8004f98:	408b      	lsls	r3, r1
 8004f9a:	1ac0      	subs	r0, r0, r3
 8004f9c:	ab0c      	add	r3, sp, #48	; 0x30
 8004f9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004fa2:	f1cb 0317 	rsb	r3, fp, #23
 8004fa6:	9404      	str	r4, [sp, #16]
 8004fa8:	fa40 f303 	asr.w	r3, r0, r3
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	9b00      	ldr	r3, [sp, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dd66      	ble.n	8005082 <__kernel_rem_pio2+0x266>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004fba:	4614      	mov	r4, r2
 8004fbc:	9b04      	ldr	r3, [sp, #16]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	4296      	cmp	r6, r2
 8004fc4:	f300 80ac 	bgt.w	8005120 <__kernel_rem_pio2+0x304>
 8004fc8:	f1bb 0f00 	cmp.w	fp, #0
 8004fcc:	dd07      	ble.n	8004fde <__kernel_rem_pio2+0x1c2>
 8004fce:	f1bb 0f01 	cmp.w	fp, #1
 8004fd2:	f000 80b4 	beq.w	800513e <__kernel_rem_pio2+0x322>
 8004fd6:	f1bb 0f02 	cmp.w	fp, #2
 8004fda:	f000 80ba 	beq.w	8005152 <__kernel_rem_pio2+0x336>
 8004fde:	9b00      	ldr	r3, [sp, #0]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d14e      	bne.n	8005082 <__kernel_rem_pio2+0x266>
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4948      	ldr	r1, [pc, #288]	; (800510c <__kernel_rem_pio2+0x2f0>)
 8004fec:	f7fb f8b4 	bl	8000158 <__aeabi_dsub>
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	4689      	mov	r9, r1
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d044      	beq.n	8005082 <__kernel_rem_pio2+0x266>
 8004ff8:	465a      	mov	r2, fp
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	4943      	ldr	r1, [pc, #268]	; (800510c <__kernel_rem_pio2+0x2f0>)
 8004ffe:	f000 fb0b 	bl	8005618 <scalbn>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb f8a5 	bl	8000158 <__aeabi_dsub>
 800500e:	4680      	mov	r8, r0
 8005010:	4689      	mov	r9, r1
 8005012:	e036      	b.n	8005082 <__kernel_rem_pio2+0x266>
 8005014:	2200      	movs	r2, #0
 8005016:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <__kernel_rem_pio2+0x2f4>)
 8005018:	4620      	mov	r0, r4
 800501a:	4629      	mov	r1, r5
 800501c:	f7fb fa54 	bl	80004c8 <__aeabi_dmul>
 8005020:	f7fb fcec 	bl	80009fc <__aeabi_d2iz>
 8005024:	f7fb f9e6 	bl	80003f4 <__aeabi_i2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005030:	2200      	movs	r2, #0
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <__kernel_rem_pio2+0x2f8>)
 8005034:	f7fb fa48 	bl	80004c8 <__aeabi_dmul>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb f88a 	bl	8000158 <__aeabi_dsub>
 8005044:	f7fb fcda 	bl	80009fc <__aeabi_d2iz>
 8005048:	9b00      	ldr	r3, [sp, #0]
 800504a:	f109 39ff 	add.w	r9, r9, #4294967295
 800504e:	f843 0b04 	str.w	r0, [r3], #4
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005058:	e9d8 2300 	ldrd	r2, r3, [r8]
 800505c:	f7fb f87e 	bl	800015c <__adddf3>
 8005060:	4604      	mov	r4, r0
 8005062:	460d      	mov	r5, r1
 8005064:	e75f      	b.n	8004f26 <__kernel_rem_pio2+0x10a>
 8005066:	d105      	bne.n	8005074 <__kernel_rem_pio2+0x258>
 8005068:	1e73      	subs	r3, r6, #1
 800506a:	aa0c      	add	r2, sp, #48	; 0x30
 800506c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005070:	15c3      	asrs	r3, r0, #23
 8005072:	e79b      	b.n	8004fac <__kernel_rem_pio2+0x190>
 8005074:	2200      	movs	r2, #0
 8005076:	4b28      	ldr	r3, [pc, #160]	; (8005118 <__kernel_rem_pio2+0x2fc>)
 8005078:	f7fb fcac 	bl	80009d4 <__aeabi_dcmpge>
 800507c:	2800      	cmp	r0, #0
 800507e:	d13e      	bne.n	80050fe <__kernel_rem_pio2+0x2e2>
 8005080:	9000      	str	r0, [sp, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	4640      	mov	r0, r8
 8005088:	4649      	mov	r1, r9
 800508a:	f7fb fc85 	bl	8000998 <__aeabi_dcmpeq>
 800508e:	2800      	cmp	r0, #0
 8005090:	f000 80b1 	beq.w	80051f6 <__kernel_rem_pio2+0x3da>
 8005094:	1e74      	subs	r4, r6, #1
 8005096:	4623      	mov	r3, r4
 8005098:	2200      	movs	r2, #0
 800509a:	9902      	ldr	r1, [sp, #8]
 800509c:	428b      	cmp	r3, r1
 800509e:	da5f      	bge.n	8005160 <__kernel_rem_pio2+0x344>
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d074      	beq.n	800518e <__kernel_rem_pio2+0x372>
 80050a4:	ab0c      	add	r3, sp, #48	; 0x30
 80050a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80050aa:	f1ab 0b18 	sub.w	fp, fp, #24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 809f 	beq.w	80051f2 <__kernel_rem_pio2+0x3d6>
 80050b4:	465a      	mov	r2, fp
 80050b6:	2000      	movs	r0, #0
 80050b8:	4914      	ldr	r1, [pc, #80]	; (800510c <__kernel_rem_pio2+0x2f0>)
 80050ba:	f000 faad 	bl	8005618 <scalbn>
 80050be:	46a2      	mov	sl, r4
 80050c0:	4606      	mov	r6, r0
 80050c2:	460f      	mov	r7, r1
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	ab70      	add	r3, sp, #448	; 0x1c0
 80050ca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005110 <__kernel_rem_pio2+0x2f4>
 80050ce:	00e5      	lsls	r5, r4, #3
 80050d0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80050d4:	f1ba 0f00 	cmp.w	sl, #0
 80050d8:	f280 80c3 	bge.w	8005262 <__kernel_rem_pio2+0x446>
 80050dc:	4626      	mov	r6, r4
 80050de:	2e00      	cmp	r6, #0
 80050e0:	f2c0 80f5 	blt.w	80052ce <__kernel_rem_pio2+0x4b2>
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <__kernel_rem_pio2+0x300>)
 80050e6:	f04f 0a00 	mov.w	sl, #0
 80050ea:	9307      	str	r3, [sp, #28]
 80050ec:	ab70      	add	r3, sp, #448	; 0x1c0
 80050ee:	f04f 0b00 	mov.w	fp, #0
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80050fa:	1ba7      	subs	r7, r4, r6
 80050fc:	e0db      	b.n	80052b6 <__kernel_rem_pio2+0x49a>
 80050fe:	2302      	movs	r3, #2
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	e757      	b.n	8004fb4 <__kernel_rem_pio2+0x198>
 8005104:	08005920 	.word	0x08005920
 8005108:	40200000 	.word	0x40200000
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	3e700000 	.word	0x3e700000
 8005114:	41700000 	.word	0x41700000
 8005118:	3fe00000 	.word	0x3fe00000
 800511c:	080058e0 	.word	0x080058e0
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	b944      	cbnz	r4, 8005136 <__kernel_rem_pio2+0x31a>
 8005124:	b11b      	cbz	r3, 800512e <__kernel_rem_pio2+0x312>
 8005126:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	2301      	movs	r3, #1
 800512e:	461c      	mov	r4, r3
 8005130:	3201      	adds	r2, #1
 8005132:	3704      	adds	r7, #4
 8005134:	e745      	b.n	8004fc2 <__kernel_rem_pio2+0x1a6>
 8005136:	1acb      	subs	r3, r1, r3
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4623      	mov	r3, r4
 800513c:	e7f7      	b.n	800512e <__kernel_rem_pio2+0x312>
 800513e:	1e72      	subs	r2, r6, #1
 8005140:	ab0c      	add	r3, sp, #48	; 0x30
 8005142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005146:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800514a:	a90c      	add	r1, sp, #48	; 0x30
 800514c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005150:	e745      	b.n	8004fde <__kernel_rem_pio2+0x1c2>
 8005152:	1e72      	subs	r2, r6, #1
 8005154:	ab0c      	add	r3, sp, #48	; 0x30
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800515e:	e7f4      	b.n	800514a <__kernel_rem_pio2+0x32e>
 8005160:	a90c      	add	r1, sp, #48	; 0x30
 8005162:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005166:	3b01      	subs	r3, #1
 8005168:	430a      	orrs	r2, r1
 800516a:	e796      	b.n	800509a <__kernel_rem_pio2+0x27e>
 800516c:	3401      	adds	r4, #1
 800516e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005172:	2a00      	cmp	r2, #0
 8005174:	d0fa      	beq.n	800516c <__kernel_rem_pio2+0x350>
 8005176:	9b08      	ldr	r3, [sp, #32]
 8005178:	f106 0801 	add.w	r8, r6, #1
 800517c:	18f5      	adds	r5, r6, r3
 800517e:	ab20      	add	r3, sp, #128	; 0x80
 8005180:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005184:	4434      	add	r4, r6
 8005186:	4544      	cmp	r4, r8
 8005188:	da04      	bge.n	8005194 <__kernel_rem_pio2+0x378>
 800518a:	4626      	mov	r6, r4
 800518c:	e6bf      	b.n	8004f0e <__kernel_rem_pio2+0xf2>
 800518e:	2401      	movs	r4, #1
 8005190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005192:	e7ec      	b.n	800516e <__kernel_rem_pio2+0x352>
 8005194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005196:	f04f 0900 	mov.w	r9, #0
 800519a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800519e:	f7fb f929 	bl	80003f4 <__aeabi_i2d>
 80051a2:	2600      	movs	r6, #0
 80051a4:	2700      	movs	r7, #0
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	e9c5 0100 	strd	r0, r1, [r5]
 80051ac:	3b08      	subs	r3, #8
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	9504      	str	r5, [sp, #16]
 80051b2:	9b07      	ldr	r3, [sp, #28]
 80051b4:	4599      	cmp	r9, r3
 80051b6:	dd05      	ble.n	80051c4 <__kernel_rem_pio2+0x3a8>
 80051b8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80051bc:	f108 0801 	add.w	r8, r8, #1
 80051c0:	3508      	adds	r5, #8
 80051c2:	e7e0      	b.n	8005186 <__kernel_rem_pio2+0x36a>
 80051c4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80051c8:	9900      	ldr	r1, [sp, #0]
 80051ca:	f109 0901 	add.w	r9, r9, #1
 80051ce:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80051d2:	9100      	str	r1, [sp, #0]
 80051d4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80051d8:	f8cd c010 	str.w	ip, [sp, #16]
 80051dc:	f7fb f974 	bl	80004c8 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4630      	mov	r0, r6
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fa ffb8 	bl	800015c <__adddf3>
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	e7df      	b.n	80051b2 <__kernel_rem_pio2+0x396>
 80051f2:	3c01      	subs	r4, #1
 80051f4:	e756      	b.n	80050a4 <__kernel_rem_pio2+0x288>
 80051f6:	f1cb 0200 	rsb	r2, fp, #0
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f000 fa0b 	bl	8005618 <scalbn>
 8005202:	2200      	movs	r2, #0
 8005204:	4ba4      	ldr	r3, [pc, #656]	; (8005498 <__kernel_rem_pio2+0x67c>)
 8005206:	4604      	mov	r4, r0
 8005208:	460d      	mov	r5, r1
 800520a:	f7fb fbe3 	bl	80009d4 <__aeabi_dcmpge>
 800520e:	b1f8      	cbz	r0, 8005250 <__kernel_rem_pio2+0x434>
 8005210:	2200      	movs	r2, #0
 8005212:	4ba2      	ldr	r3, [pc, #648]	; (800549c <__kernel_rem_pio2+0x680>)
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb f956 	bl	80004c8 <__aeabi_dmul>
 800521c:	f7fb fbee 	bl	80009fc <__aeabi_d2iz>
 8005220:	4607      	mov	r7, r0
 8005222:	f7fb f8e7 	bl	80003f4 <__aeabi_i2d>
 8005226:	2200      	movs	r2, #0
 8005228:	4b9b      	ldr	r3, [pc, #620]	; (8005498 <__kernel_rem_pio2+0x67c>)
 800522a:	f7fb f94d 	bl	80004c8 <__aeabi_dmul>
 800522e:	460b      	mov	r3, r1
 8005230:	4602      	mov	r2, r0
 8005232:	4629      	mov	r1, r5
 8005234:	4620      	mov	r0, r4
 8005236:	f7fa ff8f 	bl	8000158 <__aeabi_dsub>
 800523a:	f7fb fbdf 	bl	80009fc <__aeabi_d2iz>
 800523e:	1c74      	adds	r4, r6, #1
 8005240:	ab0c      	add	r3, sp, #48	; 0x30
 8005242:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005246:	f10b 0b18 	add.w	fp, fp, #24
 800524a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800524e:	e731      	b.n	80050b4 <__kernel_rem_pio2+0x298>
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb fbd2 	bl	80009fc <__aeabi_d2iz>
 8005258:	ab0c      	add	r3, sp, #48	; 0x30
 800525a:	4634      	mov	r4, r6
 800525c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005260:	e728      	b.n	80050b4 <__kernel_rem_pio2+0x298>
 8005262:	ab0c      	add	r3, sp, #48	; 0x30
 8005264:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005268:	f7fb f8c4 	bl	80003f4 <__aeabi_i2d>
 800526c:	4632      	mov	r2, r6
 800526e:	463b      	mov	r3, r7
 8005270:	f7fb f92a 	bl	80004c8 <__aeabi_dmul>
 8005274:	4642      	mov	r2, r8
 8005276:	e86b 0102 	strd	r0, r1, [fp], #-8
 800527a:	464b      	mov	r3, r9
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb f922 	bl	80004c8 <__aeabi_dmul>
 8005284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005288:	4606      	mov	r6, r0
 800528a:	460f      	mov	r7, r1
 800528c:	e722      	b.n	80050d4 <__kernel_rem_pio2+0x2b8>
 800528e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005292:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005296:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800529a:	f8cd c01c 	str.w	ip, [sp, #28]
 800529e:	f7fb f913 	bl	80004c8 <__aeabi_dmul>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4650      	mov	r0, sl
 80052a8:	4659      	mov	r1, fp
 80052aa:	f7fa ff57 	bl	800015c <__adddf3>
 80052ae:	4682      	mov	sl, r0
 80052b0:	468b      	mov	fp, r1
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	9b02      	ldr	r3, [sp, #8]
 80052b8:	4598      	cmp	r8, r3
 80052ba:	dc01      	bgt.n	80052c0 <__kernel_rem_pio2+0x4a4>
 80052bc:	45b8      	cmp	r8, r7
 80052be:	dde6      	ble.n	800528e <__kernel_rem_pio2+0x472>
 80052c0:	ab48      	add	r3, sp, #288	; 0x120
 80052c2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80052c6:	e9c7 ab00 	strd	sl, fp, [r7]
 80052ca:	3e01      	subs	r6, #1
 80052cc:	e707      	b.n	80050de <__kernel_rem_pio2+0x2c2>
 80052ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	dc09      	bgt.n	80052e8 <__kernel_rem_pio2+0x4cc>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dc32      	bgt.n	800533e <__kernel_rem_pio2+0x522>
 80052d8:	d05a      	beq.n	8005390 <__kernel_rem_pio2+0x574>
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	f003 0007 	and.w	r0, r3, #7
 80052e0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d1f5      	bne.n	80052da <__kernel_rem_pio2+0x4be>
 80052ee:	ab48      	add	r3, sp, #288	; 0x120
 80052f0:	441d      	add	r5, r3
 80052f2:	46aa      	mov	sl, r5
 80052f4:	46a3      	mov	fp, r4
 80052f6:	f1bb 0f00 	cmp.w	fp, #0
 80052fa:	dc76      	bgt.n	80053ea <__kernel_rem_pio2+0x5ce>
 80052fc:	46aa      	mov	sl, r5
 80052fe:	46a3      	mov	fp, r4
 8005300:	f1bb 0f01 	cmp.w	fp, #1
 8005304:	f300 8090 	bgt.w	8005428 <__kernel_rem_pio2+0x60c>
 8005308:	2700      	movs	r7, #0
 800530a:	463e      	mov	r6, r7
 800530c:	2c01      	cmp	r4, #1
 800530e:	f300 80aa 	bgt.w	8005466 <__kernel_rem_pio2+0x64a>
 8005312:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005316:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800531a:	9b00      	ldr	r3, [sp, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 80ac 	bne.w	800547a <__kernel_rem_pio2+0x65e>
 8005322:	4603      	mov	r3, r0
 8005324:	462a      	mov	r2, r5
 8005326:	9806      	ldr	r0, [sp, #24]
 8005328:	e9c0 2300 	strd	r2, r3, [r0]
 800532c:	4622      	mov	r2, r4
 800532e:	460b      	mov	r3, r1
 8005330:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005334:	463a      	mov	r2, r7
 8005336:	4633      	mov	r3, r6
 8005338:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800533c:	e7cd      	b.n	80052da <__kernel_rem_pio2+0x4be>
 800533e:	2000      	movs	r0, #0
 8005340:	46a0      	mov	r8, r4
 8005342:	4601      	mov	r1, r0
 8005344:	ab48      	add	r3, sp, #288	; 0x120
 8005346:	441d      	add	r5, r3
 8005348:	f1b8 0f00 	cmp.w	r8, #0
 800534c:	da3a      	bge.n	80053c4 <__kernel_rem_pio2+0x5a8>
 800534e:	9b00      	ldr	r3, [sp, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03e      	beq.n	80053d2 <__kernel_rem_pio2+0x5b6>
 8005354:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005358:	4602      	mov	r2, r0
 800535a:	462b      	mov	r3, r5
 800535c:	9d06      	ldr	r5, [sp, #24]
 800535e:	2601      	movs	r6, #1
 8005360:	e9c5 2300 	strd	r2, r3, [r5]
 8005364:	460b      	mov	r3, r1
 8005366:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800536a:	f7fa fef5 	bl	8000158 <__aeabi_dsub>
 800536e:	4684      	mov	ip, r0
 8005370:	460f      	mov	r7, r1
 8005372:	ad48      	add	r5, sp, #288	; 0x120
 8005374:	42b4      	cmp	r4, r6
 8005376:	f105 0508 	add.w	r5, r5, #8
 800537a:	da2c      	bge.n	80053d6 <__kernel_rem_pio2+0x5ba>
 800537c:	9b00      	ldr	r3, [sp, #0]
 800537e:	b10b      	cbz	r3, 8005384 <__kernel_rem_pio2+0x568>
 8005380:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005384:	4662      	mov	r2, ip
 8005386:	463b      	mov	r3, r7
 8005388:	9906      	ldr	r1, [sp, #24]
 800538a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800538e:	e7a4      	b.n	80052da <__kernel_rem_pio2+0x4be>
 8005390:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005392:	ab48      	add	r3, sp, #288	; 0x120
 8005394:	4637      	mov	r7, r6
 8005396:	441d      	add	r5, r3
 8005398:	2c00      	cmp	r4, #0
 800539a:	da09      	bge.n	80053b0 <__kernel_rem_pio2+0x594>
 800539c:	9b00      	ldr	r3, [sp, #0]
 800539e:	b10b      	cbz	r3, 80053a4 <__kernel_rem_pio2+0x588>
 80053a0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	9906      	ldr	r1, [sp, #24]
 80053aa:	e9c1 2300 	strd	r2, r3, [r1]
 80053ae:	e794      	b.n	80052da <__kernel_rem_pio2+0x4be>
 80053b0:	4630      	mov	r0, r6
 80053b2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fa fed0 	bl	800015c <__adddf3>
 80053bc:	3c01      	subs	r4, #1
 80053be:	4606      	mov	r6, r0
 80053c0:	460f      	mov	r7, r1
 80053c2:	e7e9      	b.n	8005398 <__kernel_rem_pio2+0x57c>
 80053c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80053c8:	f7fa fec8 	bl	800015c <__adddf3>
 80053cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80053d0:	e7ba      	b.n	8005348 <__kernel_rem_pio2+0x52c>
 80053d2:	460d      	mov	r5, r1
 80053d4:	e7c0      	b.n	8005358 <__kernel_rem_pio2+0x53c>
 80053d6:	4660      	mov	r0, ip
 80053d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053dc:	4639      	mov	r1, r7
 80053de:	f7fa febd 	bl	800015c <__adddf3>
 80053e2:	3601      	adds	r6, #1
 80053e4:	4684      	mov	ip, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	e7c4      	b.n	8005374 <__kernel_rem_pio2+0x558>
 80053ea:	e9da 6700 	ldrd	r6, r7, [sl]
 80053ee:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80053f2:	4632      	mov	r2, r6
 80053f4:	463b      	mov	r3, r7
 80053f6:	4640      	mov	r0, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	f7fa feaf 	bl	800015c <__adddf3>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fa fea5 	bl	8000158 <__aeabi_dsub>
 800540e:	4632      	mov	r2, r6
 8005410:	463b      	mov	r3, r7
 8005412:	f7fa fea3 	bl	800015c <__adddf3>
 8005416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800541a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800541e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005422:	e9ca 2300 	strd	r2, r3, [sl]
 8005426:	e766      	b.n	80052f6 <__kernel_rem_pio2+0x4da>
 8005428:	e9da 8900 	ldrd	r8, r9, [sl]
 800542c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fa fe90 	bl	800015c <__adddf3>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005444:	4630      	mov	r0, r6
 8005446:	4639      	mov	r1, r7
 8005448:	f7fa fe86 	bl	8000158 <__aeabi_dsub>
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	f7fa fe84 	bl	800015c <__adddf3>
 8005454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005458:	e86a 0102 	strd	r0, r1, [sl], #-8
 800545c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005460:	e9ca 2300 	strd	r2, r3, [sl]
 8005464:	e74c      	b.n	8005300 <__kernel_rem_pio2+0x4e4>
 8005466:	4638      	mov	r0, r7
 8005468:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800546c:	4631      	mov	r1, r6
 800546e:	f7fa fe75 	bl	800015c <__adddf3>
 8005472:	3c01      	subs	r4, #1
 8005474:	4607      	mov	r7, r0
 8005476:	460e      	mov	r6, r1
 8005478:	e748      	b.n	800530c <__kernel_rem_pio2+0x4f0>
 800547a:	9b06      	ldr	r3, [sp, #24]
 800547c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005480:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005484:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005488:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800548c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005490:	601d      	str	r5, [r3, #0]
 8005492:	615e      	str	r6, [r3, #20]
 8005494:	e721      	b.n	80052da <__kernel_rem_pio2+0x4be>
 8005496:	bf00      	nop
 8005498:	41700000 	.word	0x41700000
 800549c:	3e700000 	.word	0x3e700000

080054a0 <__kernel_sin>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	e9cd 2300 	strd	r2, r3, [sp]
 80054aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80054b2:	4682      	mov	sl, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80054b8:	da03      	bge.n	80054c2 <__kernel_sin+0x22>
 80054ba:	f7fb fa9f 	bl	80009fc <__aeabi_d2iz>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d050      	beq.n	8005564 <__kernel_sin+0xc4>
 80054c2:	4652      	mov	r2, sl
 80054c4:	4623      	mov	r3, r4
 80054c6:	4650      	mov	r0, sl
 80054c8:	4621      	mov	r1, r4
 80054ca:	f7fa fffd 	bl	80004c8 <__aeabi_dmul>
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4650      	mov	r0, sl
 80054d8:	4621      	mov	r1, r4
 80054da:	f7fa fff5 	bl	80004c8 <__aeabi_dmul>
 80054de:	a33e      	add	r3, pc, #248	; (adr r3, 80055d8 <__kernel_sin+0x138>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	4680      	mov	r8, r0
 80054e6:	4689      	mov	r9, r1
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	f7fa ffec 	bl	80004c8 <__aeabi_dmul>
 80054f0:	a33b      	add	r3, pc, #236	; (adr r3, 80055e0 <__kernel_sin+0x140>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fa fe2f 	bl	8000158 <__aeabi_dsub>
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	f7fa ffe3 	bl	80004c8 <__aeabi_dmul>
 8005502:	a339      	add	r3, pc, #228	; (adr r3, 80055e8 <__kernel_sin+0x148>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fe28 	bl	800015c <__adddf3>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fa ffda 	bl	80004c8 <__aeabi_dmul>
 8005514:	a336      	add	r3, pc, #216	; (adr r3, 80055f0 <__kernel_sin+0x150>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fe1d 	bl	8000158 <__aeabi_dsub>
 800551e:	4632      	mov	r2, r6
 8005520:	463b      	mov	r3, r7
 8005522:	f7fa ffd1 	bl	80004c8 <__aeabi_dmul>
 8005526:	a334      	add	r3, pc, #208	; (adr r3, 80055f8 <__kernel_sin+0x158>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fe16 	bl	800015c <__adddf3>
 8005530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005534:	b9dd      	cbnz	r5, 800556e <__kernel_sin+0xce>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fa ffc3 	bl	80004c8 <__aeabi_dmul>
 8005542:	a32f      	add	r3, pc, #188	; (adr r3, 8005600 <__kernel_sin+0x160>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa fe06 	bl	8000158 <__aeabi_dsub>
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4650      	mov	r0, sl
 800555a:	4621      	mov	r1, r4
 800555c:	f7fa fdfe 	bl	800015c <__adddf3>
 8005560:	4682      	mov	sl, r0
 8005562:	460c      	mov	r4, r1
 8005564:	4650      	mov	r0, sl
 8005566:	4621      	mov	r1, r4
 8005568:	b006      	add	sp, #24
 800556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556e:	2200      	movs	r2, #0
 8005570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <__kernel_sin+0x168>)
 8005576:	f7fa ffa7 	bl	80004c8 <__aeabi_dmul>
 800557a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800557e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fa ff9f 	bl	80004c8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005592:	f7fa fde1 	bl	8000158 <__aeabi_dsub>
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	f7fa ff95 	bl	80004c8 <__aeabi_dmul>
 800559e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055a2:	f7fa fdd9 	bl	8000158 <__aeabi_dsub>
 80055a6:	a316      	add	r3, pc, #88	; (adr r3, 8005600 <__kernel_sin+0x160>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	4606      	mov	r6, r0
 80055ae:	460f      	mov	r7, r1
 80055b0:	4640      	mov	r0, r8
 80055b2:	4649      	mov	r1, r9
 80055b4:	f7fa ff88 	bl	80004c8 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fa fdcc 	bl	800015c <__adddf3>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4650      	mov	r0, sl
 80055ca:	4621      	mov	r1, r4
 80055cc:	f7fa fdc4 	bl	8000158 <__aeabi_dsub>
 80055d0:	e7c6      	b.n	8005560 <__kernel_sin+0xc0>
 80055d2:	bf00      	nop
 80055d4:	f3af 8000 	nop.w
 80055d8:	5acfd57c 	.word	0x5acfd57c
 80055dc:	3de5d93a 	.word	0x3de5d93a
 80055e0:	8a2b9ceb 	.word	0x8a2b9ceb
 80055e4:	3e5ae5e6 	.word	0x3e5ae5e6
 80055e8:	57b1fe7d 	.word	0x57b1fe7d
 80055ec:	3ec71de3 	.word	0x3ec71de3
 80055f0:	19c161d5 	.word	0x19c161d5
 80055f4:	3f2a01a0 	.word	0x3f2a01a0
 80055f8:	1110f8a6 	.word	0x1110f8a6
 80055fc:	3f811111 	.word	0x3f811111
 8005600:	55555549 	.word	0x55555549
 8005604:	3fc55555 	.word	0x3fc55555
 8005608:	3fe00000 	.word	0x3fe00000

0800560c <fabs>:
 800560c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005610:	4770      	bx	lr
 8005612:	0000      	movs	r0, r0
 8005614:	0000      	movs	r0, r0
	...

08005618 <scalbn>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
 8005622:	4617      	mov	r7, r2
 8005624:	460b      	mov	r3, r1
 8005626:	b996      	cbnz	r6, 800564e <scalbn+0x36>
 8005628:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800562c:	4303      	orrs	r3, r0
 800562e:	d039      	beq.n	80056a4 <scalbn+0x8c>
 8005630:	4b33      	ldr	r3, [pc, #204]	; (8005700 <scalbn+0xe8>)
 8005632:	2200      	movs	r2, #0
 8005634:	f7fa ff48 	bl	80004c8 <__aeabi_dmul>
 8005638:	4b32      	ldr	r3, [pc, #200]	; (8005704 <scalbn+0xec>)
 800563a:	4604      	mov	r4, r0
 800563c:	429f      	cmp	r7, r3
 800563e:	460d      	mov	r5, r1
 8005640:	da0f      	bge.n	8005662 <scalbn+0x4a>
 8005642:	a32b      	add	r3, pc, #172	; (adr r3, 80056f0 <scalbn+0xd8>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ff3e 	bl	80004c8 <__aeabi_dmul>
 800564c:	e006      	b.n	800565c <scalbn+0x44>
 800564e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005652:	4296      	cmp	r6, r2
 8005654:	d10a      	bne.n	800566c <scalbn+0x54>
 8005656:	4602      	mov	r2, r0
 8005658:	f7fa fd80 	bl	800015c <__adddf3>
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	e020      	b.n	80056a4 <scalbn+0x8c>
 8005662:	460b      	mov	r3, r1
 8005664:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005668:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800566c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005670:	19b9      	adds	r1, r7, r6
 8005672:	4291      	cmp	r1, r2
 8005674:	dd0e      	ble.n	8005694 <scalbn+0x7c>
 8005676:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800567a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800567e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005682:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005686:	4820      	ldr	r0, [pc, #128]	; (8005708 <scalbn+0xf0>)
 8005688:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800568c:	a31a      	add	r3, pc, #104	; (adr r3, 80056f8 <scalbn+0xe0>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	e7d9      	b.n	8005648 <scalbn+0x30>
 8005694:	2900      	cmp	r1, #0
 8005696:	dd08      	ble.n	80056aa <scalbn+0x92>
 8005698:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800569c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80056ae:	da12      	bge.n	80056d6 <scalbn+0xbe>
 80056b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80056b4:	429f      	cmp	r7, r3
 80056b6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80056ba:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80056be:	dcdc      	bgt.n	800567a <scalbn+0x62>
 80056c0:	a30b      	add	r3, pc, #44	; (adr r3, 80056f0 <scalbn+0xd8>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80056ca:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80056ce:	480f      	ldr	r0, [pc, #60]	; (800570c <scalbn+0xf4>)
 80056d0:	f041 011f 	orr.w	r1, r1, #31
 80056d4:	e7b8      	b.n	8005648 <scalbn+0x30>
 80056d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056da:	3136      	adds	r1, #54	; 0x36
 80056dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	2200      	movs	r2, #0
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <scalbn+0xf8>)
 80056ec:	e7ac      	b.n	8005648 <scalbn+0x30>
 80056ee:	bf00      	nop
 80056f0:	c2f8f359 	.word	0xc2f8f359
 80056f4:	01a56e1f 	.word	0x01a56e1f
 80056f8:	8800759c 	.word	0x8800759c
 80056fc:	7e37e43c 	.word	0x7e37e43c
 8005700:	43500000 	.word	0x43500000
 8005704:	ffff3cb0 	.word	0xffff3cb0
 8005708:	8800759c 	.word	0x8800759c
 800570c:	c2f8f359 	.word	0xc2f8f359
 8005710:	3c900000 	.word	0x3c900000

08005714 <_init>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr

08005720 <_fini>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr
