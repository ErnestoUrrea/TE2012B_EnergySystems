
stm32_SVPWM_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004898  08004898  00014898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a98  08004a98  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a98  08004a98  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004aa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002820  2000002c  08004acc  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000284c  08004acc  0002284c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008618  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c9  00000000  00000000  0002866d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eae  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009831  00000000  00000000  00041d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875b4  00000000  00000000  0004b53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000d2b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000002c 	.word	0x2000002c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800487c 	.word	0x0800487c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000030 	.word	0x20000030
 800014c:	0800487c 	.word	0x0800487c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_frsub>:
 8000a8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	e002      	b.n	8000a98 <__addsf3>
 8000a92:	bf00      	nop

08000a94 <__aeabi_fsub>:
 8000a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a98 <__addsf3>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	bf1f      	itttt	ne
 8000a9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa0:	ea92 0f03 	teqne	r2, r3
 8000aa4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aac:	d06a      	beq.n	8000b84 <__addsf3+0xec>
 8000aae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab6:	bfc1      	itttt	gt
 8000ab8:	18d2      	addgt	r2, r2, r3
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	4048      	eorgt	r0, r1
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	2b19      	cmp	r3, #25
 8000ac6:	bf88      	it	hi
 8000ac8:	4770      	bxhi	lr
 8000aca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4249      	negne	r1, r1
 8000aea:	ea92 0f03 	teq	r2, r3
 8000aee:	d03f      	beq.n	8000b70 <__addsf3+0xd8>
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	fa41 fc03 	asr.w	ip, r1, r3
 8000af8:	eb10 000c 	adds.w	r0, r0, ip
 8000afc:	f1c3 0320 	rsb	r3, r3, #32
 8000b00:	fa01 f103 	lsl.w	r1, r1, r3
 8000b04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__addsf3+0x78>
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b14:	d313      	bcc.n	8000b3e <__addsf3+0xa6>
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d306      	bcc.n	8000b2a <__addsf3+0x92>
 8000b1c:	0840      	lsrs	r0, r0, #1
 8000b1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b22:	f102 0201 	add.w	r2, r2, #1
 8000b26:	2afe      	cmp	r2, #254	; 0xfe
 8000b28:	d251      	bcs.n	8000bce <__addsf3+0x136>
 8000b2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b32:	bf08      	it	eq
 8000b34:	f020 0001 	biceq.w	r0, r0, #1
 8000b38:	ea40 0003 	orr.w	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	0049      	lsls	r1, r1, #1
 8000b40:	eb40 0000 	adc.w	r0, r0, r0
 8000b44:	3a01      	subs	r2, #1
 8000b46:	bf28      	it	cs
 8000b48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b4c:	d2ed      	bcs.n	8000b2a <__addsf3+0x92>
 8000b4e:	fab0 fc80 	clz	ip, r0
 8000b52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b56:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5e:	bfaa      	itet	ge
 8000b60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b64:	4252      	neglt	r2, r2
 8000b66:	4318      	orrge	r0, r3
 8000b68:	bfbc      	itt	lt
 8000b6a:	40d0      	lsrlt	r0, r2
 8000b6c:	4318      	orrlt	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	f092 0f00 	teq	r2, #0
 8000b74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b78:	bf06      	itte	eq
 8000b7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7e:	3201      	addeq	r2, #1
 8000b80:	3b01      	subne	r3, #1
 8000b82:	e7b5      	b.n	8000af0 <__addsf3+0x58>
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d021      	beq.n	8000bd8 <__addsf3+0x140>
 8000b94:	ea92 0f03 	teq	r2, r3
 8000b98:	d004      	beq.n	8000ba4 <__addsf3+0x10c>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	4608      	moveq	r0, r1
 8000ba2:	4770      	bx	lr
 8000ba4:	ea90 0f01 	teq	r0, r1
 8000ba8:	bf1c      	itt	ne
 8000baa:	2000      	movne	r0, #0
 8000bac:	4770      	bxne	lr
 8000bae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb2:	d104      	bne.n	8000bbe <__addsf3+0x126>
 8000bb4:	0040      	lsls	r0, r0, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	4770      	bx	lr
 8000bbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc2:	bf3c      	itt	cc
 8000bc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bxcc	lr
 8000bca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	4770      	bx	lr
 8000bd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bdc:	bf16      	itet	ne
 8000bde:	4608      	movne	r0, r1
 8000be0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be4:	4601      	movne	r1, r0
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	bf06      	itte	eq
 8000bea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bee:	ea90 0f01 	teqeq	r0, r1
 8000bf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ui2f>:
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e004      	b.n	8000c08 <__aeabi_i2f+0x8>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_i2f>:
 8000c00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	bf48      	it	mi
 8000c06:	4240      	negmi	r0, r0
 8000c08:	ea5f 0c00 	movs.w	ip, r0
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c14:	4601      	mov	r1, r0
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	e01c      	b.n	8000c56 <__aeabi_l2f+0x2a>

08000c1c <__aeabi_ul2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e00a      	b.n	8000c40 <__aeabi_l2f+0x14>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_l2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_l2f+0x14>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	ea5f 0c01 	movs.w	ip, r1
 8000c44:	bf02      	ittt	eq
 8000c46:	4684      	moveq	ip, r0
 8000c48:	4601      	moveq	r1, r0
 8000c4a:	2000      	moveq	r0, #0
 8000c4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c50:	bf08      	it	eq
 8000c52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5a:	fabc f28c 	clz	r2, ip
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c64:	db10      	blt.n	8000c88 <__aeabi_l2f+0x5c>
 8000c66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c78:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f102 0220 	add.w	r2, r2, #32
 8000c8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c98:	fa21 f202 	lsr.w	r2, r1, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca6:	4770      	bx	lr

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fd32 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f82e 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f9dc 	bl	8001070 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cb8:	f000 f870 	bl	8000d9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f926 	bl	8000f0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cc0:	f000 f988 	bl	8000fd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  sineValuesGeneration();
 8000cc4:	f000 fa04 	bl	80010d0 <sineValuesGeneration>

  HAL_TIM_Base_Start_IT(&htim2);
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <main+0x60>)
 8000cca:	f001 fc69 	bl	80025a0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(250);
 8000cce:	20fa      	movs	r0, #250	; 0xfa
 8000cd0:	f000 fd82 	bl	80017d8 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <main+0x64>)
 8000cd8:	f001 fd0c 	bl	80026f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <main+0x64>)
 8000ce0:	f002 fbd8 	bl	8003494 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <main+0x64>)
 8000ce8:	f001 fd04 	bl	80026f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000cec:	2104      	movs	r1, #4
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <main+0x64>)
 8000cf0:	f002 fbd0 	bl	8003494 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <main+0x64>)
 8000cf8:	f001 fcfc 	bl	80026f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <main+0x64>)
 8000d00:	f002 fbc8 	bl	8003494 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <main+0x5c>
 8000d06:	bf00      	nop
 8000d08:	20000090 	.word	0x20000090
 8000d0c:	20000048 	.word	0x20000048

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	; 0x40
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fd60 	bl	80037e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fff3 	bl	8001d44 <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d64:	f000 fb6c 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	230f      	movs	r3, #15
 8000d6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2102      	movs	r1, #2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fa60 	bl	8002248 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d8e:	f000 fb57 	bl	8001440 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	; 0x58
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fd05 	bl	80037e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dda:	4b4a      	ldr	r3, [pc, #296]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <MX_TIM1_Init+0x16c>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000de0:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000de8:	2260      	movs	r2, #96	; 0x60
 8000dea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11999;
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000dee:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000df2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e06:	483f      	ldr	r0, [pc, #252]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e08:	f001 fb7a 	bl	8002500 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e12:	f000 fb15 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e20:	4619      	mov	r1, r3
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e24:	f001 fed2 	bl	8002bcc <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e2e:	f000 fb07 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e32:	4834      	ldr	r0, [pc, #208]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e34:	f001 fc06 	bl	8002644 <HAL_TIM_PWM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e3e:	f000 faff 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e42:	2310      	movs	r3, #16
 8000e44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482c      	ldr	r0, [pc, #176]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e52:	f002 fbbd 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e5c:	f000 faf0 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e86:	f001 fddf 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e90:	f000 fad6 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000e9e:	f001 fdd3 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ea8:	f000 faca 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000eb6:	f001 fdc7 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ec0:	f000 fabe 	bl	8001440 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 172;
 8000ed0:	23ac      	movs	r3, #172	; 0xac
 8000ed2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000ee8:	f002 fbd0 	bl	800368c <HAL_TIMEx_ConfigBreakDeadTime>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ef2:	f000 faa5 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM1_Init+0x168>)
 8000ef8:	f000 fb2e 	bl	8001558 <HAL_TIM_MspPostInit>

}
 8000efc:	bf00      	nop
 8000efe:	3758      	adds	r7, #88	; 0x58
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000048 	.word	0x20000048
 8000f08:	40012c00 	.word	0x40012c00

08000f0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f48:	2260      	movs	r2, #96	; 0x60
 8000f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f4e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f62:	f001 facd 	bl	8002500 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000f6c:	f000 fa68 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f7e:	f001 fe25 	bl	8002bcc <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f88:	f000 fa5a 	bl	8001440 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000f9c:	f001 fedd 	bl	8002d5a <HAL_TIM_SlaveConfigSynchro>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 fa4b 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000faa:	2320      	movs	r3, #32
 8000fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM2_Init+0xc4>)
 8000fb8:	f002 fb0a 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000fc2:	f000 fa3d 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <MX_TIM3_Init+0x98>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM3_Init+0x94>)
 8001004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_TIM3_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_TIM3_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_TIM3_Init+0x94>)
 8001018:	f001 fa72 	bl	8002500 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 fa0d 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_TIM3_Init+0x94>)
 8001034:	f001 fdca 	bl	8002bcc <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f9ff 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_TIM3_Init+0x94>)
 8001050:	f002 fabe 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800105a:	f000 f9f1 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000d8 	.word	0x200000d8
 800106c:	40000400 	.word	0x40000400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <MX_GPIO_Init+0x58>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_GPIO_Init+0x58>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	00000000 	.word	0x00000000

080010d0 <sineValuesGeneration>:
/* USER CODE BEGIN 4 */
/**
  * @brief  This function pre-generates the sine values for modulator signal.
  * @retval None
  */
void sineValuesGeneration(void){
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
	// Number of samples for one period
	N  = 2*floor(FSW/freq);  // For generated frequency (f).
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <sineValuesGeneration+0x148>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	a148      	add	r1, pc, #288	; (adr r1, 8001200 <sineValuesGeneration+0x130>)
 80010e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010e4:	f7ff fb1a 	bl	800071c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f002 fb82 	bl	80037f8 <floor>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	f7ff f830 	bl	800015c <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fca2 	bl	8000a4c <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <sineValuesGeneration+0x14c>)
 800110c:	6013      	str	r3, [r2, #0]
	N0 = 2*floor(FSW/freq0); // For base frequency (f0).
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <sineValuesGeneration+0x150>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	a13a      	add	r1, pc, #232	; (adr r1, 8001200 <sineValuesGeneration+0x130>)
 8001116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800111a:	f7ff faff 	bl	800071c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f002 fb67 	bl	80037f8 <floor>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	f7ff f815 	bl	800015c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc87 	bl	8000a4c <__aeabi_d2uiz>
 800113e:	4603      	mov	r3, r0
 8001140:	4a38      	ldr	r2, [pc, #224]	; (8001224 <sineValuesGeneration+0x154>)
 8001142:	6013      	str	r3, [r2, #0]

	// Generation of sinusoidal reference wave
	for(uint16_t i = 0; i < N0/6; i++){
 8001144:	2300      	movs	r3, #0
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	e048      	b.n	80011dc <sineValuesGeneration+0x10c>
		sinValues[i] = round(959.00*m*sin(2*PI*(float)i/N0));
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <sineValuesGeneration+0x158>)
 800114c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001150:	a32d      	add	r3, pc, #180	; (adr r3, 8001208 <sineValuesGeneration+0x138>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9b7 	bl	80004c8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4614      	mov	r4, r2
 8001160:	461d      	mov	r5, r3
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fd47 	bl	8000bf8 <__aeabi_ui2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f953 	bl	8000418 <__aeabi_f2d>
 8001172:	a327      	add	r3, pc, #156	; (adr r3, 8001210 <sineValuesGeneration+0x140>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f9a6 	bl	80004c8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4690      	mov	r8, r2
 8001182:	4699      	mov	r9, r3
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <sineValuesGeneration+0x154>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f923 	bl	80003d4 <__aeabi_ui2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4640      	mov	r0, r8
 8001194:	4649      	mov	r1, r9
 8001196:	f7ff fac1 	bl	800071c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f002 fbf1 	bl	8003988 <sin>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff f98b 	bl	80004c8 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f002 fb9d 	bl	80038f8 <round>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	88fc      	ldrh	r4, [r7, #6]
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc40 	bl	8000a4c <__aeabi_d2uiz>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <sineValuesGeneration+0x15c>)
 80011d2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint16_t i = 0; i < N0/6; i++){
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	3301      	adds	r3, #1
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	88fa      	ldrh	r2, [r7, #6]
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <sineValuesGeneration+0x154>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4913      	ldr	r1, [pc, #76]	; (8001230 <sineValuesGeneration+0x160>)
 80011e4:	fba1 1303 	umull	r1, r3, r1, r3
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3ad      	bcc.n	800114a <sineValuesGeneration+0x7a>
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	00000000 	.word	0x00000000
 8001204:	40e24f80 	.word	0x40e24f80
 8001208:	00000000 	.word	0x00000000
 800120c:	408df800 	.word	0x408df800
 8001210:	54442d18 	.word	0x54442d18
 8001214:	401921fb 	.word	0x401921fb
 8001218:	20000010 	.word	0x20000010
 800121c:	20002844 	.word	0x20002844
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000018 	.word	0x20000018
 800122c:	20000120 	.word	0x20000120
 8001230:	aaaaaaab 	.word	0xaaaaaaab

08001234 <HAL_TIM_PeriodElapsedCallback>:
//void changeFrequency(double f){
//	freq = f;
//	N  = 2*floor(FSW/freq);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	// Conditioning of counter
	//counter0 = round((double)N0*(double)counter/(double)N);

	// Periods
	da = sinValues[N/6 - counter_sec - 1];
 800123c:	4b77      	ldr	r3, [pc, #476]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	089a      	lsrs	r2, r3, #2
 8001248:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	4a75      	ldr	r2, [pc, #468]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001256:	461a      	mov	r2, r3
 8001258:	4b74      	ldr	r3, [pc, #464]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800125a:	601a      	str	r2, [r3, #0]
	db = sinValues[counter_sec];
 800125c:	4b71      	ldr	r3, [pc, #452]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a71      	ldr	r2, [pc, #452]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001266:	461a      	mov	r2, r3
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800126a:	601a      	str	r2, [r3, #0]
	d0 = 959 - da - db;
 800126c:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	f5c3 736f 	rsb	r3, r3, #956	; 0x3bc
 800127a:	3303      	adds	r3, #3
 800127c:	4a6d      	ldr	r2, [pc, #436]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800127e:	6013      	str	r3, [r2, #0]

	// Periods
	switch(sector){
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b05      	cmp	r3, #5
 8001286:	f200 80a5 	bhi.w	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012db 	.word	0x080012db
 8001298:	0800130d 	.word	0x0800130d
 800129c:	0800133f 	.word	0x0800133f
 80012a0:	08001371 	.word	0x08001371
 80012a4:	080013a3 	.word	0x080013a3
		case 0:
			TIM1->CCR1 = da + db + d0/2;
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	441a      	add	r2, r3
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	4960      	ldr	r1, [pc, #384]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012ba:	4413      	add	r3, r2
 80012bc:	634b      	str	r3, [r1, #52]	; 0x34
			TIM1->CCR2 = db + d0/2;
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	085a      	lsrs	r2, r3, #1
 80012c4:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	495c      	ldr	r1, [pc, #368]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012ca:	4413      	add	r3, r2
 80012cc:	638b      	str	r3, [r1, #56]	; 0x38
			TIM1->CCR3 = d0/2;
 80012ce:	4b59      	ldr	r3, [pc, #356]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5a      	ldr	r2, [pc, #360]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 80012d8:	e07c      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		case 1:
			TIM1->CCR1 = da + d0/2;
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	085a      	lsrs	r2, r3, #1
 80012e0:	4b52      	ldr	r3, [pc, #328]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4955      	ldr	r1, [pc, #340]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012e6:	4413      	add	r3, r2
 80012e8:	634b      	str	r3, [r1, #52]	; 0x34
			TIM1->CCR2 = db + da + d0/2;
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	441a      	add	r2, r3
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	4950      	ldr	r1, [pc, #320]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012fc:	4413      	add	r3, r2
 80012fe:	638b      	str	r3, [r1, #56]	; 0x38
			TIM1->CCR3 = d0/2;
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a4d      	ldr	r2, [pc, #308]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800130a:	e063      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		case 2:
			TIM1->CCR1 = d0/2;
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = da + db + d0/2;
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	441a      	add	r2, r3
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	4945      	ldr	r1, [pc, #276]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001328:	4413      	add	r3, r2
 800132a:	638b      	str	r3, [r1, #56]	; 0x38
			TIM1->CCR3 = db + d0/2;
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	085a      	lsrs	r2, r3, #1
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4941      	ldr	r1, [pc, #260]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001338:	4413      	add	r3, r2
 800133a:	63cb      	str	r3, [r1, #60]	; 0x3c
			break;
 800133c:	e04a      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		case 3:
			TIM1->CCR1 = d0/2;
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a3e      	ldr	r2, [pc, #248]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = da + d0/2;
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	085a      	lsrs	r2, r3, #1
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	493a      	ldr	r1, [pc, #232]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001354:	4413      	add	r3, r2
 8001356:	638b      	str	r3, [r1, #56]	; 0x38
			TIM1->CCR3 = db + da + d0/2;
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	441a      	add	r2, r3
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	4934      	ldr	r1, [pc, #208]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800136a:	4413      	add	r3, r2
 800136c:	63cb      	str	r3, [r1, #60]	; 0x3c
			break;
 800136e:	e031      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		case 4:
			TIM1->CCR1 = db + d0/2;
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	085a      	lsrs	r2, r3, #1
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4930      	ldr	r1, [pc, #192]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800137c:	4413      	add	r3, r2
 800137e:	634b      	str	r3, [r1, #52]	; 0x34
			TIM1->CCR2 = d0/2;
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2d      	ldr	r2, [pc, #180]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = da + db + d0/2;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	441a      	add	r2, r3
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800139c:	4413      	add	r3, r2
 800139e:	63cb      	str	r3, [r1, #60]	; 0x3c
			break;
 80013a0:	e018      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		case 5:
			TIM1->CCR1 = db + da + d0/2;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	441a      	add	r2, r3
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013b4:	4413      	add	r3, r2
 80013b6:	634b      	str	r3, [r1, #52]	; 0x34
			TIM1->CCR2 = d0/2;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = da + d0/2;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	085a      	lsrs	r2, r3, #1
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	491b      	ldr	r1, [pc, #108]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013ce:	4413      	add	r3, r2
 80013d0:	63cb      	str	r3, [r1, #60]	; 0x3c
			break;
 80013d2:	bf00      	nop
	}

	counter_sec++;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013dc:	6013      	str	r3, [r2, #0]
	if(counter_sec >= N/6){
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	089a      	lsrs	r2, r3, #2
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d807      	bhi.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x1ce>
		sector++;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013fa:	6013      	str	r3, [r2, #0]
		counter_sec = 0;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	}
	if(sector > 5){
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d902      	bls.n	8001410 <HAL_TIM_PeriodElapsedCallback+0x1dc>
		sector = 0;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	}
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20002844 	.word	0x20002844
 8001420:	aaaaaaab 	.word	0xaaaaaaab
 8001424:	2000283c 	.word	0x2000283c
 8001428:	20000120 	.word	0x20000120
 800142c:	20002830 	.word	0x20002830
 8001430:	20002834 	.word	0x20002834
 8001434:	20002838 	.word	0x20002838
 8001438:	20002840 	.word	0x20002840
 800143c:	40012c00 	.word	0x40012c00

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_MspInit+0x40>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a0d      	ldr	r2, [pc, #52]	; (800148c <HAL_MspInit+0x40>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_MspInit+0x40>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x40>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_MspInit+0x40>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_MspInit+0x40>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_TIM_Base_MspInit+0xbc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d124      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2019      	movs	r0, #25
 80014c0:	f000 fa85 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014c4:	2019      	movs	r0, #25
 80014c6:	f000 fa9e 	bl	8001a06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201a      	movs	r0, #26
 80014d0:	f000 fa7d 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80014d4:	201a      	movs	r0, #26
 80014d6:	f000 fa96 	bl	8001a06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201b      	movs	r0, #27
 80014e0:	f000 fa75 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014e4:	201b      	movs	r0, #27
 80014e6:	f000 fa8e 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ea:	e02a      	b.n	8001542 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d114      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	201c      	movs	r0, #28
 8001514:	f000 fa5b 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001518:	201c      	movs	r0, #28
 800151a:	f000 fa74 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 800151e:	e010      	b.n	8001542 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0xc4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10b      	bne.n	8001542 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40000400 	.word	0x40000400

08001558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a25      	ldr	r2, [pc, #148]	; (8001608 <HAL_TIM_MspPostInit+0xb0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d142      	bne.n	80015fe <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_TIM_MspPostInit+0xb4>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80015a8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <HAL_TIM_MspPostInit+0xb8>)
 80015be:	f000 fa3d 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c2:	2303      	movs	r3, #3
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_TIM_MspPostInit+0xbc>)
 80015d6:	f000 fa31 	bl	8001a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_TIM_MspPostInit+0xc0>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_TIM_MspPostInit+0xc0>)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40010000 	.word	0x40010000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f89d 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <TIM1_UP_IRQHandler+0x10>)
 8001672:	f001 f8e1 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000048 	.word	0x20000048

08001680 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001686:	f001 f8d7 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000048 	.word	0x20000048

08001694 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM1_CC_IRQHandler+0x10>)
 800169a:	f001 f8cd 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000048 	.word	0x20000048

080016a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM2_IRQHandler+0x10>)
 80016ae:	f001 f8c3 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000090 	.word	0x20000090

080016bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff fff8 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ce:	490c      	ldr	r1, [pc, #48]	; (8001700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016e4:	4c09      	ldr	r4, [pc, #36]	; (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f002 f853 	bl	800379c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f6:	f7ff fad7 	bl	8000ca8 <main>
  bx lr
 80016fa:	4770      	bx	lr
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001704:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 8001708:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800170c:	2000284c 	.word	0x2000284c

08001710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC1_2_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x28>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f947 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fe8c 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f95f 	bl	8001a22 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f927 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000020 	.word	0x20000020
 8001798:	20000028 	.word	0x20000028
 800179c:	20000024 	.word	0x20000024

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x1c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_IncTick+0x20>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_IncTick+0x20>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000028 	.word	0x20000028
 80017c0:	20002848 	.word	0x20002848

080017c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <HAL_GetTick+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20002848 	.word	0x20002848

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffe0 	bl	80017c4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000028 	.word	0x20000028

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <__NVIC_EnableIRQ+0x34>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff90 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff2d 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff42 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff90 	bl	8001910 <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5f 	bl	80018bc <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff35 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e169      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8158 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a9a      	ldr	r2, [pc, #616]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d05e      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a78:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d875      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a7e:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d058      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a84:	4a96      	ldr	r2, [pc, #600]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d86f      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a8a:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d052      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a90:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d869      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a96:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04c      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d863      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aa2:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d046      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d85d      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d82a      	bhi.n	8001b08 <HAL_GPIO_Init+0xcc>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d859      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_GPIO_Init+0x80>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001b23 	.word	0x08001b23
 8001ac8:	08001b65 	.word	0x08001b65
 8001acc:	08001b6b 	.word	0x08001b6b
 8001ad0:	08001b6b 	.word	0x08001b6b
 8001ad4:	08001b6b 	.word	0x08001b6b
 8001ad8:	08001b6b 	.word	0x08001b6b
 8001adc:	08001b6b 	.word	0x08001b6b
 8001ae0:	08001b6b 	.word	0x08001b6b
 8001ae4:	08001b6b 	.word	0x08001b6b
 8001ae8:	08001b6b 	.word	0x08001b6b
 8001aec:	08001b6b 	.word	0x08001b6b
 8001af0:	08001b6b 	.word	0x08001b6b
 8001af4:	08001b6b 	.word	0x08001b6b
 8001af8:	08001b6b 	.word	0x08001b6b
 8001afc:	08001b6b 	.word	0x08001b6b
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b2d 	.word	0x08001b2d
 8001b08:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_GPIO_Init+0x2b4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0e:	e02c      	b.n	8001b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e029      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e024      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3308      	adds	r3, #8
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e01f      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	330c      	adds	r3, #12
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e01a      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e013      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	611a      	str	r2, [r3, #16]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	615a      	str	r2, [r3, #20]
          break;
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          break;
 8001b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d801      	bhi.n	8001b76 <HAL_GPIO_Init+0x13a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_Init+0x13e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	d802      	bhi.n	8001b88 <HAL_GPIO_Init+0x14c>
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x152>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	210f      	movs	r1, #15
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80b1 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd4:	4a48      	ldr	r2, [pc, #288]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <HAL_GPIO_Init+0x2c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_GPIO_Init+0x2c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_GPIO_Init+0x2c8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <HAL_GPIO_Init+0x2cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1e0>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	492f      	ldr	r1, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	492c      	ldr	r1, [pc, #176]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4928      	ldr	r1, [pc, #160]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	491e      	ldr	r1, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4918      	ldr	r1, [pc, #96]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4914      	ldr	r1, [pc, #80]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e021      	b.n	8001d1e <HAL_GPIO_Init+0x2e2>
 8001cda:	bf00      	nop
 8001cdc:	10320000 	.word	0x10320000
 8001ce0:	10310000 	.word	0x10310000
 8001ce4:	10220000 	.word	0x10220000
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	10120000 	.word	0x10120000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4909      	ldr	r1, [pc, #36]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f ae8e 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	372c      	adds	r7, #44	; 0x2c
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e272      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x12c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d168      	bne.n	8001e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e24c      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x76>
 8001dac:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x98>
 8001dc2:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7a      	ldr	r2, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0xbc>
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001e00:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fcd0 	bl	80017c4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fccc 	bl	80017c4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e200      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe4>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fcbc 	bl	80017c4 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fcb8 	bl	80017c4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1ec      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x10c>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1c0      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4939      	ldr	r1, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e03a      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fc71 	bl	80017c4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fc6d 	bl	80017c4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1a1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fc50 	bl	80017c4 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fc4c 	bl	80017c4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e180      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03a      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d019      	beq.n	8001f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fc30 	bl	80017c4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff fc2c 	bl	80017c4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e160      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f000 fa9c 	bl	80024c4 <RCC_Delay>
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fc16 	bl	80017c4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fc12 	bl	80017c4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e146      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	42420000 	.word	0x42420000
 8001fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e9      	bne.n	8001f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a6 	beq.w	8002122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff fbd3 	bl	80017c4 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7ff fbcf 	bl	80017c4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e103      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b75      	ldr	r3, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x312>
 8002048:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e02d      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x334>
 800205e:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a69      	ldr	r2, [pc, #420]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a66      	ldr	r2, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	e01c      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0x356>
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 800209a:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a57      	ldr	r2, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fb83 	bl	80017c4 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fb7f 	bl	80017c4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0b1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCC_OscConfig+0x37e>
 80020e4:	e014      	b.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff fb6d 	bl	80017c4 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff fb69 	bl	80017c4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e09b      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8087 	beq.w	800223a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d061      	beq.n	80021fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d146      	bne.n	80021ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fb3d 	bl	80017c4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff fb39 	bl	80017c4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e06d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a19      	ldr	r1, [r3, #32]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	430b      	orrs	r3, r1
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff fb0d 	bl	80017c4 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff fb09 	bl	80017c4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e03d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x46a>
 80021cc:	e035      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff faf6 	bl	80017c4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff faf2 	bl	80017c4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e026      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x498>
 80021fa:	e01e      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e019      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x500>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d0      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4965      	ldr	r1, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d040      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e073      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4936      	ldr	r1, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fa44 	bl	80017c4 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff fa40 	bl	80017c4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e053      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d210      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1cc>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f9a2 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40021000 	.word	0x40021000
 8002410:	08004898 	.word	0x08004898
 8002414:	20000020 	.word	0x20000020
 8002418:	20000024 	.word	0x20000024

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x30>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x36>
 800244a:	e027      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800244e:	613b      	str	r3, [r7, #16]
      break;
 8002450:	e027      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	0c9b      	lsrs	r3, r3, #18
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0c5b      	lsrs	r3, r3, #17
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e004      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	613b      	str	r3, [r7, #16]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800249e:	613b      	str	r3, [r7, #16]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	693b      	ldr	r3, [r7, #16]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	080048a8 	.word	0x080048a8
 80024bc:	080048b8 	.word	0x080048b8
 80024c0:	003d0900 	.word	0x003d0900

080024c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <RCC_Delay+0x34>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <RCC_Delay+0x38>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e0:	bf00      	nop
  }
  while (Delay --);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <RCC_Delay+0x1c>
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000020 	.word	0x20000020
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe ffb2 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 fc72 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e03a      	b.n	800262e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIM_Base_Start_IT+0x98>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d009      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_Base_Start_IT+0x9c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_TIM_Base_Start_IT+0xa0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d111      	bne.n	800261c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d010      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	e007      	b.n	800262c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800

08002644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e041      	b.n	80026da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f839 	bl	80026e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f000 fbd0 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_TIM_PWM_Start+0x24>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e022      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d109      	bne.n	8002732 <HAL_TIM_PWM_Start+0x3e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e015      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d109      	bne.n	800274c <HAL_TIM_PWM_Start+0x58>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e008      	b.n	800275e <HAL_TIM_PWM_Start+0x6a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e05e      	b.n	8002824 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0x82>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	e013      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Start+0x92>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	e00b      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d104      	bne.n	8002796 <HAL_TIM_PWM_Start+0xa2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002794:	e003      	b.n	800279e <HAL_TIM_PWM_Start+0xaa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fe4f 	bl	800344a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_TIM_PWM_Start+0x138>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_TIM_PWM_Start+0x138>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00e      	beq.n	80027ee <HAL_TIM_PWM_Start+0xfa>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d009      	beq.n	80027ee <HAL_TIM_PWM_Start+0xfa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_TIM_PWM_Start+0x13c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_TIM_PWM_Start+0xfa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_TIM_PWM_Start+0x140>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d111      	bne.n	8002812 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d010      	beq.n	8002822 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002810:	e007      	b.n	8002822 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800

08002838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b02      	cmp	r3, #2
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fab8 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 faab 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 faba 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0204 	mvn.w	r2, #4
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa8e 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa81 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fa90 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0208 	mvn.w	r2, #8
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2204      	movs	r2, #4
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa64 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa57 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa66 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b10      	cmp	r3, #16
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b10      	cmp	r3, #16
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0210 	mvn.w	r2, #16
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2208      	movs	r2, #8
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa3a 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa2d 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa3c 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10e      	bne.n	80029bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0201 	mvn.w	r2, #1
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fc3c 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 feac 	bl	8003740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d10e      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d107      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa00 	bl	8002e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0220 	mvn.w	r2, #32
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fe77 	bl	800372e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0ae      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	f200 809f 	bhi.w	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002bb5 	.word	0x08002bb5
 8002a84:	08002bb5 	.word	0x08002bb5
 8002a88:	08002bb5 	.word	0x08002bb5
 8002a8c:	08002af1 	.word	0x08002af1
 8002a90:	08002bb5 	.word	0x08002bb5
 8002a94:	08002bb5 	.word	0x08002bb5
 8002a98:	08002bb5 	.word	0x08002bb5
 8002a9c:	08002b33 	.word	0x08002b33
 8002aa0:	08002bb5 	.word	0x08002bb5
 8002aa4:	08002bb5 	.word	0x08002bb5
 8002aa8:	08002bb5 	.word	0x08002bb5
 8002aac:	08002b73 	.word	0x08002b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fa18 	bl	8002eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      break;
 8002aee:	e064      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa5e 	bl	8002fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	619a      	str	r2, [r3, #24]
      break;
 8002b30:	e043      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 faa7 	bl	800308c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0208 	orr.w	r2, r2, #8
 8002b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0204 	bic.w	r2, r2, #4
 8002b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	61da      	str	r2, [r3, #28]
      break;
 8002b70:	e023      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 faf1 	bl	8003160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	61da      	str	r2, [r3, #28]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_ConfigClockSource+0x1c>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0b4      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x186>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c20:	d03e      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c26:	f200 8087 	bhi.w	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	f000 8086 	beq.w	8002d3e <HAL_TIM_ConfigClockSource+0x172>
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d87f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b70      	cmp	r3, #112	; 0x70
 8002c3a:	d01a      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xa6>
 8002c3c:	2b70      	cmp	r3, #112	; 0x70
 8002c3e:	d87b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b60      	cmp	r3, #96	; 0x60
 8002c42:	d050      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c44:	2b60      	cmp	r3, #96	; 0x60
 8002c46:	d877      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b50      	cmp	r3, #80	; 0x50
 8002c4a:	d03c      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c4c:	2b50      	cmp	r3, #80	; 0x50
 8002c4e:	d873      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d058      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x13a>
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d86f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b30      	cmp	r3, #48	; 0x30
 8002c5a:	d064      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	2b30      	cmp	r3, #48	; 0x30
 8002c5e:	d86b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d060      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d867      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05c      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d05a      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	e062      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f000 fbc3 	bl	800340c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	609a      	str	r2, [r3, #8]
      break;
 8002c9e:	e04f      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f000 fbac 	bl	800340c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	609a      	str	r2, [r3, #8]
      break;
 8002cc4:	e03c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 fb23 	bl	800331e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2150      	movs	r1, #80	; 0x50
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fb7a 	bl	80033d8 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e02c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 fb41 	bl	800337a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2160      	movs	r1, #96	; 0x60
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fb6a 	bl	80033d8 <TIM_ITRx_SetConfig>
      break;
 8002d04:	e01c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 fb03 	bl	800331e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fb5a 	bl	80033d8 <TIM_ITRx_SetConfig>
      break;
 8002d24:	e00c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 fb51 	bl	80033d8 <TIM_ITRx_SetConfig>
      break;
 8002d36:	e003      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e000      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e031      	b.n	8002dd6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa39 	bl	80031fc <TIM_SlaveTimer_SetConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e018      	b.n	8002dd6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dc2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d007      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d108      	bne.n	8002e9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800

08002eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 0201 	bic.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0302 	bic.w	r3, r3, #2
 8002f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <TIM_OC1_SetConfig+0xc8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f023 0308 	bic.w	r3, r3, #8
 8002f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <TIM_OC1_SetConfig+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40012c00 	.word	0x40012c00

08002fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 0210 	bic.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0320 	bic.w	r3, r3, #32
 8003002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <TIM_OC2_SetConfig+0xd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10d      	bne.n	8003034 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <TIM_OC2_SetConfig+0xd0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d113      	bne.n	8003064 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00

0800308c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <TIM_OC3_SetConfig+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10d      	bne.n	8003106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <TIM_OC3_SetConfig+0xd0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d113      	bne.n	8003136 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00

08003160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	031b      	lsls	r3, r3, #12
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <TIM_OC4_SetConfig+0x98>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00

080031fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b70      	cmp	r3, #112	; 0x70
 8003244:	d01a      	beq.n	800327c <TIM_SlaveTimer_SetConfig+0x80>
 8003246:	2b70      	cmp	r3, #112	; 0x70
 8003248:	d860      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 800324a:	2b60      	cmp	r3, #96	; 0x60
 800324c:	d054      	beq.n	80032f8 <TIM_SlaveTimer_SetConfig+0xfc>
 800324e:	2b60      	cmp	r3, #96	; 0x60
 8003250:	d85c      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 8003252:	2b50      	cmp	r3, #80	; 0x50
 8003254:	d046      	beq.n	80032e4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003256:	2b50      	cmp	r3, #80	; 0x50
 8003258:	d858      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d019      	beq.n	8003292 <TIM_SlaveTimer_SetConfig+0x96>
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d854      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d055      	beq.n	8003312 <TIM_SlaveTimer_SetConfig+0x116>
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d850      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 800326a:	2b20      	cmp	r3, #32
 800326c:	d051      	beq.n	8003312 <TIM_SlaveTimer_SetConfig+0x116>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d84c      	bhi.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d04d      	beq.n	8003312 <TIM_SlaveTimer_SetConfig+0x116>
 8003276:	2b10      	cmp	r3, #16
 8003278:	d04b      	beq.n	8003312 <TIM_SlaveTimer_SetConfig+0x116>
 800327a:	e047      	b.n	800330c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68d9      	ldr	r1, [r3, #12]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f000 f8be 	bl	800340c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003290:	e040      	b.n	8003314 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d101      	bne.n	800329e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e03b      	b.n	8003316 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
      break;
 80032e2:	e017      	b.n	8003314 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f814 	bl	800331e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80032f6:	e00d      	b.n	8003314 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	461a      	mov	r2, r3
 8003306:	f000 f838 	bl	800337a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800330a:	e003      	b.n	8003314 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	e000      	b.n	8003314 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003312:	bf00      	nop
  }

  return status;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 0201 	bic.w	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 030a 	bic.w	r3, r3, #10
 800335a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f023 0210 	bic.w	r2, r3, #16
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f043 0307 	orr.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800344a:	b480      	push	{r7}
 800344c:	b087      	sub	sp, #28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2201      	movs	r2, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_TIMEx_PWMN_Start+0x24>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e022      	b.n	80034fe <HAL_TIMEx_PWMN_Start+0x6a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d109      	bne.n	80034d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e015      	b.n	80034fe <HAL_TIMEx_PWMN_Start+0x6a>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d109      	bne.n	80034ec <HAL_TIMEx_PWMN_Start+0x58>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e008      	b.n	80034fe <HAL_TIMEx_PWMN_Start+0x6a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e059      	b.n	80035ba <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_TIMEx_PWMN_Start+0x82>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003514:	e013      	b.n	800353e <HAL_TIMEx_PWMN_Start+0xaa>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d104      	bne.n	8003526 <HAL_TIMEx_PWMN_Start+0x92>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003524:	e00b      	b.n	800353e <HAL_TIMEx_PWMN_Start+0xaa>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d104      	bne.n	8003536 <HAL_TIMEx_PWMN_Start+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	e003      	b.n	800353e <HAL_TIMEx_PWMN_Start+0xaa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f903 	bl	8003752 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800355a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_TIMEx_PWMN_Start+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0xf0>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d009      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0xf0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_TIMEx_PWMN_Start+0x134>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0xf0>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <HAL_TIMEx_PWMN_Start+0x138>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d010      	beq.n	80035b8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	e007      	b.n	80035b8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800

080035d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e046      	b.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d009      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10c      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800

0800368c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e03d      	b.n	8003724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2204      	movs	r2, #4
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <__libc_init_array>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	2600      	movs	r6, #0
 80037a0:	4d0c      	ldr	r5, [pc, #48]	; (80037d4 <__libc_init_array+0x38>)
 80037a2:	4c0d      	ldr	r4, [pc, #52]	; (80037d8 <__libc_init_array+0x3c>)
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	42a6      	cmp	r6, r4
 80037aa:	d109      	bne.n	80037c0 <__libc_init_array+0x24>
 80037ac:	f001 f866 	bl	800487c <_init>
 80037b0:	2600      	movs	r6, #0
 80037b2:	4d0a      	ldr	r5, [pc, #40]	; (80037dc <__libc_init_array+0x40>)
 80037b4:	4c0a      	ldr	r4, [pc, #40]	; (80037e0 <__libc_init_array+0x44>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	42a6      	cmp	r6, r4
 80037bc:	d105      	bne.n	80037ca <__libc_init_array+0x2e>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c4:	4798      	blx	r3
 80037c6:	3601      	adds	r6, #1
 80037c8:	e7ee      	b.n	80037a8 <__libc_init_array+0xc>
 80037ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ce:	4798      	blx	r3
 80037d0:	3601      	adds	r6, #1
 80037d2:	e7f2      	b.n	80037ba <__libc_init_array+0x1e>
 80037d4:	08004a98 	.word	0x08004a98
 80037d8:	08004a98 	.word	0x08004a98
 80037dc:	08004a98 	.word	0x08004a98
 80037e0:	08004a9c 	.word	0x08004a9c

080037e4 <memset>:
 80037e4:	4603      	mov	r3, r0
 80037e6:	4402      	add	r2, r0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d100      	bne.n	80037ee <memset+0xa>
 80037ec:	4770      	bx	lr
 80037ee:	f803 1b01 	strb.w	r1, [r3], #1
 80037f2:	e7f9      	b.n	80037e8 <memset+0x4>
 80037f4:	0000      	movs	r0, r0
	...

080037f8 <floor>:
 80037f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037fc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003800:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003804:	2e13      	cmp	r6, #19
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4607      	mov	r7, r0
 800380c:	460c      	mov	r4, r1
 800380e:	4605      	mov	r5, r0
 8003810:	dc33      	bgt.n	800387a <floor+0x82>
 8003812:	2e00      	cmp	r6, #0
 8003814:	da14      	bge.n	8003840 <floor+0x48>
 8003816:	a334      	add	r3, pc, #208	; (adr r3, 80038e8 <floor+0xf0>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fc9e 	bl	800015c <__adddf3>
 8003820:	2200      	movs	r2, #0
 8003822:	2300      	movs	r3, #0
 8003824:	f7fd f8e0 	bl	80009e8 <__aeabi_dcmpgt>
 8003828:	b138      	cbz	r0, 800383a <floor+0x42>
 800382a:	2c00      	cmp	r4, #0
 800382c:	da58      	bge.n	80038e0 <floor+0xe8>
 800382e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003832:	431d      	orrs	r5, r3
 8003834:	d001      	beq.n	800383a <floor+0x42>
 8003836:	2500      	movs	r5, #0
 8003838:	4c2d      	ldr	r4, [pc, #180]	; (80038f0 <floor+0xf8>)
 800383a:	4623      	mov	r3, r4
 800383c:	462f      	mov	r7, r5
 800383e:	e025      	b.n	800388c <floor+0x94>
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <floor+0xfc>)
 8003842:	fa42 f806 	asr.w	r8, r2, r6
 8003846:	ea01 0208 	and.w	r2, r1, r8
 800384a:	4302      	orrs	r2, r0
 800384c:	d01e      	beq.n	800388c <floor+0x94>
 800384e:	a326      	add	r3, pc, #152	; (adr r3, 80038e8 <floor+0xf0>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fc82 	bl	800015c <__adddf3>
 8003858:	2200      	movs	r2, #0
 800385a:	2300      	movs	r3, #0
 800385c:	f7fd f8c4 	bl	80009e8 <__aeabi_dcmpgt>
 8003860:	2800      	cmp	r0, #0
 8003862:	d0ea      	beq.n	800383a <floor+0x42>
 8003864:	2c00      	cmp	r4, #0
 8003866:	bfbe      	ittt	lt
 8003868:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800386c:	fa43 f606 	asrlt.w	r6, r3, r6
 8003870:	19a4      	addlt	r4, r4, r6
 8003872:	2500      	movs	r5, #0
 8003874:	ea24 0408 	bic.w	r4, r4, r8
 8003878:	e7df      	b.n	800383a <floor+0x42>
 800387a:	2e33      	cmp	r6, #51	; 0x33
 800387c:	dd0a      	ble.n	8003894 <floor+0x9c>
 800387e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003882:	d103      	bne.n	800388c <floor+0x94>
 8003884:	f7fc fc6a 	bl	800015c <__adddf3>
 8003888:	4607      	mov	r7, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4638      	mov	r0, r7
 800388e:	4619      	mov	r1, r3
 8003890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800389c:	fa22 f808 	lsr.w	r8, r2, r8
 80038a0:	ea18 0f00 	tst.w	r8, r0
 80038a4:	d0f2      	beq.n	800388c <floor+0x94>
 80038a6:	a310      	add	r3, pc, #64	; (adr r3, 80038e8 <floor+0xf0>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fc56 	bl	800015c <__adddf3>
 80038b0:	2200      	movs	r2, #0
 80038b2:	2300      	movs	r3, #0
 80038b4:	f7fd f898 	bl	80009e8 <__aeabi_dcmpgt>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d0be      	beq.n	800383a <floor+0x42>
 80038bc:	2c00      	cmp	r4, #0
 80038be:	da02      	bge.n	80038c6 <floor+0xce>
 80038c0:	2e14      	cmp	r6, #20
 80038c2:	d103      	bne.n	80038cc <floor+0xd4>
 80038c4:	3401      	adds	r4, #1
 80038c6:	ea25 0508 	bic.w	r5, r5, r8
 80038ca:	e7b6      	b.n	800383a <floor+0x42>
 80038cc:	2301      	movs	r3, #1
 80038ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80038d2:	fa03 f606 	lsl.w	r6, r3, r6
 80038d6:	4435      	add	r5, r6
 80038d8:	42bd      	cmp	r5, r7
 80038da:	bf38      	it	cc
 80038dc:	18e4      	addcc	r4, r4, r3
 80038de:	e7f2      	b.n	80038c6 <floor+0xce>
 80038e0:	2500      	movs	r5, #0
 80038e2:	462c      	mov	r4, r5
 80038e4:	e7a9      	b.n	800383a <floor+0x42>
 80038e6:	bf00      	nop
 80038e8:	8800759c 	.word	0x8800759c
 80038ec:	7e37e43c 	.word	0x7e37e43c
 80038f0:	bff00000 	.word	0xbff00000
 80038f4:	000fffff 	.word	0x000fffff

080038f8 <round>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80038fe:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8003902:	2c13      	cmp	r4, #19
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4606      	mov	r6, r0
 800390a:	460d      	mov	r5, r1
 800390c:	dc19      	bgt.n	8003942 <round+0x4a>
 800390e:	2c00      	cmp	r4, #0
 8003910:	da09      	bge.n	8003926 <round+0x2e>
 8003912:	3401      	adds	r4, #1
 8003914:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003918:	d103      	bne.n	8003922 <round+0x2a>
 800391a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800391e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003922:	2200      	movs	r2, #0
 8003924:	e02a      	b.n	800397c <round+0x84>
 8003926:	4917      	ldr	r1, [pc, #92]	; (8003984 <round+0x8c>)
 8003928:	4121      	asrs	r1, r4
 800392a:	ea03 0001 	and.w	r0, r3, r1
 800392e:	4302      	orrs	r2, r0
 8003930:	d010      	beq.n	8003954 <round+0x5c>
 8003932:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003936:	fa42 f404 	asr.w	r4, r2, r4
 800393a:	4423      	add	r3, r4
 800393c:	ea23 0301 	bic.w	r3, r3, r1
 8003940:	e7ef      	b.n	8003922 <round+0x2a>
 8003942:	2c33      	cmp	r4, #51	; 0x33
 8003944:	dd09      	ble.n	800395a <round+0x62>
 8003946:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800394a:	d103      	bne.n	8003954 <round+0x5c>
 800394c:	f7fc fc06 	bl	800015c <__adddf3>
 8003950:	4606      	mov	r6, r0
 8003952:	460d      	mov	r5, r1
 8003954:	4630      	mov	r0, r6
 8003956:	4629      	mov	r1, r5
 8003958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395a:	f04f 31ff 	mov.w	r1, #4294967295
 800395e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003962:	40f9      	lsrs	r1, r7
 8003964:	4208      	tst	r0, r1
 8003966:	d0f5      	beq.n	8003954 <round+0x5c>
 8003968:	2001      	movs	r0, #1
 800396a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800396e:	fa00 f404 	lsl.w	r4, r0, r4
 8003972:	1912      	adds	r2, r2, r4
 8003974:	bf28      	it	cs
 8003976:	181b      	addcs	r3, r3, r0
 8003978:	ea22 0201 	bic.w	r2, r2, r1
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	e7e6      	b.n	8003950 <round+0x58>
 8003982:	bf00      	nop
 8003984:	000fffff 	.word	0x000fffff

08003988 <sin>:
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <sin+0x84>)
 800398c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003990:	4293      	cmp	r3, r2
 8003992:	b087      	sub	sp, #28
 8003994:	dc06      	bgt.n	80039a4 <sin+0x1c>
 8003996:	2300      	movs	r3, #0
 8003998:	2200      	movs	r2, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	f000 fe33 	bl	8004608 <__kernel_sin>
 80039a2:	e006      	b.n	80039b2 <sin+0x2a>
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <sin+0x88>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	dd05      	ble.n	80039b6 <sin+0x2e>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	f7fc fbd3 	bl	8000158 <__aeabi_dsub>
 80039b2:	b007      	add	sp, #28
 80039b4:	bd30      	pop	{r4, r5, pc}
 80039b6:	aa02      	add	r2, sp, #8
 80039b8:	f000 f82e 	bl	8003a18 <__ieee754_rem_pio2>
 80039bc:	f000 0003 	and.w	r0, r0, #3
 80039c0:	2801      	cmp	r0, #1
 80039c2:	d009      	beq.n	80039d8 <sin+0x50>
 80039c4:	2802      	cmp	r0, #2
 80039c6:	d00e      	beq.n	80039e6 <sin+0x5e>
 80039c8:	b9c0      	cbnz	r0, 80039fc <sin+0x74>
 80039ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039ce:	2301      	movs	r3, #1
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039d6:	e7e2      	b.n	800399e <sin+0x16>
 80039d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039e0:	f000 fa12 	bl	8003e08 <__kernel_cos>
 80039e4:	e7e5      	b.n	80039b2 <sin+0x2a>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f2:	f000 fe09 	bl	8004608 <__kernel_sin>
 80039f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80039fa:	e7da      	b.n	80039b2 <sin+0x2a>
 80039fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a04:	f000 fa00 	bl	8003e08 <__kernel_cos>
 8003a08:	e7f5      	b.n	80039f6 <sin+0x6e>
 8003a0a:	bf00      	nop
 8003a0c:	3fe921fb 	.word	0x3fe921fb
 8003a10:	7fefffff 	.word	0x7fefffff
 8003a14:	00000000 	.word	0x00000000

08003a18 <__ieee754_rem_pio2>:
 8003a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1c:	4614      	mov	r4, r2
 8003a1e:	4ac4      	ldr	r2, [pc, #784]	; (8003d30 <__ieee754_rem_pio2+0x318>)
 8003a20:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003a24:	b08d      	sub	sp, #52	; 0x34
 8003a26:	4592      	cmp	sl, r2
 8003a28:	9104      	str	r1, [sp, #16]
 8003a2a:	dc07      	bgt.n	8003a3c <__ieee754_rem_pio2+0x24>
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e9c4 0100 	strd	r0, r1, [r4]
 8003a34:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e024      	b.n	8003a86 <__ieee754_rem_pio2+0x6e>
 8003a3c:	4abd      	ldr	r2, [pc, #756]	; (8003d34 <__ieee754_rem_pio2+0x31c>)
 8003a3e:	4592      	cmp	sl, r2
 8003a40:	dc72      	bgt.n	8003b28 <__ieee754_rem_pio2+0x110>
 8003a42:	9b04      	ldr	r3, [sp, #16]
 8003a44:	4dbc      	ldr	r5, [pc, #752]	; (8003d38 <__ieee754_rem_pio2+0x320>)
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	a3ab      	add	r3, pc, #684	; (adr r3, 8003cf8 <__ieee754_rem_pio2+0x2e0>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	dd36      	ble.n	8003abe <__ieee754_rem_pio2+0xa6>
 8003a50:	f7fc fb82 	bl	8000158 <__aeabi_dsub>
 8003a54:	45aa      	cmp	sl, r5
 8003a56:	4606      	mov	r6, r0
 8003a58:	460f      	mov	r7, r1
 8003a5a:	d018      	beq.n	8003a8e <__ieee754_rem_pio2+0x76>
 8003a5c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003d00 <__ieee754_rem_pio2+0x2e8>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f7fc fb79 	bl	8000158 <__aeabi_dsub>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	e9c4 2300 	strd	r2, r3, [r4]
 8003a70:	4639      	mov	r1, r7
 8003a72:	f7fc fb71 	bl	8000158 <__aeabi_dsub>
 8003a76:	a3a2      	add	r3, pc, #648	; (adr r3, 8003d00 <__ieee754_rem_pio2+0x2e8>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f7fc fb6c 	bl	8000158 <__aeabi_dsub>
 8003a80:	2501      	movs	r5, #1
 8003a82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a86:	4628      	mov	r0, r5
 8003a88:	b00d      	add	sp, #52	; 0x34
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	a39e      	add	r3, pc, #632	; (adr r3, 8003d08 <__ieee754_rem_pio2+0x2f0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fb60 	bl	8000158 <__aeabi_dsub>
 8003a98:	a39d      	add	r3, pc, #628	; (adr r3, 8003d10 <__ieee754_rem_pio2+0x2f8>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	460f      	mov	r7, r1
 8003aa2:	f7fc fb59 	bl	8000158 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4630      	mov	r0, r6
 8003aac:	e9c4 2300 	strd	r2, r3, [r4]
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	f7fc fb51 	bl	8000158 <__aeabi_dsub>
 8003ab6:	a396      	add	r3, pc, #600	; (adr r3, 8003d10 <__ieee754_rem_pio2+0x2f8>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	e7de      	b.n	8003a7c <__ieee754_rem_pio2+0x64>
 8003abe:	f7fc fb4d 	bl	800015c <__adddf3>
 8003ac2:	45aa      	cmp	sl, r5
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	460f      	mov	r7, r1
 8003ac8:	d016      	beq.n	8003af8 <__ieee754_rem_pio2+0xe0>
 8003aca:	a38d      	add	r3, pc, #564	; (adr r3, 8003d00 <__ieee754_rem_pio2+0x2e8>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fb44 	bl	800015c <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4630      	mov	r0, r6
 8003ada:	e9c4 2300 	strd	r2, r3, [r4]
 8003ade:	4639      	mov	r1, r7
 8003ae0:	f7fc fb3a 	bl	8000158 <__aeabi_dsub>
 8003ae4:	a386      	add	r3, pc, #536	; (adr r3, 8003d00 <__ieee754_rem_pio2+0x2e8>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fb37 	bl	800015c <__adddf3>
 8003aee:	f04f 35ff 	mov.w	r5, #4294967295
 8003af2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003af6:	e7c6      	b.n	8003a86 <__ieee754_rem_pio2+0x6e>
 8003af8:	a383      	add	r3, pc, #524	; (adr r3, 8003d08 <__ieee754_rem_pio2+0x2f0>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fb2d 	bl	800015c <__adddf3>
 8003b02:	a383      	add	r3, pc, #524	; (adr r3, 8003d10 <__ieee754_rem_pio2+0x2f8>)
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	4606      	mov	r6, r0
 8003b0a:	460f      	mov	r7, r1
 8003b0c:	f7fc fb26 	bl	800015c <__adddf3>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4630      	mov	r0, r6
 8003b16:	e9c4 2300 	strd	r2, r3, [r4]
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	f7fc fb1c 	bl	8000158 <__aeabi_dsub>
 8003b20:	a37b      	add	r3, pc, #492	; (adr r3, 8003d10 <__ieee754_rem_pio2+0x2f8>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	e7e0      	b.n	8003aea <__ieee754_rem_pio2+0xd2>
 8003b28:	4a84      	ldr	r2, [pc, #528]	; (8003d3c <__ieee754_rem_pio2+0x324>)
 8003b2a:	4592      	cmp	sl, r2
 8003b2c:	f300 80d5 	bgt.w	8003cda <__ieee754_rem_pio2+0x2c2>
 8003b30:	f000 fe20 	bl	8004774 <fabs>
 8003b34:	a378      	add	r3, pc, #480	; (adr r3, 8003d18 <__ieee754_rem_pio2+0x300>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460f      	mov	r7, r1
 8003b3e:	f7fc fcc3 	bl	80004c8 <__aeabi_dmul>
 8003b42:	2200      	movs	r2, #0
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <__ieee754_rem_pio2+0x328>)
 8003b46:	f7fc fb09 	bl	800015c <__adddf3>
 8003b4a:	f7fc ff57 	bl	80009fc <__aeabi_d2iz>
 8003b4e:	4605      	mov	r5, r0
 8003b50:	f7fc fc50 	bl	80003f4 <__aeabi_i2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b5c:	a366      	add	r3, pc, #408	; (adr r3, 8003cf8 <__ieee754_rem_pio2+0x2e0>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fcb1 	bl	80004c8 <__aeabi_dmul>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc faf3 	bl	8000158 <__aeabi_dsub>
 8003b72:	a363      	add	r3, pc, #396	; (adr r3, 8003d00 <__ieee754_rem_pio2+0x2e8>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	4680      	mov	r8, r0
 8003b7a:	4689      	mov	r9, r1
 8003b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b80:	f7fc fca2 	bl	80004c8 <__aeabi_dmul>
 8003b84:	2d1f      	cmp	r5, #31
 8003b86:	4606      	mov	r6, r0
 8003b88:	460f      	mov	r7, r1
 8003b8a:	dc0e      	bgt.n	8003baa <__ieee754_rem_pio2+0x192>
 8003b8c:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <__ieee754_rem_pio2+0x32c>)
 8003b8e:	1e6a      	subs	r2, r5, #1
 8003b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b94:	4553      	cmp	r3, sl
 8003b96:	d008      	beq.n	8003baa <__ieee754_rem_pio2+0x192>
 8003b98:	4632      	mov	r2, r6
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	f7fc fada 	bl	8000158 <__aeabi_dsub>
 8003ba4:	e9c4 0100 	strd	r0, r1, [r4]
 8003ba8:	e013      	b.n	8003bd2 <__ieee754_rem_pio2+0x1ba>
 8003baa:	463b      	mov	r3, r7
 8003bac:	4632      	mov	r2, r6
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	f7fc fad1 	bl	8000158 <__aeabi_dsub>
 8003bb6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8003bba:	9305      	str	r3, [sp, #20]
 8003bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003bc0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8003bc4:	f1ba 0f10 	cmp.w	sl, #16
 8003bc8:	dc1f      	bgt.n	8003c0a <__ieee754_rem_pio2+0x1f2>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9c4 2300 	strd	r2, r3, [r4]
 8003bd2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4653      	mov	r3, sl
 8003bda:	4649      	mov	r1, r9
 8003bdc:	f7fc fabc 	bl	8000158 <__aeabi_dsub>
 8003be0:	4632      	mov	r2, r6
 8003be2:	463b      	mov	r3, r7
 8003be4:	f7fc fab8 	bl	8000158 <__aeabi_dsub>
 8003be8:	460b      	mov	r3, r1
 8003bea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bee:	9904      	ldr	r1, [sp, #16]
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	f6bf af47 	bge.w	8003a86 <__ieee754_rem_pio2+0x6e>
 8003bf8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003bfc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003c00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c04:	60e3      	str	r3, [r4, #12]
 8003c06:	426d      	negs	r5, r5
 8003c08:	e73d      	b.n	8003a86 <__ieee754_rem_pio2+0x6e>
 8003c0a:	a33f      	add	r3, pc, #252	; (adr r3, 8003d08 <__ieee754_rem_pio2+0x2f0>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c14:	f7fc fc58 	bl	80004c8 <__aeabi_dmul>
 8003c18:	4606      	mov	r6, r0
 8003c1a:	460f      	mov	r7, r1
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4640      	mov	r0, r8
 8003c22:	4649      	mov	r1, r9
 8003c24:	f7fc fa98 	bl	8000158 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4682      	mov	sl, r0
 8003c2e:	468b      	mov	fp, r1
 8003c30:	4640      	mov	r0, r8
 8003c32:	4649      	mov	r1, r9
 8003c34:	f7fc fa90 	bl	8000158 <__aeabi_dsub>
 8003c38:	4632      	mov	r2, r6
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	f7fc fa8c 	bl	8000158 <__aeabi_dsub>
 8003c40:	a333      	add	r3, pc, #204	; (adr r3, 8003d10 <__ieee754_rem_pio2+0x2f8>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	4606      	mov	r6, r0
 8003c48:	460f      	mov	r7, r1
 8003c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c4e:	f7fc fc3b 	bl	80004c8 <__aeabi_dmul>
 8003c52:	4632      	mov	r2, r6
 8003c54:	463b      	mov	r3, r7
 8003c56:	f7fc fa7f 	bl	8000158 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4606      	mov	r6, r0
 8003c60:	460f      	mov	r7, r1
 8003c62:	4650      	mov	r0, sl
 8003c64:	4659      	mov	r1, fp
 8003c66:	f7fc fa77 	bl	8000158 <__aeabi_dsub>
 8003c6a:	9a05      	ldr	r2, [sp, #20]
 8003c6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b31      	cmp	r3, #49	; 0x31
 8003c74:	dc06      	bgt.n	8003c84 <__ieee754_rem_pio2+0x26c>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	46d0      	mov	r8, sl
 8003c7c:	46d9      	mov	r9, fp
 8003c7e:	e9c4 2300 	strd	r2, r3, [r4]
 8003c82:	e7a6      	b.n	8003bd2 <__ieee754_rem_pio2+0x1ba>
 8003c84:	a326      	add	r3, pc, #152	; (adr r3, 8003d20 <__ieee754_rem_pio2+0x308>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c8e:	f7fc fc1b 	bl	80004c8 <__aeabi_dmul>
 8003c92:	4606      	mov	r6, r0
 8003c94:	460f      	mov	r7, r1
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	f7fc fa5b 	bl	8000158 <__aeabi_dsub>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4680      	mov	r8, r0
 8003ca8:	4689      	mov	r9, r1
 8003caa:	4650      	mov	r0, sl
 8003cac:	4659      	mov	r1, fp
 8003cae:	f7fc fa53 	bl	8000158 <__aeabi_dsub>
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	f7fc fa4f 	bl	8000158 <__aeabi_dsub>
 8003cba:	a31b      	add	r3, pc, #108	; (adr r3, 8003d28 <__ieee754_rem_pio2+0x310>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	460f      	mov	r7, r1
 8003cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc8:	f7fc fbfe 	bl	80004c8 <__aeabi_dmul>
 8003ccc:	4632      	mov	r2, r6
 8003cce:	463b      	mov	r3, r7
 8003cd0:	f7fc fa42 	bl	8000158 <__aeabi_dsub>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460f      	mov	r7, r1
 8003cd8:	e75e      	b.n	8003b98 <__ieee754_rem_pio2+0x180>
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <__ieee754_rem_pio2+0x330>)
 8003cdc:	4592      	cmp	sl, r2
 8003cde:	dd35      	ble.n	8003d4c <__ieee754_rem_pio2+0x334>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	f7fc fa38 	bl	8000158 <__aeabi_dsub>
 8003ce8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003cec:	e9c4 0100 	strd	r0, r1, [r4]
 8003cf0:	e6a2      	b.n	8003a38 <__ieee754_rem_pio2+0x20>
 8003cf2:	bf00      	nop
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	54400000 	.word	0x54400000
 8003cfc:	3ff921fb 	.word	0x3ff921fb
 8003d00:	1a626331 	.word	0x1a626331
 8003d04:	3dd0b461 	.word	0x3dd0b461
 8003d08:	1a600000 	.word	0x1a600000
 8003d0c:	3dd0b461 	.word	0x3dd0b461
 8003d10:	2e037073 	.word	0x2e037073
 8003d14:	3ba3198a 	.word	0x3ba3198a
 8003d18:	6dc9c883 	.word	0x6dc9c883
 8003d1c:	3fe45f30 	.word	0x3fe45f30
 8003d20:	2e000000 	.word	0x2e000000
 8003d24:	3ba3198a 	.word	0x3ba3198a
 8003d28:	252049c1 	.word	0x252049c1
 8003d2c:	397b839a 	.word	0x397b839a
 8003d30:	3fe921fb 	.word	0x3fe921fb
 8003d34:	4002d97b 	.word	0x4002d97b
 8003d38:	3ff921fb 	.word	0x3ff921fb
 8003d3c:	413921fb 	.word	0x413921fb
 8003d40:	3fe00000 	.word	0x3fe00000
 8003d44:	080048bc 	.word	0x080048bc
 8003d48:	7fefffff 	.word	0x7fefffff
 8003d4c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003d50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003d54:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003d58:	460f      	mov	r7, r1
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	f7fc fe4e 	bl	80009fc <__aeabi_d2iz>
 8003d60:	f7fc fb48 	bl	80003f4 <__aeabi_i2d>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4630      	mov	r0, r6
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d70:	f7fc f9f2 	bl	8000158 <__aeabi_dsub>
 8003d74:	2200      	movs	r2, #0
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <__ieee754_rem_pio2+0x3e8>)
 8003d78:	f7fc fba6 	bl	80004c8 <__aeabi_dmul>
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	4606      	mov	r6, r0
 8003d80:	f7fc fe3c 	bl	80009fc <__aeabi_d2iz>
 8003d84:	f7fc fb36 	bl	80003f4 <__aeabi_i2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	4639      	mov	r1, r7
 8003d90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d94:	f7fc f9e0 	bl	8000158 <__aeabi_dsub>
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <__ieee754_rem_pio2+0x3e8>)
 8003d9c:	f7fc fb94 	bl	80004c8 <__aeabi_dmul>
 8003da0:	f04f 0803 	mov.w	r8, #3
 8003da4:	2600      	movs	r6, #0
 8003da6:	2700      	movs	r7, #0
 8003da8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003dac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8003db0:	4632      	mov	r2, r6
 8003db2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8003db6:	463b      	mov	r3, r7
 8003db8:	46c2      	mov	sl, r8
 8003dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dbe:	f7fc fdeb 	bl	8000998 <__aeabi_dcmpeq>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d1f4      	bne.n	8003db0 <__ieee754_rem_pio2+0x398>
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <__ieee754_rem_pio2+0x3ec>)
 8003dc8:	462a      	mov	r2, r5
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2302      	movs	r3, #2
 8003dce:	4621      	mov	r1, r4
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	a806      	add	r0, sp, #24
 8003dd4:	4653      	mov	r3, sl
 8003dd6:	f000 f8d5 	bl	8003f84 <__kernel_rem_pio2>
 8003dda:	9b04      	ldr	r3, [sp, #16]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f6bf ae51 	bge.w	8003a86 <__ieee754_rem_pio2+0x6e>
 8003de4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dec:	e9c4 2300 	strd	r2, r3, [r4]
 8003df0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003df8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003dfc:	e703      	b.n	8003c06 <__ieee754_rem_pio2+0x1ee>
 8003dfe:	bf00      	nop
 8003e00:	41700000 	.word	0x41700000
 8003e04:	0800493c 	.word	0x0800493c

08003e08 <__kernel_cos>:
 8003e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003e10:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003e14:	4680      	mov	r8, r0
 8003e16:	460f      	mov	r7, r1
 8003e18:	e9cd 2300 	strd	r2, r3, [sp]
 8003e1c:	da04      	bge.n	8003e28 <__kernel_cos+0x20>
 8003e1e:	f7fc fded 	bl	80009fc <__aeabi_d2iz>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f000 8086 	beq.w	8003f34 <__kernel_cos+0x12c>
 8003e28:	4642      	mov	r2, r8
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	4639      	mov	r1, r7
 8003e30:	f7fc fb4a 	bl	80004c8 <__aeabi_dmul>
 8003e34:	2200      	movs	r2, #0
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <__kernel_cos+0x168>)
 8003e38:	4604      	mov	r4, r0
 8003e3a:	460d      	mov	r5, r1
 8003e3c:	f7fc fb44 	bl	80004c8 <__aeabi_dmul>
 8003e40:	a33f      	add	r3, pc, #252	; (adr r3, 8003f40 <__kernel_cos+0x138>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	4682      	mov	sl, r0
 8003e48:	468b      	mov	fp, r1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f7fc fb3b 	bl	80004c8 <__aeabi_dmul>
 8003e52:	a33d      	add	r3, pc, #244	; (adr r3, 8003f48 <__kernel_cos+0x140>)
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f7fc f980 	bl	800015c <__adddf3>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f7fc fb32 	bl	80004c8 <__aeabi_dmul>
 8003e64:	a33a      	add	r3, pc, #232	; (adr r3, 8003f50 <__kernel_cos+0x148>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f7fc f975 	bl	8000158 <__aeabi_dsub>
 8003e6e:	4622      	mov	r2, r4
 8003e70:	462b      	mov	r3, r5
 8003e72:	f7fc fb29 	bl	80004c8 <__aeabi_dmul>
 8003e76:	a338      	add	r3, pc, #224	; (adr r3, 8003f58 <__kernel_cos+0x150>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc f96e 	bl	800015c <__adddf3>
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	f7fc fb20 	bl	80004c8 <__aeabi_dmul>
 8003e88:	a335      	add	r3, pc, #212	; (adr r3, 8003f60 <__kernel_cos+0x158>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc f963 	bl	8000158 <__aeabi_dsub>
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f7fc fb17 	bl	80004c8 <__aeabi_dmul>
 8003e9a:	a333      	add	r3, pc, #204	; (adr r3, 8003f68 <__kernel_cos+0x160>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc f95c 	bl	800015c <__adddf3>
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	f7fc fb0e 	bl	80004c8 <__aeabi_dmul>
 8003eac:	4622      	mov	r2, r4
 8003eae:	462b      	mov	r3, r5
 8003eb0:	f7fc fb0a 	bl	80004c8 <__aeabi_dmul>
 8003eb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eb8:	4604      	mov	r4, r0
 8003eba:	460d      	mov	r5, r1
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	f7fc fb02 	bl	80004c8 <__aeabi_dmul>
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7fc f944 	bl	8000158 <__aeabi_dsub>
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <__kernel_cos+0x16c>)
 8003ed2:	4680      	mov	r8, r0
 8003ed4:	429e      	cmp	r6, r3
 8003ed6:	4689      	mov	r9, r1
 8003ed8:	dc0e      	bgt.n	8003ef8 <__kernel_cos+0xf0>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4650      	mov	r0, sl
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	f7fc f939 	bl	8000158 <__aeabi_dsub>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	2000      	movs	r0, #0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4922      	ldr	r1, [pc, #136]	; (8003f78 <__kernel_cos+0x170>)
 8003eee:	f7fc f933 	bl	8000158 <__aeabi_dsub>
 8003ef2:	b003      	add	sp, #12
 8003ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef8:	2400      	movs	r4, #0
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <__kernel_cos+0x174>)
 8003efc:	4622      	mov	r2, r4
 8003efe:	429e      	cmp	r6, r3
 8003f00:	bfcc      	ite	gt
 8003f02:	4d1f      	ldrgt	r5, [pc, #124]	; (8003f80 <__kernel_cos+0x178>)
 8003f04:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003f08:	462b      	mov	r3, r5
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	491a      	ldr	r1, [pc, #104]	; (8003f78 <__kernel_cos+0x170>)
 8003f0e:	f7fc f923 	bl	8000158 <__aeabi_dsub>
 8003f12:	4622      	mov	r2, r4
 8003f14:	4606      	mov	r6, r0
 8003f16:	460f      	mov	r7, r1
 8003f18:	462b      	mov	r3, r5
 8003f1a:	4650      	mov	r0, sl
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	f7fc f91b 	bl	8000158 <__aeabi_dsub>
 8003f22:	4642      	mov	r2, r8
 8003f24:	464b      	mov	r3, r9
 8003f26:	f7fc f917 	bl	8000158 <__aeabi_dsub>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4630      	mov	r0, r6
 8003f30:	4639      	mov	r1, r7
 8003f32:	e7dc      	b.n	8003eee <__kernel_cos+0xe6>
 8003f34:	2000      	movs	r0, #0
 8003f36:	4910      	ldr	r1, [pc, #64]	; (8003f78 <__kernel_cos+0x170>)
 8003f38:	e7db      	b.n	8003ef2 <__kernel_cos+0xea>
 8003f3a:	bf00      	nop
 8003f3c:	f3af 8000 	nop.w
 8003f40:	be8838d4 	.word	0xbe8838d4
 8003f44:	bda8fae9 	.word	0xbda8fae9
 8003f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f4c:	3e21ee9e 	.word	0x3e21ee9e
 8003f50:	809c52ad 	.word	0x809c52ad
 8003f54:	3e927e4f 	.word	0x3e927e4f
 8003f58:	19cb1590 	.word	0x19cb1590
 8003f5c:	3efa01a0 	.word	0x3efa01a0
 8003f60:	16c15177 	.word	0x16c15177
 8003f64:	3f56c16c 	.word	0x3f56c16c
 8003f68:	5555554c 	.word	0x5555554c
 8003f6c:	3fa55555 	.word	0x3fa55555
 8003f70:	3fe00000 	.word	0x3fe00000
 8003f74:	3fd33332 	.word	0x3fd33332
 8003f78:	3ff00000 	.word	0x3ff00000
 8003f7c:	3fe90000 	.word	0x3fe90000
 8003f80:	3fd20000 	.word	0x3fd20000

08003f84 <__kernel_rem_pio2>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003f8c:	9308      	str	r3, [sp, #32]
 8003f8e:	9106      	str	r1, [sp, #24]
 8003f90:	4bb6      	ldr	r3, [pc, #728]	; (800426c <__kernel_rem_pio2+0x2e8>)
 8003f92:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003f94:	f112 0f14 	cmn.w	r2, #20
 8003f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f9c:	bfa8      	it	ge
 8003f9e:	1ed4      	subge	r4, r2, #3
 8003fa0:	9302      	str	r3, [sp, #8]
 8003fa2:	9b08      	ldr	r3, [sp, #32]
 8003fa4:	bfb8      	it	lt
 8003fa6:	2400      	movlt	r4, #0
 8003fa8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fac:	9307      	str	r3, [sp, #28]
 8003fae:	bfa4      	itt	ge
 8003fb0:	2318      	movge	r3, #24
 8003fb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8003fb6:	f06f 0317 	mvn.w	r3, #23
 8003fba:	fb04 3303 	mla	r3, r4, r3, r3
 8003fbe:	eb03 0b02 	add.w	fp, r3, r2
 8003fc2:	9a07      	ldr	r2, [sp, #28]
 8003fc4:	9b02      	ldr	r3, [sp, #8]
 8003fc6:	1aa7      	subs	r7, r4, r2
 8003fc8:	eb03 0802 	add.w	r8, r3, r2
 8003fcc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003fce:	2500      	movs	r5, #0
 8003fd0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9009      	str	r0, [sp, #36]	; 0x24
 8003fda:	ae20      	add	r6, sp, #128	; 0x80
 8003fdc:	4545      	cmp	r5, r8
 8003fde:	dd14      	ble.n	800400a <__kernel_rem_pio2+0x86>
 8003fe0:	f04f 0800 	mov.w	r8, #0
 8003fe4:	9a08      	ldr	r2, [sp, #32]
 8003fe6:	ab20      	add	r3, sp, #128	; 0x80
 8003fe8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003fec:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003ff0:	9b02      	ldr	r3, [sp, #8]
 8003ff2:	4598      	cmp	r8, r3
 8003ff4:	dc35      	bgt.n	8004062 <__kernel_rem_pio2+0xde>
 8003ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f1a3 0908 	sub.w	r9, r3, #8
 8003ffe:	2300      	movs	r3, #0
 8004000:	462f      	mov	r7, r5
 8004002:	2600      	movs	r6, #0
 8004004:	e9cd 2300 	strd	r2, r3, [sp]
 8004008:	e01f      	b.n	800404a <__kernel_rem_pio2+0xc6>
 800400a:	42ef      	cmn	r7, r5
 800400c:	d40b      	bmi.n	8004026 <__kernel_rem_pio2+0xa2>
 800400e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004012:	e9cd 2300 	strd	r2, r3, [sp]
 8004016:	f7fc f9ed 	bl	80003f4 <__aeabi_i2d>
 800401a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800401e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004022:	3501      	adds	r5, #1
 8004024:	e7da      	b.n	8003fdc <__kernel_rem_pio2+0x58>
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	e7f8      	b.n	800401e <__kernel_rem_pio2+0x9a>
 800402c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004030:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004034:	f7fc fa48 	bl	80004c8 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004040:	f7fc f88c 	bl	800015c <__adddf3>
 8004044:	e9cd 0100 	strd	r0, r1, [sp]
 8004048:	3601      	adds	r6, #1
 800404a:	9b07      	ldr	r3, [sp, #28]
 800404c:	3f08      	subs	r7, #8
 800404e:	429e      	cmp	r6, r3
 8004050:	ddec      	ble.n	800402c <__kernel_rem_pio2+0xa8>
 8004052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004056:	f108 0801 	add.w	r8, r8, #1
 800405a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800405e:	3508      	adds	r5, #8
 8004060:	e7c6      	b.n	8003ff0 <__kernel_rem_pio2+0x6c>
 8004062:	9b02      	ldr	r3, [sp, #8]
 8004064:	aa0c      	add	r2, sp, #48	; 0x30
 8004066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800406a:	930b      	str	r3, [sp, #44]	; 0x2c
 800406c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800406e:	9e02      	ldr	r6, [sp, #8]
 8004070:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004074:	930a      	str	r3, [sp, #40]	; 0x28
 8004076:	ab98      	add	r3, sp, #608	; 0x260
 8004078:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800407c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004080:	ab70      	add	r3, sp, #448	; 0x1c0
 8004082:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004086:	46d0      	mov	r8, sl
 8004088:	46b1      	mov	r9, r6
 800408a:	af0c      	add	r7, sp, #48	; 0x30
 800408c:	9700      	str	r7, [sp, #0]
 800408e:	f1b9 0f00 	cmp.w	r9, #0
 8004092:	f1a8 0808 	sub.w	r8, r8, #8
 8004096:	dc71      	bgt.n	800417c <__kernel_rem_pio2+0x1f8>
 8004098:	465a      	mov	r2, fp
 800409a:	4620      	mov	r0, r4
 800409c:	4629      	mov	r1, r5
 800409e:	f000 fb6f 	bl	8004780 <scalbn>
 80040a2:	2200      	movs	r2, #0
 80040a4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	f7fc fa0c 	bl	80004c8 <__aeabi_dmul>
 80040b0:	f7ff fba2 	bl	80037f8 <floor>
 80040b4:	2200      	movs	r2, #0
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <__kernel_rem_pio2+0x2ec>)
 80040b8:	f7fc fa06 	bl	80004c8 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4620      	mov	r0, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7fc f848 	bl	8000158 <__aeabi_dsub>
 80040c8:	460d      	mov	r5, r1
 80040ca:	4604      	mov	r4, r0
 80040cc:	f7fc fc96 	bl	80009fc <__aeabi_d2iz>
 80040d0:	9004      	str	r0, [sp, #16]
 80040d2:	f7fc f98f 	bl	80003f4 <__aeabi_i2d>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc f83b 	bl	8000158 <__aeabi_dsub>
 80040e2:	f1bb 0f00 	cmp.w	fp, #0
 80040e6:	4680      	mov	r8, r0
 80040e8:	4689      	mov	r9, r1
 80040ea:	dd70      	ble.n	80041ce <__kernel_rem_pio2+0x24a>
 80040ec:	1e72      	subs	r2, r6, #1
 80040ee:	ab0c      	add	r3, sp, #48	; 0x30
 80040f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80040f4:	9c04      	ldr	r4, [sp, #16]
 80040f6:	f1cb 0118 	rsb	r1, fp, #24
 80040fa:	fa40 f301 	asr.w	r3, r0, r1
 80040fe:	441c      	add	r4, r3
 8004100:	408b      	lsls	r3, r1
 8004102:	1ac0      	subs	r0, r0, r3
 8004104:	ab0c      	add	r3, sp, #48	; 0x30
 8004106:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800410a:	f1cb 0317 	rsb	r3, fp, #23
 800410e:	9404      	str	r4, [sp, #16]
 8004110:	fa40 f303 	asr.w	r3, r0, r3
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	9b00      	ldr	r3, [sp, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	dd66      	ble.n	80041ea <__kernel_rem_pio2+0x266>
 800411c:	2200      	movs	r2, #0
 800411e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004122:	4614      	mov	r4, r2
 8004124:	9b04      	ldr	r3, [sp, #16]
 8004126:	3301      	adds	r3, #1
 8004128:	9304      	str	r3, [sp, #16]
 800412a:	4296      	cmp	r6, r2
 800412c:	f300 80ac 	bgt.w	8004288 <__kernel_rem_pio2+0x304>
 8004130:	f1bb 0f00 	cmp.w	fp, #0
 8004134:	dd07      	ble.n	8004146 <__kernel_rem_pio2+0x1c2>
 8004136:	f1bb 0f01 	cmp.w	fp, #1
 800413a:	f000 80b4 	beq.w	80042a6 <__kernel_rem_pio2+0x322>
 800413e:	f1bb 0f02 	cmp.w	fp, #2
 8004142:	f000 80ba 	beq.w	80042ba <__kernel_rem_pio2+0x336>
 8004146:	9b00      	ldr	r3, [sp, #0]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d14e      	bne.n	80041ea <__kernel_rem_pio2+0x266>
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	2000      	movs	r0, #0
 8004152:	4948      	ldr	r1, [pc, #288]	; (8004274 <__kernel_rem_pio2+0x2f0>)
 8004154:	f7fc f800 	bl	8000158 <__aeabi_dsub>
 8004158:	4680      	mov	r8, r0
 800415a:	4689      	mov	r9, r1
 800415c:	2c00      	cmp	r4, #0
 800415e:	d044      	beq.n	80041ea <__kernel_rem_pio2+0x266>
 8004160:	465a      	mov	r2, fp
 8004162:	2000      	movs	r0, #0
 8004164:	4943      	ldr	r1, [pc, #268]	; (8004274 <__kernel_rem_pio2+0x2f0>)
 8004166:	f000 fb0b 	bl	8004780 <scalbn>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4640      	mov	r0, r8
 8004170:	4649      	mov	r1, r9
 8004172:	f7fb fff1 	bl	8000158 <__aeabi_dsub>
 8004176:	4680      	mov	r8, r0
 8004178:	4689      	mov	r9, r1
 800417a:	e036      	b.n	80041ea <__kernel_rem_pio2+0x266>
 800417c:	2200      	movs	r2, #0
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <__kernel_rem_pio2+0x2f4>)
 8004180:	4620      	mov	r0, r4
 8004182:	4629      	mov	r1, r5
 8004184:	f7fc f9a0 	bl	80004c8 <__aeabi_dmul>
 8004188:	f7fc fc38 	bl	80009fc <__aeabi_d2iz>
 800418c:	f7fc f932 	bl	80003f4 <__aeabi_i2d>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004198:	2200      	movs	r2, #0
 800419a:	4b38      	ldr	r3, [pc, #224]	; (800427c <__kernel_rem_pio2+0x2f8>)
 800419c:	f7fc f994 	bl	80004c8 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	f7fb ffd6 	bl	8000158 <__aeabi_dsub>
 80041ac:	f7fc fc26 	bl	80009fc <__aeabi_d2iz>
 80041b0:	9b00      	ldr	r3, [sp, #0]
 80041b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80041b6:	f843 0b04 	str.w	r0, [r3], #4
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80041c4:	f7fb ffca 	bl	800015c <__adddf3>
 80041c8:	4604      	mov	r4, r0
 80041ca:	460d      	mov	r5, r1
 80041cc:	e75f      	b.n	800408e <__kernel_rem_pio2+0x10a>
 80041ce:	d105      	bne.n	80041dc <__kernel_rem_pio2+0x258>
 80041d0:	1e73      	subs	r3, r6, #1
 80041d2:	aa0c      	add	r2, sp, #48	; 0x30
 80041d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041d8:	15c3      	asrs	r3, r0, #23
 80041da:	e79b      	b.n	8004114 <__kernel_rem_pio2+0x190>
 80041dc:	2200      	movs	r2, #0
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <__kernel_rem_pio2+0x2fc>)
 80041e0:	f7fc fbf8 	bl	80009d4 <__aeabi_dcmpge>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d13e      	bne.n	8004266 <__kernel_rem_pio2+0x2e2>
 80041e8:	9000      	str	r0, [sp, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2300      	movs	r3, #0
 80041ee:	4640      	mov	r0, r8
 80041f0:	4649      	mov	r1, r9
 80041f2:	f7fc fbd1 	bl	8000998 <__aeabi_dcmpeq>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f000 80b1 	beq.w	800435e <__kernel_rem_pio2+0x3da>
 80041fc:	1e74      	subs	r4, r6, #1
 80041fe:	4623      	mov	r3, r4
 8004200:	2200      	movs	r2, #0
 8004202:	9902      	ldr	r1, [sp, #8]
 8004204:	428b      	cmp	r3, r1
 8004206:	da5f      	bge.n	80042c8 <__kernel_rem_pio2+0x344>
 8004208:	2a00      	cmp	r2, #0
 800420a:	d074      	beq.n	80042f6 <__kernel_rem_pio2+0x372>
 800420c:	ab0c      	add	r3, sp, #48	; 0x30
 800420e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004212:	f1ab 0b18 	sub.w	fp, fp, #24
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 809f 	beq.w	800435a <__kernel_rem_pio2+0x3d6>
 800421c:	465a      	mov	r2, fp
 800421e:	2000      	movs	r0, #0
 8004220:	4914      	ldr	r1, [pc, #80]	; (8004274 <__kernel_rem_pio2+0x2f0>)
 8004222:	f000 faad 	bl	8004780 <scalbn>
 8004226:	46a2      	mov	sl, r4
 8004228:	4606      	mov	r6, r0
 800422a:	460f      	mov	r7, r1
 800422c:	f04f 0800 	mov.w	r8, #0
 8004230:	ab70      	add	r3, sp, #448	; 0x1c0
 8004232:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004278 <__kernel_rem_pio2+0x2f4>
 8004236:	00e5      	lsls	r5, r4, #3
 8004238:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800423c:	f1ba 0f00 	cmp.w	sl, #0
 8004240:	f280 80c3 	bge.w	80043ca <__kernel_rem_pio2+0x446>
 8004244:	4626      	mov	r6, r4
 8004246:	2e00      	cmp	r6, #0
 8004248:	f2c0 80f5 	blt.w	8004436 <__kernel_rem_pio2+0x4b2>
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <__kernel_rem_pio2+0x300>)
 800424e:	f04f 0a00 	mov.w	sl, #0
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	ab70      	add	r3, sp, #448	; 0x1c0
 8004256:	f04f 0b00 	mov.w	fp, #0
 800425a:	f04f 0800 	mov.w	r8, #0
 800425e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004262:	1ba7      	subs	r7, r4, r6
 8004264:	e0db      	b.n	800441e <__kernel_rem_pio2+0x49a>
 8004266:	2302      	movs	r3, #2
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	e757      	b.n	800411c <__kernel_rem_pio2+0x198>
 800426c:	08004a88 	.word	0x08004a88
 8004270:	40200000 	.word	0x40200000
 8004274:	3ff00000 	.word	0x3ff00000
 8004278:	3e700000 	.word	0x3e700000
 800427c:	41700000 	.word	0x41700000
 8004280:	3fe00000 	.word	0x3fe00000
 8004284:	08004a48 	.word	0x08004a48
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	b944      	cbnz	r4, 800429e <__kernel_rem_pio2+0x31a>
 800428c:	b11b      	cbz	r3, 8004296 <__kernel_rem_pio2+0x312>
 800428e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	2301      	movs	r3, #1
 8004296:	461c      	mov	r4, r3
 8004298:	3201      	adds	r2, #1
 800429a:	3704      	adds	r7, #4
 800429c:	e745      	b.n	800412a <__kernel_rem_pio2+0x1a6>
 800429e:	1acb      	subs	r3, r1, r3
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	4623      	mov	r3, r4
 80042a4:	e7f7      	b.n	8004296 <__kernel_rem_pio2+0x312>
 80042a6:	1e72      	subs	r2, r6, #1
 80042a8:	ab0c      	add	r3, sp, #48	; 0x30
 80042aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80042b2:	a90c      	add	r1, sp, #48	; 0x30
 80042b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80042b8:	e745      	b.n	8004146 <__kernel_rem_pio2+0x1c2>
 80042ba:	1e72      	subs	r2, r6, #1
 80042bc:	ab0c      	add	r3, sp, #48	; 0x30
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80042c6:	e7f4      	b.n	80042b2 <__kernel_rem_pio2+0x32e>
 80042c8:	a90c      	add	r1, sp, #48	; 0x30
 80042ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	430a      	orrs	r2, r1
 80042d2:	e796      	b.n	8004202 <__kernel_rem_pio2+0x27e>
 80042d4:	3401      	adds	r4, #1
 80042d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d0fa      	beq.n	80042d4 <__kernel_rem_pio2+0x350>
 80042de:	9b08      	ldr	r3, [sp, #32]
 80042e0:	f106 0801 	add.w	r8, r6, #1
 80042e4:	18f5      	adds	r5, r6, r3
 80042e6:	ab20      	add	r3, sp, #128	; 0x80
 80042e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80042ec:	4434      	add	r4, r6
 80042ee:	4544      	cmp	r4, r8
 80042f0:	da04      	bge.n	80042fc <__kernel_rem_pio2+0x378>
 80042f2:	4626      	mov	r6, r4
 80042f4:	e6bf      	b.n	8004076 <__kernel_rem_pio2+0xf2>
 80042f6:	2401      	movs	r4, #1
 80042f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042fa:	e7ec      	b.n	80042d6 <__kernel_rem_pio2+0x352>
 80042fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fe:	f04f 0900 	mov.w	r9, #0
 8004302:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004306:	f7fc f875 	bl	80003f4 <__aeabi_i2d>
 800430a:	2600      	movs	r6, #0
 800430c:	2700      	movs	r7, #0
 800430e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004310:	e9c5 0100 	strd	r0, r1, [r5]
 8004314:	3b08      	subs	r3, #8
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	9504      	str	r5, [sp, #16]
 800431a:	9b07      	ldr	r3, [sp, #28]
 800431c:	4599      	cmp	r9, r3
 800431e:	dd05      	ble.n	800432c <__kernel_rem_pio2+0x3a8>
 8004320:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004324:	f108 0801 	add.w	r8, r8, #1
 8004328:	3508      	adds	r5, #8
 800432a:	e7e0      	b.n	80042ee <__kernel_rem_pio2+0x36a>
 800432c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004330:	9900      	ldr	r1, [sp, #0]
 8004332:	f109 0901 	add.w	r9, r9, #1
 8004336:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800433a:	9100      	str	r1, [sp, #0]
 800433c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004340:	f8cd c010 	str.w	ip, [sp, #16]
 8004344:	f7fc f8c0 	bl	80004c8 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4630      	mov	r0, r6
 800434e:	4639      	mov	r1, r7
 8004350:	f7fb ff04 	bl	800015c <__adddf3>
 8004354:	4606      	mov	r6, r0
 8004356:	460f      	mov	r7, r1
 8004358:	e7df      	b.n	800431a <__kernel_rem_pio2+0x396>
 800435a:	3c01      	subs	r4, #1
 800435c:	e756      	b.n	800420c <__kernel_rem_pio2+0x288>
 800435e:	f1cb 0200 	rsb	r2, fp, #0
 8004362:	4640      	mov	r0, r8
 8004364:	4649      	mov	r1, r9
 8004366:	f000 fa0b 	bl	8004780 <scalbn>
 800436a:	2200      	movs	r2, #0
 800436c:	4ba4      	ldr	r3, [pc, #656]	; (8004600 <__kernel_rem_pio2+0x67c>)
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	f7fc fb2f 	bl	80009d4 <__aeabi_dcmpge>
 8004376:	b1f8      	cbz	r0, 80043b8 <__kernel_rem_pio2+0x434>
 8004378:	2200      	movs	r2, #0
 800437a:	4ba2      	ldr	r3, [pc, #648]	; (8004604 <__kernel_rem_pio2+0x680>)
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	f7fc f8a2 	bl	80004c8 <__aeabi_dmul>
 8004384:	f7fc fb3a 	bl	80009fc <__aeabi_d2iz>
 8004388:	4607      	mov	r7, r0
 800438a:	f7fc f833 	bl	80003f4 <__aeabi_i2d>
 800438e:	2200      	movs	r2, #0
 8004390:	4b9b      	ldr	r3, [pc, #620]	; (8004600 <__kernel_rem_pio2+0x67c>)
 8004392:	f7fc f899 	bl	80004c8 <__aeabi_dmul>
 8004396:	460b      	mov	r3, r1
 8004398:	4602      	mov	r2, r0
 800439a:	4629      	mov	r1, r5
 800439c:	4620      	mov	r0, r4
 800439e:	f7fb fedb 	bl	8000158 <__aeabi_dsub>
 80043a2:	f7fc fb2b 	bl	80009fc <__aeabi_d2iz>
 80043a6:	1c74      	adds	r4, r6, #1
 80043a8:	ab0c      	add	r3, sp, #48	; 0x30
 80043aa:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80043ae:	f10b 0b18 	add.w	fp, fp, #24
 80043b2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80043b6:	e731      	b.n	800421c <__kernel_rem_pio2+0x298>
 80043b8:	4620      	mov	r0, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	f7fc fb1e 	bl	80009fc <__aeabi_d2iz>
 80043c0:	ab0c      	add	r3, sp, #48	; 0x30
 80043c2:	4634      	mov	r4, r6
 80043c4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80043c8:	e728      	b.n	800421c <__kernel_rem_pio2+0x298>
 80043ca:	ab0c      	add	r3, sp, #48	; 0x30
 80043cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80043d0:	f7fc f810 	bl	80003f4 <__aeabi_i2d>
 80043d4:	4632      	mov	r2, r6
 80043d6:	463b      	mov	r3, r7
 80043d8:	f7fc f876 	bl	80004c8 <__aeabi_dmul>
 80043dc:	4642      	mov	r2, r8
 80043de:	e86b 0102 	strd	r0, r1, [fp], #-8
 80043e2:	464b      	mov	r3, r9
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc f86e 	bl	80004c8 <__aeabi_dmul>
 80043ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043f0:	4606      	mov	r6, r0
 80043f2:	460f      	mov	r7, r1
 80043f4:	e722      	b.n	800423c <__kernel_rem_pio2+0x2b8>
 80043f6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80043fa:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80043fe:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004402:	f8cd c01c 	str.w	ip, [sp, #28]
 8004406:	f7fc f85f 	bl	80004c8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4650      	mov	r0, sl
 8004410:	4659      	mov	r1, fp
 8004412:	f7fb fea3 	bl	800015c <__adddf3>
 8004416:	4682      	mov	sl, r0
 8004418:	468b      	mov	fp, r1
 800441a:	f108 0801 	add.w	r8, r8, #1
 800441e:	9b02      	ldr	r3, [sp, #8]
 8004420:	4598      	cmp	r8, r3
 8004422:	dc01      	bgt.n	8004428 <__kernel_rem_pio2+0x4a4>
 8004424:	45b8      	cmp	r8, r7
 8004426:	dde6      	ble.n	80043f6 <__kernel_rem_pio2+0x472>
 8004428:	ab48      	add	r3, sp, #288	; 0x120
 800442a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800442e:	e9c7 ab00 	strd	sl, fp, [r7]
 8004432:	3e01      	subs	r6, #1
 8004434:	e707      	b.n	8004246 <__kernel_rem_pio2+0x2c2>
 8004436:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004438:	2b02      	cmp	r3, #2
 800443a:	dc09      	bgt.n	8004450 <__kernel_rem_pio2+0x4cc>
 800443c:	2b00      	cmp	r3, #0
 800443e:	dc32      	bgt.n	80044a6 <__kernel_rem_pio2+0x522>
 8004440:	d05a      	beq.n	80044f8 <__kernel_rem_pio2+0x574>
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	f003 0007 	and.w	r0, r3, #7
 8004448:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004450:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004452:	2b03      	cmp	r3, #3
 8004454:	d1f5      	bne.n	8004442 <__kernel_rem_pio2+0x4be>
 8004456:	ab48      	add	r3, sp, #288	; 0x120
 8004458:	441d      	add	r5, r3
 800445a:	46aa      	mov	sl, r5
 800445c:	46a3      	mov	fp, r4
 800445e:	f1bb 0f00 	cmp.w	fp, #0
 8004462:	dc76      	bgt.n	8004552 <__kernel_rem_pio2+0x5ce>
 8004464:	46aa      	mov	sl, r5
 8004466:	46a3      	mov	fp, r4
 8004468:	f1bb 0f01 	cmp.w	fp, #1
 800446c:	f300 8090 	bgt.w	8004590 <__kernel_rem_pio2+0x60c>
 8004470:	2700      	movs	r7, #0
 8004472:	463e      	mov	r6, r7
 8004474:	2c01      	cmp	r4, #1
 8004476:	f300 80aa 	bgt.w	80045ce <__kernel_rem_pio2+0x64a>
 800447a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800447e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004482:	9b00      	ldr	r3, [sp, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 80ac 	bne.w	80045e2 <__kernel_rem_pio2+0x65e>
 800448a:	4603      	mov	r3, r0
 800448c:	462a      	mov	r2, r5
 800448e:	9806      	ldr	r0, [sp, #24]
 8004490:	e9c0 2300 	strd	r2, r3, [r0]
 8004494:	4622      	mov	r2, r4
 8004496:	460b      	mov	r3, r1
 8004498:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800449c:	463a      	mov	r2, r7
 800449e:	4633      	mov	r3, r6
 80044a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80044a4:	e7cd      	b.n	8004442 <__kernel_rem_pio2+0x4be>
 80044a6:	2000      	movs	r0, #0
 80044a8:	46a0      	mov	r8, r4
 80044aa:	4601      	mov	r1, r0
 80044ac:	ab48      	add	r3, sp, #288	; 0x120
 80044ae:	441d      	add	r5, r3
 80044b0:	f1b8 0f00 	cmp.w	r8, #0
 80044b4:	da3a      	bge.n	800452c <__kernel_rem_pio2+0x5a8>
 80044b6:	9b00      	ldr	r3, [sp, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d03e      	beq.n	800453a <__kernel_rem_pio2+0x5b6>
 80044bc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80044c0:	4602      	mov	r2, r0
 80044c2:	462b      	mov	r3, r5
 80044c4:	9d06      	ldr	r5, [sp, #24]
 80044c6:	2601      	movs	r6, #1
 80044c8:	e9c5 2300 	strd	r2, r3, [r5]
 80044cc:	460b      	mov	r3, r1
 80044ce:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80044d2:	f7fb fe41 	bl	8000158 <__aeabi_dsub>
 80044d6:	4684      	mov	ip, r0
 80044d8:	460f      	mov	r7, r1
 80044da:	ad48      	add	r5, sp, #288	; 0x120
 80044dc:	42b4      	cmp	r4, r6
 80044de:	f105 0508 	add.w	r5, r5, #8
 80044e2:	da2c      	bge.n	800453e <__kernel_rem_pio2+0x5ba>
 80044e4:	9b00      	ldr	r3, [sp, #0]
 80044e6:	b10b      	cbz	r3, 80044ec <__kernel_rem_pio2+0x568>
 80044e8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80044ec:	4662      	mov	r2, ip
 80044ee:	463b      	mov	r3, r7
 80044f0:	9906      	ldr	r1, [sp, #24]
 80044f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80044f6:	e7a4      	b.n	8004442 <__kernel_rem_pio2+0x4be>
 80044f8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80044fa:	ab48      	add	r3, sp, #288	; 0x120
 80044fc:	4637      	mov	r7, r6
 80044fe:	441d      	add	r5, r3
 8004500:	2c00      	cmp	r4, #0
 8004502:	da09      	bge.n	8004518 <__kernel_rem_pio2+0x594>
 8004504:	9b00      	ldr	r3, [sp, #0]
 8004506:	b10b      	cbz	r3, 800450c <__kernel_rem_pio2+0x588>
 8004508:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	9906      	ldr	r1, [sp, #24]
 8004512:	e9c1 2300 	strd	r2, r3, [r1]
 8004516:	e794      	b.n	8004442 <__kernel_rem_pio2+0x4be>
 8004518:	4630      	mov	r0, r6
 800451a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800451e:	4639      	mov	r1, r7
 8004520:	f7fb fe1c 	bl	800015c <__adddf3>
 8004524:	3c01      	subs	r4, #1
 8004526:	4606      	mov	r6, r0
 8004528:	460f      	mov	r7, r1
 800452a:	e7e9      	b.n	8004500 <__kernel_rem_pio2+0x57c>
 800452c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004530:	f7fb fe14 	bl	800015c <__adddf3>
 8004534:	f108 38ff 	add.w	r8, r8, #4294967295
 8004538:	e7ba      	b.n	80044b0 <__kernel_rem_pio2+0x52c>
 800453a:	460d      	mov	r5, r1
 800453c:	e7c0      	b.n	80044c0 <__kernel_rem_pio2+0x53c>
 800453e:	4660      	mov	r0, ip
 8004540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004544:	4639      	mov	r1, r7
 8004546:	f7fb fe09 	bl	800015c <__adddf3>
 800454a:	3601      	adds	r6, #1
 800454c:	4684      	mov	ip, r0
 800454e:	460f      	mov	r7, r1
 8004550:	e7c4      	b.n	80044dc <__kernel_rem_pio2+0x558>
 8004552:	e9da 6700 	ldrd	r6, r7, [sl]
 8004556:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800455a:	4632      	mov	r2, r6
 800455c:	463b      	mov	r3, r7
 800455e:	4640      	mov	r0, r8
 8004560:	4649      	mov	r1, r9
 8004562:	f7fb fdfb 	bl	800015c <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f7fb fdf1 	bl	8000158 <__aeabi_dsub>
 8004576:	4632      	mov	r2, r6
 8004578:	463b      	mov	r3, r7
 800457a:	f7fb fdef 	bl	800015c <__adddf3>
 800457e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004582:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004586:	f10b 3bff 	add.w	fp, fp, #4294967295
 800458a:	e9ca 2300 	strd	r2, r3, [sl]
 800458e:	e766      	b.n	800445e <__kernel_rem_pio2+0x4da>
 8004590:	e9da 8900 	ldrd	r8, r9, [sl]
 8004594:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	4630      	mov	r0, r6
 800459e:	4639      	mov	r1, r7
 80045a0:	f7fb fddc 	bl	800015c <__adddf3>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fb fdd2 	bl	8000158 <__aeabi_dsub>
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	f7fb fdd0 	bl	800015c <__adddf3>
 80045bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045c0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80045c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80045c8:	e9ca 2300 	strd	r2, r3, [sl]
 80045cc:	e74c      	b.n	8004468 <__kernel_rem_pio2+0x4e4>
 80045ce:	4638      	mov	r0, r7
 80045d0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80045d4:	4631      	mov	r1, r6
 80045d6:	f7fb fdc1 	bl	800015c <__adddf3>
 80045da:	3c01      	subs	r4, #1
 80045dc:	4607      	mov	r7, r0
 80045de:	460e      	mov	r6, r1
 80045e0:	e748      	b.n	8004474 <__kernel_rem_pio2+0x4f0>
 80045e2:	9b06      	ldr	r3, [sp, #24]
 80045e4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80045e8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80045ec:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80045f0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80045f4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80045f8:	601d      	str	r5, [r3, #0]
 80045fa:	615e      	str	r6, [r3, #20]
 80045fc:	e721      	b.n	8004442 <__kernel_rem_pio2+0x4be>
 80045fe:	bf00      	nop
 8004600:	41700000 	.word	0x41700000
 8004604:	3e700000 	.word	0x3e700000

08004608 <__kernel_sin>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	e9cd 2300 	strd	r2, r3, [sp]
 8004612:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004616:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800461a:	4682      	mov	sl, r0
 800461c:	460c      	mov	r4, r1
 800461e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004620:	da03      	bge.n	800462a <__kernel_sin+0x22>
 8004622:	f7fc f9eb 	bl	80009fc <__aeabi_d2iz>
 8004626:	2800      	cmp	r0, #0
 8004628:	d050      	beq.n	80046cc <__kernel_sin+0xc4>
 800462a:	4652      	mov	r2, sl
 800462c:	4623      	mov	r3, r4
 800462e:	4650      	mov	r0, sl
 8004630:	4621      	mov	r1, r4
 8004632:	f7fb ff49 	bl	80004c8 <__aeabi_dmul>
 8004636:	4606      	mov	r6, r0
 8004638:	460f      	mov	r7, r1
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4650      	mov	r0, sl
 8004640:	4621      	mov	r1, r4
 8004642:	f7fb ff41 	bl	80004c8 <__aeabi_dmul>
 8004646:	a33e      	add	r3, pc, #248	; (adr r3, 8004740 <__kernel_sin+0x138>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	4680      	mov	r8, r0
 800464e:	4689      	mov	r9, r1
 8004650:	4630      	mov	r0, r6
 8004652:	4639      	mov	r1, r7
 8004654:	f7fb ff38 	bl	80004c8 <__aeabi_dmul>
 8004658:	a33b      	add	r3, pc, #236	; (adr r3, 8004748 <__kernel_sin+0x140>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb fd7b 	bl	8000158 <__aeabi_dsub>
 8004662:	4632      	mov	r2, r6
 8004664:	463b      	mov	r3, r7
 8004666:	f7fb ff2f 	bl	80004c8 <__aeabi_dmul>
 800466a:	a339      	add	r3, pc, #228	; (adr r3, 8004750 <__kernel_sin+0x148>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb fd74 	bl	800015c <__adddf3>
 8004674:	4632      	mov	r2, r6
 8004676:	463b      	mov	r3, r7
 8004678:	f7fb ff26 	bl	80004c8 <__aeabi_dmul>
 800467c:	a336      	add	r3, pc, #216	; (adr r3, 8004758 <__kernel_sin+0x150>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb fd69 	bl	8000158 <__aeabi_dsub>
 8004686:	4632      	mov	r2, r6
 8004688:	463b      	mov	r3, r7
 800468a:	f7fb ff1d 	bl	80004c8 <__aeabi_dmul>
 800468e:	a334      	add	r3, pc, #208	; (adr r3, 8004760 <__kernel_sin+0x158>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f7fb fd62 	bl	800015c <__adddf3>
 8004698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800469c:	b9dd      	cbnz	r5, 80046d6 <__kernel_sin+0xce>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4630      	mov	r0, r6
 80046a4:	4639      	mov	r1, r7
 80046a6:	f7fb ff0f 	bl	80004c8 <__aeabi_dmul>
 80046aa:	a32f      	add	r3, pc, #188	; (adr r3, 8004768 <__kernel_sin+0x160>)
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f7fb fd52 	bl	8000158 <__aeabi_dsub>
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	f7fb ff06 	bl	80004c8 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4650      	mov	r0, sl
 80046c2:	4621      	mov	r1, r4
 80046c4:	f7fb fd4a 	bl	800015c <__adddf3>
 80046c8:	4682      	mov	sl, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4650      	mov	r0, sl
 80046ce:	4621      	mov	r1, r4
 80046d0:	b006      	add	sp, #24
 80046d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d6:	2200      	movs	r2, #0
 80046d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <__kernel_sin+0x168>)
 80046de:	f7fb fef3 	bl	80004c8 <__aeabi_dmul>
 80046e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fb feeb 	bl	80004c8 <__aeabi_dmul>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046fa:	f7fb fd2d 	bl	8000158 <__aeabi_dsub>
 80046fe:	4632      	mov	r2, r6
 8004700:	463b      	mov	r3, r7
 8004702:	f7fb fee1 	bl	80004c8 <__aeabi_dmul>
 8004706:	e9dd 2300 	ldrd	r2, r3, [sp]
 800470a:	f7fb fd25 	bl	8000158 <__aeabi_dsub>
 800470e:	a316      	add	r3, pc, #88	; (adr r3, 8004768 <__kernel_sin+0x160>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	4606      	mov	r6, r0
 8004716:	460f      	mov	r7, r1
 8004718:	4640      	mov	r0, r8
 800471a:	4649      	mov	r1, r9
 800471c:	f7fb fed4 	bl	80004c8 <__aeabi_dmul>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4630      	mov	r0, r6
 8004726:	4639      	mov	r1, r7
 8004728:	f7fb fd18 	bl	800015c <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4650      	mov	r0, sl
 8004732:	4621      	mov	r1, r4
 8004734:	f7fb fd10 	bl	8000158 <__aeabi_dsub>
 8004738:	e7c6      	b.n	80046c8 <__kernel_sin+0xc0>
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w
 8004740:	5acfd57c 	.word	0x5acfd57c
 8004744:	3de5d93a 	.word	0x3de5d93a
 8004748:	8a2b9ceb 	.word	0x8a2b9ceb
 800474c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004750:	57b1fe7d 	.word	0x57b1fe7d
 8004754:	3ec71de3 	.word	0x3ec71de3
 8004758:	19c161d5 	.word	0x19c161d5
 800475c:	3f2a01a0 	.word	0x3f2a01a0
 8004760:	1110f8a6 	.word	0x1110f8a6
 8004764:	3f811111 	.word	0x3f811111
 8004768:	55555549 	.word	0x55555549
 800476c:	3fc55555 	.word	0x3fc55555
 8004770:	3fe00000 	.word	0x3fe00000

08004774 <fabs>:
 8004774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004778:	4770      	bx	lr
 800477a:	0000      	movs	r0, r0
 800477c:	0000      	movs	r0, r0
	...

08004780 <scalbn>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
 800478a:	4617      	mov	r7, r2
 800478c:	460b      	mov	r3, r1
 800478e:	b996      	cbnz	r6, 80047b6 <scalbn+0x36>
 8004790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004794:	4303      	orrs	r3, r0
 8004796:	d039      	beq.n	800480c <scalbn+0x8c>
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <scalbn+0xe8>)
 800479a:	2200      	movs	r2, #0
 800479c:	f7fb fe94 	bl	80004c8 <__aeabi_dmul>
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <scalbn+0xec>)
 80047a2:	4604      	mov	r4, r0
 80047a4:	429f      	cmp	r7, r3
 80047a6:	460d      	mov	r5, r1
 80047a8:	da0f      	bge.n	80047ca <scalbn+0x4a>
 80047aa:	a32b      	add	r3, pc, #172	; (adr r3, 8004858 <scalbn+0xd8>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fe8a 	bl	80004c8 <__aeabi_dmul>
 80047b4:	e006      	b.n	80047c4 <scalbn+0x44>
 80047b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80047ba:	4296      	cmp	r6, r2
 80047bc:	d10a      	bne.n	80047d4 <scalbn+0x54>
 80047be:	4602      	mov	r2, r0
 80047c0:	f7fb fccc 	bl	800015c <__adddf3>
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	e020      	b.n	800480c <scalbn+0x8c>
 80047ca:	460b      	mov	r3, r1
 80047cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80047d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80047d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80047d8:	19b9      	adds	r1, r7, r6
 80047da:	4291      	cmp	r1, r2
 80047dc:	dd0e      	ble.n	80047fc <scalbn+0x7c>
 80047de:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80047e2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80047e6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80047ea:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80047ee:	4820      	ldr	r0, [pc, #128]	; (8004870 <scalbn+0xf0>)
 80047f0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80047f4:	a31a      	add	r3, pc, #104	; (adr r3, 8004860 <scalbn+0xe0>)
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	e7d9      	b.n	80047b0 <scalbn+0x30>
 80047fc:	2900      	cmp	r1, #0
 80047fe:	dd08      	ble.n	8004812 <scalbn+0x92>
 8004800:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004808:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800480c:	4620      	mov	r0, r4
 800480e:	4629      	mov	r1, r5
 8004810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004812:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004816:	da12      	bge.n	800483e <scalbn+0xbe>
 8004818:	f24c 3350 	movw	r3, #50000	; 0xc350
 800481c:	429f      	cmp	r7, r3
 800481e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004822:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004826:	dcdc      	bgt.n	80047e2 <scalbn+0x62>
 8004828:	a30b      	add	r3, pc, #44	; (adr r3, 8004858 <scalbn+0xd8>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004832:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004836:	480f      	ldr	r0, [pc, #60]	; (8004874 <scalbn+0xf4>)
 8004838:	f041 011f 	orr.w	r1, r1, #31
 800483c:	e7b8      	b.n	80047b0 <scalbn+0x30>
 800483e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004842:	3136      	adds	r1, #54	; 0x36
 8004844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004848:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	2200      	movs	r2, #0
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <scalbn+0xf8>)
 8004854:	e7ac      	b.n	80047b0 <scalbn+0x30>
 8004856:	bf00      	nop
 8004858:	c2f8f359 	.word	0xc2f8f359
 800485c:	01a56e1f 	.word	0x01a56e1f
 8004860:	8800759c 	.word	0x8800759c
 8004864:	7e37e43c 	.word	0x7e37e43c
 8004868:	43500000 	.word	0x43500000
 800486c:	ffff3cb0 	.word	0xffff3cb0
 8004870:	8800759c 	.word	0x8800759c
 8004874:	c2f8f359 	.word	0xc2f8f359
 8004878:	3c900000 	.word	0x3c900000

0800487c <_init>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

08004888 <_fini>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr
